<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组方法的扩展:array.every()和array.some()</title>
      <link href="/2020/05/13/coding-4/"/>
      <url>/2020/05/13/coding-4/</url>
      
        <content type="html"><![CDATA[<p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p><ol><li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li><li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li></ol><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span>array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array）<span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// item:当前元素的值；</span>                 <span class="token comment" spellcheck="true">// index:当前元素的索引；</span>                 <span class="token comment" spellcheck="true">// array:当前元素的数组对象；</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//es6</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 所有都满足才会返回true,否则返回false;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[10,20,30,40,50,22,26]</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es5</span><span class="token comment" spellcheck="true">// let result = age.every(function(item,index,array){</span><span class="token comment" spellcheck="true">//     return item > 22;</span><span class="token comment" spellcheck="true">//     })</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span>array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array）<span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// item:当前元素的值；</span>                 <span class="token comment" spellcheck="true">// index:当前元素的索引；</span>                 <span class="token comment" spellcheck="true">// array:当前元素的数组对象；</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子:"></a>例子:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//es6</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 所有都满足才会返回true,否则返回false;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10 20 30</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 1 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[10,20,30,40,50,22,26]</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es5</span><span class="token comment" spellcheck="true">// let result = age.some(function(item,index,array){</span><span class="token comment" spellcheck="true">//     return item > 22;</span><span class="token comment" spellcheck="true">//     })</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端构建工具Gulp.js 知多少</title>
      <link href="/2020/05/13/gulp-20190618/"/>
      <url>/2020/05/13/gulp-20190618/</url>
      
        <content type="html"><![CDATA[<p>@<a href="前端构建工具Gulp.js知多少">TOC</a></p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><blockquote><p>前几天在更新webpack知识的时候，想起来三年前用过的前端构建工具gulp/grunt,遂写个笔记总结一下，出来混总是要还的，忘得七七八八了…</p></blockquote><p>阅读本文章之前，相信你已经对前端构建工具(webpack、gulp、grunt)有一定的认知和了解了，那么他们之间究竟有什么区别呢？</p><h3 id="什么是gulp？"><a href="#什么是gulp？" class="headerlink" title="什么是gulp？"></a>什么是gulp？</h3><p>gulp文档上面有这么一句话$\color{blue} {用自动化构建工具增强你的工作流程！} $ ，也就是说 gulp是一个自动化构建工具；<br>gulp的一些功能如下(包括但不限于):<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-631953087e459269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动化构建工具gulp"></p><h3 id="gulp或grunt和webpack的区别"><a href="#gulp或grunt和webpack的区别" class="headerlink" title="gulp或grunt和webpack的区别"></a>gulp或grunt和webpack的区别</h3><p>其实Webpack和另外两个并没有太多的可比性</p><ul><li><p>Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p></li><li><p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-d87610855f28fd9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Grunt和Gulp的工作流程"></p></li><li><p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-cdea13333a46b8f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Webpack的工作方式"><br><strong>上述内容转自@zhangwang的<a href="https://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">入门Webpack，看这篇就够了</a></strong></p></li></ul><h3 id="gulp起步"><a href="#gulp起步" class="headerlink" title="gulp起步"></a>gulp起步</h3><p>傻瓜式起步照搬官网文档<br>1.安装</p><pre><code>// 全局安装$ npm install -g gulp或者$ npm install --global gulp// 作为项目的开发依赖（devDependencies）安装：$ npm install --save-dev gulp</code></pre><p>2.在项目根目录下创建一个名为 gulpfile.js 的文件：</p><pre><code>var gulp = require(&#39;gulp&#39;);gulp.task(&#39;default&#39;, function() {  // 将你的默认的任务代码放在这});</code></pre><p>3.运行 gulp：</p><pre><code>$ gulp</code></pre><p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。<br>具体详情可以查看<a href="https://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">gulpjs.com文档</a></p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>新建一个项目gulp-test<br>环境:</p><pre><code>$ node -v // v9.1.0$ npm -v // 6.5.0</code></pre><p>1.新建文件以下文件如下</p><pre><code>gulp-test/          css/               index.scss           js/               helloworld.js           index.html           gulpfile.js</code></pre><p>其中 <strong>gulpfile.js</strong> 是我们gulp的配置文件，启动gulp默认会找个这个文件并执行；<br>2.接下来安装依赖</p><pre><code>$ npm init</code></pre><p>一直按回车Enter初始化package.json文件(小技巧: <strong>npm iniy -y</strong> 可以免去繁琐的enter步骤)<br>此时我们的目录结构是这样了</p><pre><code>gulp-test/          css/               index.scss           js/               helloworld.js           index.html           gulpfile.js           package.json</code></pre><p>安装依赖</p><pre><code>npm i --save-dev gulp        // gulp自动化构建工具npm i --save-dev gulp-uglify //js压缩npm i --save-dev gulp-concat //文件合并npm i --save-dev gulp-jshint //js语法检测npm i --save-dev gulp-rename //文件重命名npm i --save-dev gulp-sass //sass编译工具npm i --save-dev gulp-minify-css //css压缩npm i --save-dev del       //文件删除// 以下三选一npm i --save-dev gulp-connect       // 自动刷新页面npm i --save-dev  browser-sync       // 自动刷新页面npm i --save-dev gulp-livereload       // 自动刷新页面</code></pre><p>这里页面实时刷新只讲这个<strong>gulp-connect</strong> ，其他详情可以参照<a href="http://www.browsersync.cn/docs/gulp/" target="_blank" rel="noopener">Browsersync</a>和文章<a href="http://www.ydcss.com/archives/702" target="_blank" rel="noopener">gulp-livereload</a></p><p>安装完依赖后配置gulpfile.js如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义依赖项和插件</span><span class="token keyword">const</span> gulp<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span>  uglify<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩</span><span class="token keyword">const</span>  concat<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件合并</span><span class="token keyword">const</span> jshint <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-jshint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js语法检测</span><span class="token keyword">const</span> rename <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-rename'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重命名</span><span class="token keyword">const</span> sass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-sass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译scss</span><span class="token keyword">const</span>  minifycss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-minify-css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 压缩css</span><span class="token comment" spellcheck="true">// const livereload = require('gulp-livereload'); // 自动刷新页面</span><span class="token keyword">const</span>  del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件删除</span><span class="token keyword">const</span> connect <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-connect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动刷新页面</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  connect<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面</span>    root<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指定html文件起始的根目录</span>    livereload<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//启动实时刷新功能（配合上边的connect.reload()方法同步使用）</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义名为 "my-task" 的任务压缩js</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'my-task-js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./js/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">jshint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'all.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义名为 "my-task-css" 的任务编译scss压缩css</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'my-task-css'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./css/*.scss'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">sass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> sass<span class="token punctuation">.</span>logError<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'all.css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">minifycss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'*.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行压缩前，先删除以前压缩的文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'clean'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./dist/css/all.css'</span><span class="token punctuation">,</span> <span class="token string">'./dist/css/all.min.css'</span><span class="token punctuation">,</span> <span class="token string">'./dist/all.js'</span><span class="token punctuation">,</span><span class="token string">'./dist/all.min.js'</span><span class="token punctuation">,</span> <span class="token string">'./dist/html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'clean'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  gulp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">'my-task-js'</span><span class="token punctuation">,</span> <span class="token string">'my-task-css'</span><span class="token punctuation">,</span> <span class="token string">'watch'</span><span class="token punctuation">,</span> <span class="token string">'server'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 任务监听</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'watch'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Watch.js files</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'./js/*.js'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'my-task-js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Watch .scss files</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'./css/*.scss'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'my-task-css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Watch .html files</span>  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'./*.html'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Watch any files in dist/, reload on change</span>  <span class="token comment" spellcheck="true">// gulp.watch(['dist/!**']).on('change', livereload.changed);</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>大概讲解一下gulpfile.js:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span><span class="token comment" spellcheck="true">// 定义名为 "my-task" 的任务压缩js</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'my-task-js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./js/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">jshint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//js检测</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//js压缩</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'all.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//合并为all.js</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 重命名为all.mim.js</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出到/dist/js目录</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 更新页面</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p><strong>gulp.task</strong>是gulp的api 定义一个使用 <a href="https://github.com/robrich/orchestrator" target="_blank" rel="noopener">Orchestrator</a> 实现的任务（task）<br>如上我们定义了<strong>my-task-js</strong>，<strong>my-task-css</strong>，<strong>html</strong>，<strong>clean</strong>，<strong>default</strong>，<strong>watch</strong>，<strong>server</strong>等任务，其中:</p><hr><p><strong>my-task-js</strong> 是将 符合所提供的匹配模式的js 进行检测(gulp-jshint)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/js目录下；</p><hr><p><strong>my-task-css</strong> 是将 符合所提供的匹配模式的sass进行编译(gulp-sass)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/css目录下；</p><hr><p><strong>html</strong>  是将 符合所提供的匹配模式的html进行监听，如果有变化则connect.reload()</p><hr><p><strong>clean</strong> 是如果任务重新启动时 删除旧文件；</p><hr><p><strong>default</strong> gulp默认启动的任务</p><hr><p><strong>watch</strong> gulp的api 监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</p><hr><p><strong>server</strong> 依赖gulp-connect启动一个服务器</p><pre><code>gulp.task(&#39;server&#39;, function() {  connect.server({    port: 8080, //指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面    root: &#39;./&#39;, //指定html文件起始的根目录    livereload: true //启动实时刷新功能（配合上边的connect.reload()方法同步使用）  });});</code></pre><p>配置完gulpfile.js之后，我们给js和css及html加点东西:</p><p>首先js/helloworld.js</p><pre><code>// helloworld.jsconsole.log(&#39;hello world&#39;)</code></pre><p>css/index.scss</p><pre><code>// index.scss// 变量测试$fontColor:  #red;$backColor: aqua;// 嵌套类测试div {  p {    font-weight: bold;    font-size: 20px;    color: $fontColor;  }}div{  background: $backColor;}</code></pre><p>index.html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;gulp-study&lt;/title&gt;    &lt;link href=/dist/css/all.min.css rel=stylesheet&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;firstDiv&quot;&gt;        &lt;p&gt;我是gulp&lt;/p&gt;        &lt;p&gt;hello world&lt;/p&gt;    &lt;/div&gt;&lt;p&gt;我是p标签&lt;/p&gt;&lt;p&gt;我是p标签&lt;/p&gt;&lt;/body&gt;&lt;script src=&quot;/dist/js/all.min.js&quot;&gt;&lt;/script&gt;&lt;/html&gt;</code></pre><p>运行gulp</p><pre><code>$ gulp</code></pre><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-658fdd8778eee60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行输出"></p><hr><p>浏览器效果:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-71e06d521d7296ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><p>接下来我们修改helloworld.js来看看是否能实时刷新<br>修改如下:</p><pre><code>// helloworld.jsconsole.log(&#39;hello world&#39;);let firstDiv =  document.getElementById(&#39;firstDiv&#39;)console.log(firstDiv)</code></pre><p>按保存之后，终端给我们报了一个错:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-ccc18ca2147541e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Unhandled &#39;error&#39; event"></p><p>查看js发现我们用了es6语法的声明语句$\color{red}{let}$ 但当前gulp无法处理es6语法，有问题解决问题，es6=&gt;es5</p><p>解决方案:<br>安装gulp-babel babel-core babel-preset-es2015</p><pre><code>npm i  --save-dev  gulp-babel babel-core babel-preset-es2015</code></pre><p>gulpfile.js修改如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-babel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span><span class="token comment" spellcheck="true">// 定义名为 "my-task" 的任务压缩js</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'my-task-js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./js/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">jshint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'all.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./dist/js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>connect<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>运行</p><pre><code>$ gulp</code></pre><p>依然报上面的错；找了一些原因发现，虽然安装了相关依赖，却没有配置.babelrc文件，即babel还没转化es6</p><p>根目录添加.babelrc文件</p><pre><code>{    &quot;presets&quot;: [&quot;es2015&quot;]}</code></pre><p>重新运行:</p><pre><code>$ gulp</code></pre><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-ebca2eebe090db0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果如下"></p><p>查看dist下的js文件<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-d6e0cd882a9255d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="let已经转化成var"></p><p>改变helloworld.js检查页面是否刷新</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// helloworld.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> firstDiv <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'firstDiv'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstDiv<span class="token punctuation">)</span>firstDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span></code></pre><p>保存，页面的天空蓝换成你们喜欢的yellow颜色<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-b754da4517d86f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面的天空蓝换成你们喜欢的yellow颜色"></p><p>修改index.scss 查看是否会刷新页面</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// index.scss</span><span class="token comment" spellcheck="true">// 变量测试</span><span class="token property"><span class="token variable">$fontColor</span></span><span class="token punctuation">:</span>  #red<span class="token punctuation">;</span><span class="token property"><span class="token variable">$backColor</span></span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 嵌套类测试</span><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token selector">p </span><span class="token punctuation">{</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$fontColor</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$backColor</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-2c4df6498e367b28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面更新正常"></p><p>最后修改index.html 查看是否会刷新页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>gulp-study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span>/dist/css/all.min.css</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span>stylesheet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是gulp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是真的皮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/dist/js/all.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-ffbb4620ab84a644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出完美"></p><h3 id="文章最后"><a href="#文章最后" class="headerlink" title="文章最后"></a>文章最后</h3><p>今天主要学习了gulp的简单项目搭建及实时更新配置；其实gulp类似于grunt的弱化版，但更简单好用，只是插件会少一些，目前主流的项目搭建工具主要是webpack，但依然有不少项目还用着gulp或者grunt</p><p>扩展:</p><blockquote><p><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack中文网</a><br><a href="https://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">gulpjs中文网</a><br><a href="https://www.gruntjs.net/getting-started" target="_blank" rel="noopener">gruntjs中文网</a></p></blockquote><p>下面还有一些楼主的学习笔记:</p><blockquote><p>@<a href="https://www.jianshu.com/p/10fbaa365f0c" target="_blank" rel="noopener">webpack4+加vue2+从零开始搭设vue项目</a><br>@<a href="https://www.jianshu.com/p/c577582581b1" target="_blank" rel="noopener">nginx部署/代理/跨域</a></p></blockquote><p>有兴趣的可以多多交流@<a href="https://wlove-c.github.io/" target="_blank" rel="noopener">楼主博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac/nginx/nginx部署/代理/跨域</title>
      <link href="/2020/05/13/macnginx-20190603/"/>
      <url>/2020/05/13/macnginx-20190603/</url>
      
        <content type="html"><![CDATA[<p>上篇文章我们说到了nginx的一些入门功能使用，但Mac book下的nginx如何配置呢？这将是本篇文章的重点；</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><ol><li><p>打开终端Terminal</p></li><li><p>安装brew</p></li></ol><blockquote><p>ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p></blockquote><p>3.安装nginx</p><blockquote><p>brew install nginx</p></blockquote><ol start="4"><li>检查是否安装成功</li></ol><pre><code>nginx -v</code></pre><p>输出版本</p><pre><code>nginx version: nginx/1.15.6  //我的是这个</code></pre><p>如上输出 则安装成功</p><ol start="5"><li>nginx默认下载路径</li></ol><blockquote><p>/usr/local/etc/nginx/nginx.conf （配置文件路径）<br>/usr/local/var/www （服务器默认路径）<br>/usr/local/Cellar/nginx/1.12.0 （安装路径）</p></blockquote><p>修改配置文件 推荐使用vim</p><pre><code>brew install vim // 安装</code></pre><blockquote><p>vim使用方法 转<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">菜鸟教程vim/vi</a></p></blockquote><ol start="6"><li>启动nginx</li></ol><pre><code>// 在终端输入nginx // 启动// 如果报无权限 则加上管理权限启动sudo nginx</code></pre><p>启动成功之后访问 localhost:8080 如果网页输出Welcome to nginx! 则启动成功</p><ol start="7"><li>nginx的 常用命令</li></ol><pre><code>nginx -s quit    // 退出nginx -s reload  // 重新加载nginx -t         //测试nginx.conf配置</code></pre><p>关于nginx的配置 可以查看<a href="https://wlove-c.github.io/2019/06/03/nginx-20190603/" target="_blank" rel="noopener">安静Eno | nginx配置/部署/代理</a></p><p>最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 的介绍和使用</title>
      <link href="/2020/05/13/hello-world/"/>
      <url>/2020/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 这是我的第一个发布. 通过观看 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">问题解决</a> 或者你也可以在github寻求帮助 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-（创建新文章）"><a href="#Create-a-new-post-（创建新文章）" class="headerlink" title="Create a new post （创建新文章）"></a>Create a new post （创建新文章）</h3><hr><h2 id="title-hello"><a href="#title-hello" class="headerlink" title="title: hello"></a>title: hello</h2><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server-（运行）"><a href="#Run-server-（运行）" class="headerlink" title="Run server （运行）"></a>Run server （运行）</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files-（生成静态文件）"><a href="#Generate-static-files-（生成静态文件）" class="headerlink" title="Generate static files （生成静态文件）"></a>Generate static files （生成静态文件）</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites-（部署到远程站点）"><a href="#Deploy-to-remote-sites-（部署到远程站点）" class="headerlink" title="Deploy to remote sites （部署到远程站点）"></a>Deploy to remote sites （部署到远程站点）</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx部署/代理的基础</title>
      <link href="/2020/05/13/nginx-20190603/"/>
      <url>/2020/05/13/nginx-20190603/</url>
      
        <content type="html"><![CDATA[<h3 id="关于nginx-咱们先了解nginx在开发过程中的主要作用"><a href="#关于nginx-咱们先了解nginx在开发过程中的主要作用" class="headerlink" title="关于nginx,咱们先了解nginx在开发过程中的主要作用"></a>关于nginx,咱们先了解nginx在开发过程中的主要作用</h3><ul><li>nginx解决跨域</li><li>nginx负载均衡</li></ul><h3 id="一、nginx解决跨域"><a href="#一、nginx解决跨域" class="headerlink" title="一、nginx解决跨域"></a>一、nginx解决跨域</h3><p>如果要理解什么是跨域</p><blockquote><p>广义上的跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。即浏览器的同源策略/SOP限制引起的跨域也属于在内；</p></blockquote><ul><li>那么什么是同源策略呢？</li></ul><blockquote><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。同源策略即: 协议+域名+端口”三者相同</p></blockquote><ul><li>常见的跨域场景如下：</li></ul><pre><code>URL                                      说明                    是否允许通信http://www.baidu.com/hello.jshttp://www.baidu.com/world.js         同一域名，不同文件或路径               允许（无跨域）http://www.baidu.com/hello/world.jshttp://www.baidu.com:8000/hello.jshttp://www.baidu.com/hello.js         同一域名，不同端口                不允许（有跨域）http://www.baidu.com/hello.jshttps://www.baidu.com/world.js        同一域名，不同协议                不允许（有跨域）http://www.baidu.com/hello.jshttp://192.168.22.128/world.js        域名和域名对应ip                 不允许（有跨域）http://baidu.com/hello.jshttp://x.baidu.com/hello.js           主域相同，子域不同                不允许（有跨域）http://www.baidu.com/hello.jshttp://www.baidu.com/hello.jshttp://www.bai.com/world.js           不同域名                        不允许（有跨域）</code></pre><h5 id="常见的跨域解决方案有如下"><a href="#常见的跨域解决方案有如下" class="headerlink" title="常见的跨域解决方案有如下:"></a>常见的跨域解决方案有如下:</h5><ol><li>jsonp解决跨域</li><li>document.domain + iframe解决跨域</li><li>nginx代理解决跨域</li><li>nodejs中间件代理解决跨域</li></ol><h3 id="重点来了-nginx代理解决跨域；"><a href="#重点来了-nginx代理解决跨域；" class="headerlink" title="重点来了 nginx代理解决跨域；"></a>重点来了 nginx代理解决跨域；</h3><pre><code>server {        listen       80;        server_name  localhost; //前端域名 具体原理解释在下方        location / {  // location / 代理所有请求 而如果是 location /api 则匹配到有/api 前缀的请求才会代理                        proxy_pass www.baidu.com; // 服务端域名        }}</code></pre><ol><li>前端server域名是localhost</li><li>服务器server域名是<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><blockquote><p>根据浏览器的SOP/同源策略 localhost对<a href="http://www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，" target="_blank" rel="noopener">www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，</a><br>此时前端发起的请求相当于是localhost对localhost发起，这样是不会引起跨域的；但真实情况是，nginx对localhost的请求代理回 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></blockquote></li></ol><hr><p>这里赘述一下什么是代理；</p><blockquote><p>代理是在服务器和客户端之间假设的一层服务器（中间服务器），代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。</p></blockquote><p>代理分为正向代理和反向代理:具体区别自行百度…</p><hr><h3 id="nginx负载均衡"><a href="#nginx负载均衡" class="headerlink" title="nginx负载均衡"></a>nginx负载均衡</h3><p>nginx是通过把请求分发到服务器列表来实现负载均衡的；具体实现如下:</p><pre><code>upstream balance.com{             server 192.168.2.100:42000;             server 192.168.2.101:42000;             server 192.168.2.102:42000;}server {        server_name  fe.server.com;        listen 80;        location /api {                proxy_pass http://balance.com;        }}</code></pre><p>上面的配置只是指定了nginx需要转发的服务端列表，并没有指定分配策略。</p><h4 id="nginx负载均衡策略"><a href="#nginx负载均衡策略" class="headerlink" title="nginx负载均衡策略"></a>nginx负载均衡策略</h4><ol><li>轮询策略</li></ol><blockquote><p>轮询策略是默认的策略，把每个请求按顺序逐一分配到不同的server，如果server挂掉，能自动剔除</p></blockquote><pre><code>upstream balance.com{                 server 192.168.2.100:42000;                 server 192.168.2.101:42000;                 server 192.168.2.102:42000;        }</code></pre><ol start="2"><li>最少连接数策略</li></ol><blockquote><p>把请求优先分配给连接数最少的server,可以平衡每个队列的长度;</p></blockquote><pre><code>    upstream balance.com{                     least_conn;                     server 192.168.2.100:42000;                     server 192.168.2.101:42000;                     server 192.168.2.102:42000;        }</code></pre><ol start="3"><li>最快响应时间策略</li></ol><blockquote><p>优先分配给响应时间最短的服务器。</p></blockquote><pre><code>    upstream balance.com{                     fair;                     server 192.168.2.100:42000;                     server 192.168.2.101:42000;                     server 192.168.2.102:42000;        }</code></pre><ol start="4"><li>权重策略<blockquote><p>使用weight来指定server访问比率，weight默认是1。访问率比例等于权重比例；</p></blockquote></li></ol><pre><code>    upstream balance.com{                     server 192.168.2.100:42000 weight=1;                     server 192.168.2.101:42000 weight=2;                     server 192.168.2.102:42000 weight=3;        }</code></pre><ol start="5"><li>客户端ip绑定 ip_hash<blockquote><p>每个请求会按照访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一server进行处理，可以解决session的问题。如果server挂掉，能自动剔除。</p></blockquote></li></ol><pre><code>    upstream balance.com{                    ip_hash;                     server 192.168.2.100:42000 weight=1;                     server 192.168.2.101:42000 weight=2;                     server 192.168.2.102:42000 weight=3;        }</code></pre><p>以上是博主目前了解和使用到的一些技巧和知识啦，至于关于nginx部署后404问题请看@<a href="https://www.jianshu.com/p/42dcccc2f991" target="_blank" rel="noopener">vue框架下部署上线后刷新报404问题解决方案</a></p><p>最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干货学习</title>
      <link href="/2020/05/13/coding-5/"/>
      <url>/2020/05/13/coding-5/</url>
      
        <content type="html"><![CDATA[<p>websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种</p><div class="article fmt article__content" data-id="1190000018628100" data-license><br><br><h1 id="articleHeader0">websocket</h1><br><p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p><br><h3 id="articleHeader1">websocket 和http区别？</h3><br><ul><br><li><br><p>相同点</p><br><ul><br><li>都是应用层的协议</li><br><li>都是基于tcp,可靠的协议</li><br></ul><br></li><br><li><br><p>不同点</p><br><ul><br><li>websocket是持久化的协议.</li><br><li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li><br><li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li><br></ul><br></li><br></ul><br><h3 id="articleHeader2">请描述一下cookie、sessionStorage和localStorage的区别？</h3><br><ul><br><li>相同点：都存储在客户端</li><br><li><br><p>不同点</p><br><ol><br><li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><br><li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li><br><li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li><br></ol><br></li><br></ul><br><h3 id="articleHeader3">JS的类型？</h3><br><ul><br><li><br><p>基本类型</p><br><ul><br><li>undefined</li><br><li>null</li><br><li>Number</li><br><li>String</li><br><li>Boolean</li><br></ul><br></li><br><li><br><p>复杂类型</p><br><ul><li>Object</li></ul><br></li><br></ul><br><h3 id="articleHeader4">js变量按照存储方式区分，有哪些类型，并表述其特点</h3><br><ul><br><li><br><p>值类型：</p><br><ul><br><li>undefined string number Boolean</li><br><li>拷贝形式,</li><br></ul><br></li><br><li><br><p>引用类型：</p><br><ul><br><li>array , function</li><br><li>指针指向，共用空间</li><br><li>可无限扩展属性，极大节省命名空间。</li><br></ul><br></li><br><li><br><p>特殊引用类型：function</p><br><ul><br><li>同引用类型↑</li><br><li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li><br></ul><br></li><br></ul><br><h3 id="articleHeader5">JS中的typeof能得到的那些类型？ 6种</h3><br><ul><br><li>number</li><br><li>string</li><br><li>undefined</li><br><li>object :  null和数组 都是object</li><br><li>function</li><br><li>boolean</li><br></ul><br><p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" typeof {} //object typeof [] //object typeof null //object typeof console.log // function " title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code> <span class="hljs-keyword">typeof</span> {} <span class="hljs-comment">//object</span><br> <span class="hljs-keyword">typeof</span> [] <span class="hljs-comment">//object</span><br> <span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> <span class="hljs-comment">//object</span><br> <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">console</span>.log <span class="hljs-comment">// function </span></code></pre><br><p>function是一个比较特殊的类型，所以typeof能够区分</p><br><h3 id="articleHeader6">何时使用===何时使用==？</h3><br><ul><br><li><br><p>尽可能使用 === 原因如下</p><br><ul><br><li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li><br><li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li><br><li>== 会进行类型转换，很容易懵逼</li><br></ul><br></li><br><li><br><p>== 的使用情况,可参考</p><br><ul><li>判断对象的属性是否存在</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="    var obj = {};    if( obj.a == null ){        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法    }" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs scala"><code>    <span class="hljs-keyword">var</span> obj = {};<br>    <span class="hljs-keyword">if</span>( obj.a == <span class="hljs-literal">null</span> ){<br>        <span class="hljs-comment">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span><br>    }</code></pre><br><ul><li>判断函数的参数是否存在</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="    function fn( a, b){        if( b == null ){            //这里相当于 b===null || b === undefined 的简写        }    }" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs actionscript"><code>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span><span class="hljs-params">( a, b)</span></span>{<br>        <span class="hljs-keyword">if</span>( b == <span class="hljs-literal">null</span> ){<br>            <span class="hljs-comment">//这里相当于 b===null || b === undefined 的简写</span><br>        }<br>    }</code></pre><br></li><br></ul><br><h3 id="articleHeader7">如何理解JSON？</h3><br><ul><br><li><br><p>从纯JS的角度看，JSON就是对象，并且只有两个API</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="   JSON.stringify({a:10,b:30}) //将对象转为字符串   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code>   <span class="hljs-built_in">JSON</span>.stringify({a:<span class="hljs-number">10</span>,b:<span class="hljs-number">30</span>}) <span class="hljs-comment">//将对象转为字符串</span><br>   <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">‘{“a”:10,”b”:30}’</span>) <span class="hljs-comment">//将JSON格式的字符串转为 对象</span></code></pre><br></li><br><li>JSON也是一种轻量级的文本数据交换格式.</li><br></ul><br><h3 id="articleHeader8">js中有哪些内置函数 9 种</h3><br><ul><br><li>Object</li><br><li>Array</li><br><li>Boolean</li><br><li>Number</li><br><li>String</li><br><li>Function</li><br><li>Date</li><br><li>RegExp</li><br><li>Error</li><br></ul><br><h3 id="articleHeader9">判断一个变量会被当做 true 还是 false</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var a = 100; console.log( !!a ); //true" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code style="word-break: break-word; white-space: initial;"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>; <span class="hljs-built_in">console</span>.log( !!a ); <span class="hljs-comment">//true</span></code></pre><br><h3 id="articleHeader10">window.onload和DOMContentLoaded的区别？</h3><br><ul><br><li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li><br><li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li><br></ul><br><h3 id="articleHeader11">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3><br><p>可参看这篇博文：<a href="https://github.com/youngwind/blog/issues/98" rel="nofollow noreferrer" target="_blank">https://github.com/youngwind/…</a></p><br><h3 id="articleHeader12">实现数组的随机排序</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现 arr.sort(function () {      return Math.random() - 0.5;   });" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs lua"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现<br> arr.<span class="hljs-built_in">sort</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> {<br>      <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">random</span>() - <span class="hljs-number">0.5</span>;<br>   });<br></code></pre><br><p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。   var arr = [5,8,59,56];   function shuffle(arr) {    var i = arr.length, t, j;    while (i)    {        j = Math.floor(Math.random() * i--);        t= arr[i];        arr[i] = arr[j];        arr[j]= t;    }}shuffle(arr)console.log(arr);//[56, 8, 5, 59]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><br>    <span class="hljs-comment">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span><br>   <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">59</span>,<span class="hljs-number">56</span>];<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shuffle</span>(<span class="hljs-params">arr</span>) </span>{<br>    <span class="hljs-keyword">var</span> i = arr.length, t, j;<br>    <span class="hljs-keyword">while</span> (i)<br>    {<br>        j = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * i–);<br>        t= arr[i];<br>        arr[i] = arr[j];<br>        arr[j]= t;<br>    }<br>}<br>shuffle(arr)<br><span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[56, 8, 5, 59]</span></code></pre><br><h1 id="articleHeader13">原型和原型链</h1><br><h3 id="articleHeader14">什么叫原型链</h3><br><p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p><br><h3 id="articleHeader15">原型规则</h3><br><ol><br><li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li><br><li>所有的引用类型（数组，对象，函数），都有一个<strong>proto</strong>属性，也可以称为隐式原型，属性值是一个普通的对象</li><br><li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li><br><li>所有的引用类型（数组，对象，函数），<strong>proto</strong>属性值指向它的构造函数的prototype属性值</li><br><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>中去找。</li><br></ol><br><p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p><br><h3 id="articleHeader16">构造函数</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function Foo(name,age){    this.name = name;    this.age = age;}var foo = new Foo('h1',25);var foo2 = new Foo('h1',250);console.log(foo,foo2);//循环对象自身的属性var item;for( item in foo){    //只遍历对象自身的属性，过滤掉该对象的显式原型    if(foo.hasOwnProperty(item))    {        console.log(item)    }}" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">name,age</span>)</span>{<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.age = age;<br>}<br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> Foo(<span class="hljs-string">‘h1’</span>,<span class="hljs-number">25</span>);<br><span class="hljs-keyword">var</span> foo2 = <span class="hljs-keyword">new</span> Foo(<span class="hljs-string">‘h1’</span>,<span class="hljs-number">250</span>);<br><span class="hljs-built_in">console</span>.log(foo,foo2);<br><br><span class="hljs-comment">//循环对象自身的属性</span><br><span class="hljs-keyword">var</span> item;<br><span class="hljs-keyword">for</span>( item <span class="hljs-keyword">in</span> foo)<br>{<br>    <span class="hljs-comment">//只遍历对象自身的属性，过滤掉该对象的显式原型</span><br>    <span class="hljs-keyword">if</span>(foo.hasOwnProperty(item))<br>    {<br>        <span class="hljs-built_in">console</span>.log(item)<br>    }<br><br>}<br></code></pre><br><h3 id="articleHeader17">描述new一个对象的过程</h3><br><ol><br><li>创建一个对象</li><br><li>this指向这个新对象</li><br><li>执行代码，即对this赋值</li><br><li>return this。 默认有return，不用写</li><br></ol><br><h3 id="articleHeader18">如何判断一个变量是数组类型</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var arr = [1,2,3];console.log(Array.isArray(arr)); //true//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置console.log( arr instanceof Array) //true" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr)); <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span><br><span class="hljs-built_in">console</span>.log( arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) <span class="hljs-comment">//true</span></code></pre><br><h3 id="articleHeader19">写一个原型继承的例子</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function Elem(id){    this.dom = document.getElementById(id);}Elem.prototype.html = function(val){    var dom = this.dom;    if(val){        dom.innerHTML = val;        return this; //用来链式调用    }else{        return dom.innerHTML;    }}Elem.prototype.on = function(type ,fn){    var dom = this.dom;    dom.addEventListener( type , fn);}var h1 = new Elem('h1');h1.html(&quot;你被修改了&quot;).on('click', function(){    console.log(this)})" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Elem</span>(<span class="hljs-params">id</span>)</span>{<br>    <span class="hljs-keyword">this</span>.dom = <span class="hljs-built_in">document</span>.getElementById(id);<br>}<br><br>Elem.prototype.html = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)</span>{<br>    <span class="hljs-keyword">var</span> dom = <span class="hljs-keyword">this</span>.dom;<br>    <span class="hljs-keyword">if</span>(val){<br>        dom.innerHTML = val;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">//用来链式调用</span><br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">return</span> dom.innerHTML;<br><br>    }<br>}<br><br>Elem.prototype.on = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type ,fn</span>)</span>{<br>    <span class="hljs-keyword">var</span> dom = <span class="hljs-keyword">this</span>.dom;<br>    dom.addEventListener( type , fn);<br><br>}<br><span class="hljs-keyword">var</span> h1 = <span class="hljs-keyword">new</span> Elem(<span class="hljs-string">‘h1’</span>);<br>h1.html(<span class="hljs-string">“你被修改了”</span>).on(<span class="hljs-string">‘click’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)<br>})<br></code></pre><br><h1 id="articleHeader20">作用域和闭包</h1><br><h3 id="articleHeader21">什么叫作用域？</h3><br><p><code>作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域&lt;br&gt;全局作用域》函数作用域》内层函数的作用域&lt;br&gt;作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。&lt;br&gt;</code></p><br><h3 id="articleHeader22">变量提升的理解</h3><br><ul><br><li>变量定义</li><br><li>函数声明（注意和函数表达式的区别）</li><br><li>预解析</li><br></ul><br><h3 id="articleHeader23">this的使用场景</h3><br><p>注意：this要在执行时才能确认值，定义时无法确认</p><br><ul><br><li>作为构造函数执行</li><br><li>作为对象属性执行</li><br><li>作为普通函数执行</li><br><li>call apply bind</li><br></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function f1(name,age){    console.log(name,age)    console.log(this); //this为x对象 }f1.apply({x:'我是this'}, [&quot;seek&quot;,20]);f1.call({x:'我是this'}, &quot;seek&quot;,20);//使用bind改变this时，需用函数表达式var f1 = function (name,age){    console.log(name,age)    console.log(this); //this为x对象}.bind('我是被绑定的this')f1(&quot;seek&quot;,20)" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">name,age</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(name,age)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//this为x对象</span><br> }<br><br>f1.apply({<span class="hljs-attr">x</span>:<span class="hljs-string">‘我是this’</span>}, [<span class="hljs-string">“seek”</span>,<span class="hljs-number">20</span>]);<br>f1.call({<span class="hljs-attr">x</span>:<span class="hljs-string">‘我是this’</span>}, <span class="hljs-string">“seek”</span>,<span class="hljs-number">20</span>);<br><br><br><span class="hljs-comment">//使用bind改变this时，需用函数表达式</span><br><span class="hljs-keyword">var</span> f1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name,age</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(name,age)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//this为x对象</span><br>}.bind(<span class="hljs-string">‘我是被绑定的this’</span>)<br><br>f1(<span class="hljs-string">“seek”</span>,<span class="hljs-number">20</span>)<br></code></pre><br><h3 id="articleHeader24">闭包</h3><br><p><code>当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，&lt;br&gt;如果返回的这个函数在外部被执行，就产生了闭包。&lt;br&gt;表现形式：使函数外部能够调用函数内部定义的变量。</code></p><br><ul><li><br><p>闭包的使用场景</p><br><ol><br><li><br><p>函数作为返回值</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function fn(){    var a = 10;    return function(){        console.log(a); //a是自由变量，从父作用域开始找。    }}var f1 =  fn();var a = 20;f1(); //10" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//a是自由变量，从父作用域开始找。</span><br>    }<br>}<br><span class="hljs-keyword">var</span> f1 =  fn();<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br>f1(); <span class="hljs-comment">//10</span></code></pre><br></li><br><li><br><p>函数作为参数来传递</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="function fn(){    var a = 10;    return function(){        console.log(a);        }}var fn1 = fn();function fn2(fn){    var a =20;    fn();}fn2(fn1); //10" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(a);<br>        }<br>}<br><span class="hljs-keyword">var</span> fn1 = fn();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params">fn</span>)</span>{<br>    <span class="hljs-keyword">var</span> a =<span class="hljs-number">20</span>;<br>    fn();<br>}<br>fn2(fn1); <span class="hljs-comment">//10</span></code></pre><br></li><br></ol><br></li></ul><br><h3 id="articleHeader25">如何理解作用域？</h3><br><ul><br><li>自由变量</li><br><li>作用域链，即自由变量的查找</li><br><li>闭包的两个场景</li><br></ul><br><h3 id="articleHeader26">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var str,a;for( a=0; a<10;a++){    str = document.createElement(&quot;a&quot;);    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;    document.body.appendChild(str);    (function(a){        str.addEventListener(&quot;click&quot;,function(e){            e.preventDefault();            console.log(a)        })    })(a)}" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-keyword">var</span> str,a;<br><span class="hljs-keyword">for</span>( a=<span class="hljs-number">0</span>; a&lt;<span class="hljs-number">10</span>;a++){<br>    str = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">“a”</span>);<br>    str.innerHTML = a + <span class="hljs-string">“点我”</span> + <span class="hljs-string">“&lt;br/&gt;”</span>;<br><br>    <span class="hljs-built_in">document</span>.body.appendChild(str);<br><br>    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)</span>{<br>        str.addEventListener(<span class="hljs-string">“click”</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{<br>            e.preventDefault();<br>            <span class="hljs-built_in">console</span>.log(a)<br>        })<br>    })(a)<br>}</code></pre><br><h3 id="articleHeader27">什么叫异步,什么叫同步？</h3><br><p>同步是阻塞模式，异步是非阻塞模式。</p><br><ul><br><li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li><br><li>同步：必须等待操作做完，才返回结果.</li><br></ul><br><h3 id="articleHeader28">数组API</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var arr= [2,3,9,0];" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs scala"><code style="word-break: break-word; white-space: initial;"> <span class="hljs-keyword">var</span> arr= [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>];</code></pre><br><ul><li>forEach 遍历所有元素</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="  arr.forEach(function(item,index){        console.log(item) // 2390        console.log(index) //0123    })" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code>  arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(item) <span class="hljs-comment">// 2390</span><br>        <span class="hljs-built_in">console</span>.log(index) <span class="hljs-comment">//0123</span><br><br>    })</code></pre><br><ul><li>every 判断所有元素是否都符合条件</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="  var result = arr.every(function(item,index){        if(item < 4)        {          return true;        }    })  console.log(result); //false， 因为9并不小于4" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code>  <span class="hljs-keyword">var</span> result = arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>        <span class="hljs-keyword">if</span>(item &lt; <span class="hljs-number">4</span>)<br>        {<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        }<br>    })<br>  <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//false， 因为9并不小于4</span></code></pre><br><ul><li>some 判断是否有至少一个元素符合条件</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var result =  arr.some(function(item,index){        if(item < 4)        {          return true;        }      })console.log(result); //true 因为2,3,0小于4" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-keyword">var</span> result =  arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>        <span class="hljs-keyword">if</span>(item &lt; <span class="hljs-number">4</span>)<br>        {<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        }<br>      })<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//true 因为2,3,0小于4</span></code></pre><br><ul><li>sort 排序</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var result =  arr.sort(function(a,b){          // return a-b; //正序          return b-a; // 倒序        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐      })console.log(result); // &nbsp;[9, 3, 2, 0]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-keyword">var</span> result =  arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>{<br>          <span class="hljs-comment">// return a-b; //正序</span><br>          <span class="hljs-keyword">return</span> b-a; <span class="hljs-comment">// 倒序</span><br>        <span class="hljs-comment">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span><br><br>      })<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// &nbsp;[9, 3, 2, 0]</span></code></pre><br><ul><li>map 对元素重新组装，生成新数组</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="//map适用范围还是较广的，学会思考 var result =  arr.map(function(item,index){            return '<h1>' + item + '</h1>';      })console.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs lua"><code>//map适用范围还是较广的，学会思考<br> var result =  arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item,index)</span></span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">‘&lt;h1&gt;’</span> + item + <span class="hljs-string">‘&lt;/h1&gt;’</span>;<br>      })<br>console.<span class="hljs-built_in">log</span>(result);   //  [<span class="hljs-string">“&lt;h1&gt;2&lt;/h1&gt;”</span>, <span class="hljs-string">“&lt;h1&gt;3&lt;/h1&gt;”</span>, <span class="hljs-string">“&lt;h1&gt;9&lt;/h1&gt;”</span>, <span class="hljs-string">“&lt;h1&gt;0&lt;/h1&gt;”</span>]</code></pre><br><ul><li>filter 过滤符合条件的元素,较为常用</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var result =  arr.filter(function(item,index){            if(item >=3){              return true;            }      })console.log(result);   // [3, 9]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-keyword">var</span> result =  arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>            <span class="hljs-keyword">if</span>(item &gt;=<span class="hljs-number">3</span>){<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            }<br>      })<br><span class="hljs-built_in">console</span>.log(result);   <span class="hljs-comment">// [3, 9]</span></code></pre><br><h3 id="articleHeader29">获取 2019-03-23格式的日期</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="   function formatDate(dt) {        if (!dt) {            //如果不传参数，则默认为当前时间            dt = new Date();        }        var year = dt.getFullYear();        var month = dt.getMonth() + 1;        var day = dt.getDate();        if (month <= 10) {            month = '0' + month;        }        if (day <= 10) {            day = '0' + day;        }        return year + '-' + month + '-' + day;    }    var date = formatDate();    console.log(date); //2019-03-23" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatDate</span>(<span class="hljs-params">dt</span>) </span>{<br>        <span class="hljs-keyword">if</span> (!dt) {<br>            <span class="hljs-comment">//如果不传参数，则默认为当前时间</span><br>            dt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        }<br><br>        <span class="hljs-keyword">var</span> year = dt.getFullYear();<br>        <span class="hljs-keyword">var</span> month = dt.getMonth() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">var</span> day = dt.getDate();<br><br>        <span class="hljs-keyword">if</span> (month &lt;= <span class="hljs-number">10</span>) {<br>            month = <span class="hljs-string">‘0’</span> + month;<br>        }<br><br>        <span class="hljs-keyword">if</span> (day &lt;= <span class="hljs-number">10</span>) {<br>            day = <span class="hljs-string">‘0’</span> + day;<br>        }<br><br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">‘-‘</span> + month + <span class="hljs-string">‘-‘</span> + day;<br>    }<br><br>    <span class="hljs-keyword">var</span> date = formatDate();<br>    <span class="hljs-built_in">console</span>.log(date); <span class="hljs-comment">//2019-03-23</span><br></code></pre><br><h3 id="articleHeader30">获取随机数，要求长度一致的字符串格式</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var random = Math.random();    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况    random = random.slice(0,10)    console.log(random); //0.70728618  每次返回的只有10位数的字符串" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs lua"><code> var <span class="hljs-built_in">random</span> = Math.<span class="hljs-built_in">random</span>();<br>    <span class="hljs-built_in">random</span> = <span class="hljs-built_in">random</span> + <span class="hljs-string">‘0’</span>.<span class="hljs-keyword">repeat</span>(<span class="hljs-number">10</span>); //<span class="hljs-keyword">repeat</span> 重复<span class="hljs-number">10</span>个<span class="hljs-number">0</span>, 防止随机数出现少于<span class="hljs-number">10</span>位数的情况<br>    <span class="hljs-built_in">random</span> = <span class="hljs-built_in">random</span>.slice(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">random</span>); //<span class="hljs-number">0.70728618</span>  每次返回的只有<span class="hljs-number">10</span>位数的字符串</code></pre><br><h3 id="articleHeader31">写一个能遍历对象和数组的foreach函数</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="function foreach(info, fn){        //数组处理        if(info instanceof Array)        {          info.forEach(fn)        }else{           //对象处理           for( key in obj){              fn(key, obj[key])            }        }}//使用方法  var obj = {x: '我是x',y: '我是y'};   foreach(obj, function(key,value){    console.log(value); //我是x,我是y  })  var arr = [5,8,9];  foreach(arr, function(elem,index){    console.log(elem);//5,8,9  })" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foreach</span>(<span class="hljs-params">info, fn</span>)<br></span>{<br>        <span class="hljs-comment">//数组处理</span><br>        <span class="hljs-keyword">if</span>(info <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>)<br>        {<br>          info.forEach(fn)<br>        }<span class="hljs-keyword">else</span>{<br>           <span class="hljs-comment">//对象处理</span><br>           <span class="hljs-keyword">for</span>( key <span class="hljs-keyword">in</span> obj){<br>              fn(key, obj[key])<br>            }<br>        }<br><br>}<br><br><span class="hljs-comment">//使用方法</span><br>  <span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">x</span>: <span class="hljs-string">‘我是x’</span>,<span class="hljs-attr">y</span>: <span class="hljs-string">‘我是y’</span>};<br>   foreach(obj, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key,value</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(value); <span class="hljs-comment">//我是x,我是y</span><br>  })<br><br><br>  <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>  foreach(arr, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem,index</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(elem);<span class="hljs-comment">//5,8,9</span><br>  })<br></code></pre><br><h1 id="articleHeader32">Web_API</h1><br><h3 id="articleHeader33">编写一个通用的事件监听函数</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function bindEvent(elem,type,fn){           elem.addEventListener( type ,fn) } //使用方法 bindEvent(id,'click', function(e){    console.log(e) }) bindEvent(a,'click', function(e){    e.preventDefault(); //阻止默认事件 })" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bindEvent</span>(<span class="hljs-params">elem,type,fn</span>)</span>{<br>           elem.addEventListener( type ,fn)<br> }<br> <span class="hljs-comment">//使用方法</span><br> bindEvent(id,<span class="hljs-string">‘click’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(e)<br> })<br><br> bindEvent(a,<span class="hljs-string">‘click’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{<br>    e.preventDefault(); <span class="hljs-comment">//阻止默认事件</span><br> })</code></pre><br><h3 id="articleHeader34">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//使用代理，由父级帮忙去做<br><br> <div id="&quot;div1&quot;"><br>    <a href="&quot;#&quot;">a1</a><br>    <a href="&quot;#&quot;">a2</a><br>    <span>ddd</span><br>    <a href="&quot;#&quot;">a5</a><br>    <!-- 动态加载更多 --><br></div><p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == &quot;A&quot;){<br>        alert(e.target.innerHTML)<br>    }<br>})” title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class="hljs xml"><code>//使用代理，由父级帮忙去做<p></p><p> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">“div1”</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“#”</span>&gt;</span>a1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“#”</span>&gt;</span>a2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>ddd<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“#”</span>&gt;</span>a5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!– 动态加载更多 –&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></p><p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == “A”){<br>        alert(e.target.innerHTML)<br>    }<br>})</p></code></pre><p></p><p></p><h3 id="articleHeader35">完善通用绑定事件的函数，包括代理</h3><p></p><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//HTML结构<br> <div id="&quot;div1&quot;"><br>    <a href="&quot;#&quot;">a1</a><br>    <a href="&quot;#&quot;">a2</a><br>    <span>ddd</span><br>    <a href="&quot;#&quot;">a5</a><br>    <!-- 动态加载更多 --><br></div><div id="&quot;div2&quot;">不使用代理</div><p>//<br>function bindEvent(elem,type,selector, fn){<br>    if(fn == null){<br>        fn=selector;<br>        selector =null;<br>    }<br>    elem.addEventListener( type ,function(e){<br>        var target;<br>        if(selector){<br>            target = e.target;<br>            //matches() 方法用于检测字符串是否匹配给定的正则表达式。<br>            if(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }else{<br>            fn.call(e);<br>        }<br>    })<br>}</p><p>//使用代理<br>bindEvent(div1,’click’,’a’,function(e){<br>    console.log(this)<br>})<br>//不使用代理<br>bindEvent(div2,’click’,function(e){<br>    //call改变了this指向为e<br>    console.log(this.toElement.innerHTML)<br>})<br>“ title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class="hljs actionscript"><code><span class="hljs-comment">//HTML结构</span><br> &lt;div id=<span class="hljs-string">“div1”</span>&gt;<br>    &lt;a href=<span class="hljs-string">“#”</span>&gt;a1&lt;/a&gt;<br>    &lt;a href=<span class="hljs-string">“#”</span>&gt;a2&lt;/a&gt;<br>    &lt;span&gt;ddd&lt;/span&gt;<br>    &lt;a href=<span class="hljs-string">“#”</span>&gt;a5&lt;/a&gt;<br>    &lt;!– 动态加载更多 –&gt;<br>&lt;/div&gt;<p></p><p>&lt;div id=<span class="hljs-string">“div2”</span>&gt;不使用代理&lt;/div&gt;</p><p><span class="hljs-comment">//</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bindEvent</span><span class="hljs-params">(elem,type,selector, fn)</span></span>{<br>    <span class="hljs-keyword">if</span>(fn == <span class="hljs-literal">null</span>){<br>        fn=selector;<br>        selector =<span class="hljs-literal">null</span>;<br>    }<br>    elem.addEventListener( type ,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span>{<br>        <span class="hljs-keyword">var</span> target;<br>        <span class="hljs-keyword">if</span>(selector){<br>            target = e.target;<br>            <span class="hljs-comment">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span><br>            <span class="hljs-keyword">if</span>(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }<span class="hljs-keyword">else</span>{<br>            fn.call(e);<br>        }<br>    })<br>}</p><p><span class="hljs-comment">//使用代理</span><br>bindEvent(div1,<span class="hljs-string">‘click’</span>,<span class="hljs-string">‘a’</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span>{<br>    console.log(<span class="hljs-keyword">this</span>)<br>})<br><span class="hljs-comment">//不使用代理</span><br>bindEvent(div2,<span class="hljs-string">‘click’</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span>{<br>    <span class="hljs-comment">//call改变了this指向为e</span><br>    console.log(<span class="hljs-keyword">this</span>.toElement.innerHTML)<br>})<br></p></code></pre><p></p><p></p><h3 id="articleHeader36">可以跨域的三个标签</h3><p></p><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN<script></script> // 使用JSONP" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs xml"><code><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">“”</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">“”</span>&gt;</span> //用于打点统计<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">“stylesheet”</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“”</span>&gt;</span> //使用CDN<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> // 使用JSONP</code></pre><br><h1 id="articleHeader37">3月10日面试</h1><br><h3 id="articleHeader38">闭包的优缺点</h3><br><p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p><br><ul><br><li><br><p>优点：</p><br><ol><br><li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li><br><li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li><br></ol><br></li><br><li><br><p>缺点</p><br><ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol><br></li><br></ul><br><h3 id="articleHeader39">按需引入，模块引入的实现？</h3><br><h3 id="articleHeader40">http请求缓存头详解</h3><br><ol><br><li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li><br><li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li><br><li><br><p>Cache-Control: http1.1推出，指文件缓存的有效期。</p><br><ul><br><li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li><br><li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li><br><li>private:仅单用户私有，不被多用户共享</li><br><li>no-cache:不会被缓存。</li><br><li>no-store:不允许被存储</li><br></ul><br></li><br><li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li><br></ol><br><br></div><p>尊重原著:文章转载于@<a href="https://segmentfault.com/a/1190000018628100" target="_blank" rel="noopener">史燕斌</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA、 JetBrains、webstorm、 pycharm 破解教程</title>
      <link href="/2020/05/13/coding-20190329/"/>
      <url>/2020/05/13/coding-20190329/</url>
      
        <content type="html"><![CDATA[<p>@<a href="IDEA、 JetBrains、webstorm、 pycharm 破解教程">TOC</a></p><h3 id="第一步-下载IDEA-2018年2月前版本"><a href="#第一步-下载IDEA-2018年2月前版本" class="headerlink" title="第一步 下载IDEA 2018年2月前版本"></a>第一步 <a href="https://www.jetbrains.com/" target="_blank" rel="noopener">下载IDEA 2018年2月前版本</a></h3><p>)<br>       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用</p><h3 id="第二步-打开破解包网址-下图所示-点击下载"><a href="#第二步-打开破解包网址-下图所示-点击下载" class="headerlink" title="第二步 打开破解包网址 下图所示 点击下载"></a>第二步 打开<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">破解包网址</a> 下图所示 点击下载</h3><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>点击下载</p><h3 id="第三步-把下载好的jar包放到IDEA安装目录的-bin里面"><a href="#第三步-把下载好的jar包放到IDEA安装目录的-bin里面" class="headerlink" title="第三步 把下载好的jar包放到IDEA安装目录的/bin里面"></a>第三步 把下载好的jar包放到IDEA安装目录的/bin里面</h3><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\Downloads\Tool\idea\ideaIU-2018.3.3\bin\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p><h3 id="最后打开IDEA"><a href="#最后打开IDEA" class="headerlink" title="最后打开IDEA"></a>最后打开IDEA</h3><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\Downloads\Tool\idea\ideaIU-2018.3.3\bin\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p><p>则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！</p><p>如果破解失败<br>则把下面这串编码替换掉第四步的编码</p><pre class=" language-txt"><code class="language-txt">BIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础数组Array的一些特性及方法</title>
      <link href="/2020/05/13/coding-20190629/"/>
      <url>/2020/05/13/coding-20190629/</url>
      
        <content type="html"><![CDATA[<p>@<a href="js基础数组Array的一些特性及方法">toc</a></p><blockquote><p>前言: 工作业务数据乱，数据转换用得繁，对接交流竟无语，全靠数组方法换；</p></blockquote><h2 id="数据的了解"><a href="#数据的了解" class="headerlink" title="数据的了解"></a>数据的了解</h2><h3 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h3><ul><li>在js基础中，我都们知道数据类型有两大类:原始类型(基本类型)、引用类型</li></ul><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>js有5 种原始类型，即 Undefined、Null、Boolean、Number 和 String。其中Undefined和Null也称作<strong>特殊类型</strong></p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'1'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// string</span></code></pre><p><strong>总结</strong>:基本类型，笔者就不作过多介绍具体详情可以查阅<a href="http://www.w3school.com.cn/js/pro_js_primitivetypes.asp" target="_blank" rel="noopener">w3school</a>，这里解释一下为何typeof null得出来的是object类型而不是null，因为null是一个只有一个值的特殊类型，它被认为是对象的占位符，表示一个空对象引用。</p><ul><li>在js中null == undefined 得到是真(true)，尽管这两个值相等，但它们的含义不同。 undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象（在讨论 typeof 运算符时，简单地介绍过这一点）。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。</li></ul><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>js中 基本类型的值基本是不可变的，但引用类型的值是动态可变的；基本类型的变量是存放在栈内存中，而引用类型的值是同时保存在栈内存和堆内存中的对象；</p><ul><li>引用类型一般指的是对象和方法;</li><li>引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址</li></ul><p><strong>举例说明:</strong></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">;</span>  arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr1<span class="token punctuation">)</span></code></pre><p>如上代码：按照我们常规的想法是 arr =  [1,2,3,4,5,6]，arr1 = [1,2,3,4,5,6,1]的；</p><p>但实际输出如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-d32a6fa877fa7dfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实际输出"></p><p>解释: 上面对引用类型的定义<strong>引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址</strong>有讲到指针的这个词，实际上上面代码的操作 let arr1 = arr;并不是把arr重新拷贝了一份给arr1,而是把arr存储在堆内存的存储地址给了arr1, 对arr1的修改，会对该地址指向的堆内存的数据进行修改，而arr和arr1指向堆内存的地址是相同的，所以打印结果一致；并且都改变了；</p><p>上述换成Object对象依然是一致的，不相信的同学可以私下试试~</p><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><p>从<a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">w3school</a>中我们可以知道数组有许多的方法，并且有些是我们经常用到且混淆不清的，接下来我们将对数组的方法进行详解；</p><h3 id="1-Array-concat"><a href="#1-Array-concat" class="headerlink" title="1. Array.concat()"></a>1. Array.concat()</h3><p>Array.concat() 的作用是连接两个或更多的数组，并返回结果。<br>使用</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>    <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>    <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>     <span class="token keyword">let</span> arrAll <span class="token operator">=</span>  arrNum<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrAll<span class="token punctuation">)</span></code></pre><p>输出结果如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-7e9d6ba651065b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.concat()"></p><p>此时因为concat()返回的是一个新的实例对象，对原数组操作(arrNum、arrStr)并不会影响到arrAll的值变化，<strong>但假如对arrObj进行改变,由于arrObj里面的对象属于引用类型，arrAll相应的值的地址指针依然是同一个堆内存，假如对arrObj进行改变，arrAll也会相应改变；而arrNum、arrStr里面的值是基本类型，则不影响</strong>；</p><h3 id="2-Array-join"><a href="#2-Array-join" class="headerlink" title="2. Array.join()"></a>2. Array.join()</h3><p>Array.join() 把数组的所有元素放入一个字符串并返回。元素通过指定的分隔符进行分隔。</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-c7c1b9eaa1684919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.join()"></p><ul><li>返回的字符串均没问题，但假如数组里面是object，则返回[object Object] 字符串；</li></ul><h3 id="3-Array-pop"><a href="#3-Array-pop" class="headerlink" title="3. Array.pop()"></a>3. Array.pop()</h3><p>Array.pop() 向数组的末尾添加一个或更多元素，并返回新的长度。<strong>注意！！！文档上没写明会改变原数组; 但实际上会改变</strong></p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">,</span>arrArr<span class="token punctuation">)</span></code></pre><p>输出结果:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-e1f62d561c5f05cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.pop()"></p><h3 id="4-Array-push"><a href="#4-Array-push" class="headerlink" title="4. Array.push()"></a>4. Array.push()</h3><p> Array.push() 向数组的末尾添加一个或更多元素，并返回新的长度。</p><p>本来觉得<strong>用的最多，不想作介绍了</strong>但为了加以证明引用类型引用是的存储地址，修改原数组会导致引用相应地址的值也改变；<br>代码如下:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>  arrAll <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrAll<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrAll<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrAll<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrAll<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'改变前==='</span><span class="token punctuation">,</span>arrAll<span class="token punctuation">)</span>  arrNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span>  arrStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span>  arrObj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span>  arrArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'改变后==='</span><span class="token punctuation">,</span>arrAll<span class="token punctuation">)</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-a30f2def5468e0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.push()"></p><p>总结:再次证明引用类型的特点；</p><h3 id="5-Array-reverse"><a href="#5-Array-reverse" class="headerlink" title="5. Array.reverse()"></a>5. Array.reverse()</h3><p>Array.reverse() 颠倒数组中元素的顺序。</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>常规使用，毫无问题<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-4ab849432cb505fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.reverse() "></p><h3 id="6-Array-shift"><a href="#6-Array-shift" class="headerlink" title="6. Array.shift()"></a>6. Array.shift()</h3><p> Array.shift() 删除并返回数组的第一个元素,具体表现和上面的 3. Array.pop() 完全类似，同样会改变原数组，不作过多介绍；</p><h3 id="7-Array-unshift"><a href="#7-Array-unshift" class="headerlink" title="7. Array.unshift()"></a>7. Array.unshift()</h3><p>Array.unshift()向数组的开头添加一个或更多元素，并返回新的长度。</p><p>用法:</p><pre class=" language-javascript"><code class="language-javascript">arrayObject<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span>val2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">,</span>valn<span class="token punctuation">)</span></code></pre><p>参数解释:</p><ul><li>val1 必需。向数组添加的第一个元素。</li><li>val2 可选。向数组添加的第二个元素。</li><li>valn 可选。向数组添加的第n个元素。</li></ul><p><strong>注意</strong>：unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。并且 <strong>unshift() 方法不创建新的创建，而是直接修改原有的数组。</strong><br>使用如下:</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>    <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>    <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">,</span>arrStr<span class="token punctuation">,</span>arrObj<span class="token punctuation">,</span>arrArr<span class="token punctuation">)</span></code></pre><p>输出:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-b32872e6a9c00302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.unshift()"></p><h3 id="8-Array-slice"><a href="#8-Array-slice" class="headerlink" title="8. Array.slice()"></a>8. Array.slice()</h3><p>Array.slice() 方法可从已有的数组中返回选定的元素。</p><p>用法:</p><pre class=" language-javascript"><code class="language-javascript">arrayObject<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span></code></pre><p>参数解释:</p><ul><li><strong>start</strong> ： 必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</li><li><strong>end</strong> ： 可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li><li><strong>返回值</strong> ：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。<br>使用<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span><span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">,</span>arrStr<span class="token punctuation">,</span>arrObj<span class="token punctuation">,</span>arrArr<span class="token punctuation">)</span></code></pre>输出如下：<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-d1d7ebaf8674671f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.slice()"></li></ul><p><strong>注意:</strong> 该方法并不会修改原数组，而是返回一个子数组</p><h3 id="9-Array-splice"><a href="#9-Array-splice" class="headerlink" title="9. Array.splice()"></a>9. Array.splice()</h3><p>Array.splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。</p><p>用法：</p><pre class=" language-javascript"><code class="language-javascript">arrayObject<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>delLong<span class="token punctuation">,</span>item1<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>itemN<span class="token punctuation">)</span></code></pre><p>参数解释:</p><ul><li><strong>index</strong> ： 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li><li><strong>delLong</strong> ：必需。要删除的项目数量。如果设置为 0，则不会删除项目。</li><li><strong>item1, …, itemN</strong> ：可选。向数组添加的新项目。</li></ul><p><strong>注意：</strong> splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。</p><p>如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。</p><p>使用:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'10000'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">,</span>arrStr<span class="token punctuation">,</span>arrObj<span class="token punctuation">,</span>arrArr<span class="token punctuation">)</span></code></pre><p>结果如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-eaa4505b10375907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>注意:</strong> 该方法会修改原数组，而是返回一个子数组。如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。如果未删除，则返回空数组；</p><p>总结: slice()和splice()容易混淆，不过这样记就好:<strong>单词长的参数也长，参数长的功能大，可加可减可改变</strong></p><h3 id="9-Array-sort"><a href="#9-Array-sort" class="headerlink" title="9. Array.sort()"></a>9. Array.sort()</h3><p>Array.sort() 方法用于对数组的元素进行排序。</p><p>用法：</p><pre class=" language-javascript"><code class="language-javascript">arrayObject<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortby<span class="token punctuation">)</span></code></pre><p>参数解释:</p><ul><li><strong>sortby</strong> ： 可选。规定排序顺序。必须是函数。</li></ul><p>使用:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span>    arrNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token keyword">let</span>    arrArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrObj<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNum<span class="token punctuation">,</span>arrStr<span class="token punctuation">,</span>arrObj<span class="token punctuation">,</span>arrArr<span class="token punctuation">)</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果如下：<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-3eba223c168616ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Array.sort()"></p><p><strong>总结</strong>：实际上上面代码写的方法就是sort()默认的方法；方法可以自定义；</p><h3 id="最后数组方法的扩展"><a href="#最后数组方法的扩展" class="headerlink" title="最后数组方法的扩展"></a>最后数组方法的扩展</h3><p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p><ol><li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li><li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li></ol><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span>array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array）<span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// item:当前元素的值；</span>                 <span class="token comment" spellcheck="true">// index:当前元素的索引；</span>                 <span class="token comment" spellcheck="true">// array:当前元素的数组对象；</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//es6</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 所有都满足才会返回true,否则返回false;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[10,20,30,40,50,22,26]</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es5</span><span class="token comment" spellcheck="true">// let result = age.every(function(item,index,array){</span><span class="token comment" spellcheck="true">//     return item > 22;</span><span class="token comment" spellcheck="true">//     })</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span>array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array）<span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// item:当前元素的值；</span>                 <span class="token comment" spellcheck="true">// index:当前元素的索引；</span>                 <span class="token comment" spellcheck="true">// array:当前元素的数组对象；</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子:"></a>例子:</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//es6</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 所有都满足才会返回true,否则返回false;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10 20 30</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 1 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[10,20,30,40,50,22,26]</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es5</span><span class="token comment" spellcheck="true">// let result = age.some(function(item,index,array){</span><span class="token comment" spellcheck="true">//     return item > 22;</span><span class="token comment" spellcheck="true">//     })</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><blockquote><p>以上就是js基础中 数组常用的方法，特别要注意的是splice和slice容易混淆，其他的话，用过几次就基本没有问题了，此次代码已经上传到github，有兴趣可以去下载实现一波喔@<a href="https://github.com/wLove-c/JavaScript-demo" target="_blank" rel="noopener">王一诺wLove-c/JavaScript-demo</a>，如果对你有帮助，请点个赞吧；</p></blockquote><blockquote><p>更多内容请转作者博客@<a href="https://wlove-c.github.io/" target="_blank" rel="noopener">王一诺的博客</a>，多多交流~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack4.0+加vue2.0+从零开始搭设vue项目</title>
      <link href="/2020/05/13/coding-20190612/"/>
      <url>/2020/05/13/coding-20190612/</url>
      
        <content type="html"><![CDATA[<p>@<a href="webpack4+加vue2+从零开始搭设vue项目">TOC</a></p><p>本地环境</p><blockquote><p>node -v    // v9.1.0<br>npm -v  // 6.5.0<br>webpack -v   // 4.32.2<br>webpack-cli -v // 3.3.2</p></blockquote><p><em>这里需要注意的是webpack4+以后需要单独安装webpack-cli</em></p><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><h4 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1.初始化项目"></a>1.初始化项目</h4><pre><code>npm init</code></pre><p>一直enter生成package.json文件（小技巧:npm init -y 可以免去繁琐的enter）</p><h4 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h4><pre><code>npm i webpack webpack-cli webpack-dev-server --save-dev</code></pre><blockquote><p>想要深入上述依赖请转<a href="https://webpack.js.org/configuration" target="_blank" rel="noopener">webpack文档</a></p></blockquote><p>依赖安装成功接下来就开始动手吧</p><h4 id="3-目录文件配置"><a href="#3-目录文件配置" class="headerlink" title="3.目录文件配置"></a>3.目录文件配置</h4><p>根目录鼠标右键新建index.html    webpack.config.js  src文件夹或：</p><pre><code>// windowtype &gt;webpcak.config.jstype &gt;index.htmlmd src//mac 土豪玩家touch webpcak.config.jstouch index.htmlmkdir src</code></pre><p>src目录下面新建 main.js</p><p>此时目录如下</p><pre><code>project/        src/            main.js        webpack.config.js        index.html        package.json</code></pre><p>内容如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//index.html</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>webpack从零搭设<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>modul<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="4-配置index-html及webpack-config-js"><a href="#4-配置index-html及webpack-config-js" class="headerlink" title="4.配置index.html及webpack.config.js"></a>4.配置index.html及webpack.config.js</h4><p>首先<br>main.js修改如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/main.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>webpack.config.js修改如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// module.exports commonjs规范</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目入口文件，webpack将从main.js开始，把所有依赖的js都打包</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目的打包后的输出路径 可修改</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/dist/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 通过devServer访问路径 可修改</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span> <span class="token comment" spellcheck="true">// 打包后的文件名 可修改</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// When using the HTML5 History API, the `index.html` page will likely have to be served in place of any `404` responses</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>index.html 修改如下 <em>增加引入打包后的js</em></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.html</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>webpack从零搭设<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/dist/build.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>package.json修改如下：</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --hot"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --progress --hide-modules"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><blockquote><p>webpack-dev-server会启动一个静态资源web服务器 –hot参数表示启动热更新</p></blockquote><p>重新启动服务</p><pre><code>npm run dev</code></pre><p>打开控制台可以看到 有输出hello world<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-436a3617acf0b57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台输出hello world"></p><h4 id="5-vue的起步"><a href="#5-vue的起步" class="headerlink" title="5.vue的起步"></a>5.vue的起步</h4><p>安装vue</p><pre class=" language-javascript"><code class="language-javascript">npm install vue <span class="token operator">--</span>save</code></pre><p>修改main.js如下</p><pre><code>// src/main.jsimport Vue from &#39;vue&#39;;// import Vue from &#39;vue/dist/vue.esm.js&#39;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build// console.log(&#39;hello world&#39;);var app = new Vue({  el: &#39;#app&#39;,  data: {    mess: &#39;Hello Vue@2.0!&#39;  }})</code></pre><p>此时 修改index.html如下:</p><pre class=" language-JavaScript"><code class="language-JavaScript">// index.html<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>webpack从零搭设</title></head><body><div id="app">    {{ mess }}</div></body><script src="/dist/build.js"></script></html></code></pre><p>重新启动服务</p><pre class=" language-JavaScript"><code class="language-JavaScript">npm run buildnpm run dev</code></pre><p>此时<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-d32d4812803e8fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台报错，页面也未显示hello Vue！"></p><p>查阅资料发现:<br><strong>vue有两种形式的代码 compiler（模板）模式和runtime模式（运行）<br>vue模块的package.json的main字段默认为runtime模式， 指向”dist/vue.runtime.common.js”位置。这是vue升级到2.0之后就有的特点。</strong></p><p>但此时我们main.js的写法是</p><pre><code>// src/main.jsimport Vue from &#39;vue&#39;;// import Vue from &#39;vue/dist/vue.esm.js&#39;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build// console.log(&#39;hello world&#39;);var app = new Vue({  el: &#39;#app&#39;,  data: {    mess: &#39;Hello Vue@2.0!&#39;  }})</code></pre><h5 id="解决方案-一"><a href="#解决方案-一" class="headerlink" title="解决方案 一"></a>解决方案 一</h5><pre><code>// src/main.js//import Vue from &#39;vue&#39;; import Vue from &#39;vue/dist/vue.esm.js&#39;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build// console.log(&#39;hello world&#39;);var app = new Vue({  el: &#39;#app&#39;,  data: {    mess: &#39;Hello Vue@2.0!&#39;  }})</code></pre><p>因为vue2.0默认的是runtime模式，需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript代码；</p><h5 id="解决方案-二-常规操作"><a href="#解决方案-二-常规操作" class="headerlink" title="解决方案 二(常规操作)"></a>解决方案 二(常规操作)</h5><pre><code>// webpack.config.jsconst path = require(&#39;path&#39;);const webpack = require(&#39;webpack&#39;);module.exports = {  //module.exports commonjs规范  entry: &#39;./src/main.js&#39;, // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包  output: {    path: path.resolve(__dirname, &#39;./dist&#39;), // 项目的打包文件路径    publicPath: &#39;/dist/&#39;, // 通过devServer访问路径    filename: &#39;build.js&#39; // 打包后的文件名  },  devServer: {    historyApiFallback: true,    overlay: true  },  resolve: { // 修改别名，import Vue from ‘vue’ 这行代码被解析为 import Vue from ‘vue/dist/vue.esm.js    alias: {      &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;    }  },};</code></pre><blockquote><p>这个修改和上次是一样的意思，不过相对雅观很多…</p></blockquote><h4 id="解决方案-三"><a href="#解决方案-三" class="headerlink" title="解决方案 三"></a>解决方案 三</h4><p>修改main.js的模式</p><ol><li>compiler 模式<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/main.js</span><span class="token comment" spellcheck="true">// compiler 模式</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>2.runtime 模式<pre><code>//runtime模式new Vue({render: h =&gt; h(App)  // App.vue}).$mount(&quot;#app&quot;)</code></pre>将1换成2，但我们推荐使用方案二；</li></ol><p>最后 页面展示如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-4470400cac4db5f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hello Vue@2.0"></p><h3 id="引入css和scss"><a href="#引入css和scss" class="headerlink" title="引入css和scss"></a>引入css和scss</h3><blockquote><p><strong>webpack默认支持的是js的模块化，如果需要其他类型文件也支持模块化开发，则需要引入相应的loader用以解析!</strong></p></blockquote><p>安装相关依赖</p><pre class=" language-javascript"><code class="language-javascript">npm i node<span class="token operator">-</span>sass css<span class="token operator">-</span>loader vue<span class="token operator">-</span>style<span class="token operator">-</span>loader sass<span class="token operator">-</span>loader <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre><p> webpack.config.js 修改如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//module.exports commonjs规范</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目的打包文件路径</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/dist/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 通过devServer访问路径</span>    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span> <span class="token comment" spellcheck="true">// 打包后的文件名</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   module<span class="token punctuation">:</span> <span class="token punctuation">{</span>     rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">{</span>         test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>         use<span class="token punctuation">:</span> <span class="token punctuation">[</span>           <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>           <span class="token string">'css-loader'</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// scss</span>         test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>         use<span class="token punctuation">:</span> <span class="token punctuation">[</span>           <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>           <span class="token string">'css-loader'</span><span class="token punctuation">,</span>           <span class="token string">'sass-loader'</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span>     <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>此时scss 及 css都能在开发中使用并且模块化引入了</p><h3 id="语法转译-ES6-gt-ES5"><a href="#语法转译-ES6-gt-ES5" class="headerlink" title="语法转译 ES6 =&gt; ES5"></a>语法转译 ES6 =&gt; ES5</h3><p>引入相关依赖 利用bable转译</p><pre class=" language-javascript"><code class="language-javascript">npm i babel<span class="token operator">-</span>core babel<span class="token operator">-</span>loader babel<span class="token operator">-</span>preset<span class="token operator">-</span>env babel<span class="token operator">-</span>preset<span class="token operator">-</span>stage<span class="token number">-3</span> <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre><p><strong>其中  babel-preset-stage是不同阶段语法提案的转码规则（共有4个阶段），选装一个,其中0最厉害</strong></p><blockquote><p>npm install –save-dev babel-preset-stage-0<br>npm install –save-dev babel-preset-stage-1<br>npm install –save-dev babel-preset-stage-2<br>npm install –save-dev babel-preset-stage-3<br><code>`</code><br>// .babelrc<br>{<br>  “presets”: [<br>    [“env”, { “modules”: false }],<br>    “stage-3”<br>  ]<br>}</p></blockquote><pre><code>同时修改 webpack.config.js```javascript// webpack.config.jsconst path = require(&#39;path&#39;);const webpack = require(&#39;webpack&#39;);module.exports = {  //module.exports commonjs规范  entry: &#39;./src/main.js&#39;, // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包  output: {    path: path.resolve(__dirname, &#39;./dist&#39;), // 项目的打包文件路径    publicPath: &#39;/dist/&#39;, // 通过devServer访问路径    filename: &#39;build.js&#39; // 打包后的文件名  },  devServer: {    historyApiFallback: true,    overlay: true  },  resolve: {    alias: {      &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;    }  },   module: {     rules: [       {         test: /\.css$/,         use: [           &#39;vue-style-loader&#39;,           &#39;css-loader&#39;         ],       },       { // scss         test: /\.scss$/,         use: [           &#39;vue-style-loader&#39;,           &#39;css-loader&#39;,           &#39;sass-loader&#39;         ],       },       { // 添加解析js的loader         test: /\.js$/,         loader: &#39;babel-loader&#39;,         exclude: /node_modules/       }     ]   }};</code></pre><p>此时我们修改main.js尝试使用es6语法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span><span class="token comment" spellcheck="true">// console.log('hello world');</span><span class="token keyword">const</span> say <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'I am es6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    mess<span class="token punctuation">:</span> <span class="token string">'Hello Vue@2.0!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mess <span class="token operator">=</span> res<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>此时页面输出效果如下<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-b3232207a960b915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="I am es6"><br>虽然满足我们使用了，那么接下来我们尝试一下ES7支持与否<br>main.js修改如下:</p><pre class=" language-JavaScript"><code class="language-JavaScript">import Vue from 'vue';// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build// console.log('hello world');const say = function () {  return new Promise((resolve, reject) => {    resolve('I am es7');  })}var app = new Vue({  el: '#app',  data: {    mess: 'Hello Vue@2.0!'  },  methods: {    /*updateData() {      say().then((res)=>{        this.mess = res;      });    },*/    async updateData() {      const mess = await say();      this.mess = mess;    }  },  created() {    this.updateData();  }})</code></pre><p>页面展示如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-b1ef12f2c2f7effb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ES7测试"><br>此时看到控制台报错</p><blockquote><p>“ReferenceError: regeneratorRuntime is not defined”</p></blockquote><p>查阅相关文章发现， 要想对es7语法进行支持，还需要安装相关依赖进行转译；</p><h5 id="这里有两种方案"><a href="#这里有两种方案" class="headerlink" title="这里有两种方案"></a>这里有两种方案</h5><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">--</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime</code></pre><p>修改.babelrc文件</p><pre><code>// .babelrc{    &quot;presets&quot;: [        [&quot;env&quot;, { &quot;modules&quot;: false }],        &quot;stage-3&quot;    ],    &quot;plugins&quot;: [[  //  参考 https://www.jianshu.com/p/7a7f7abcddb5        &quot;transform-runtime&quot;,        {            &quot;helpers&quot;: false,            &quot;polyfill&quot;: false,            &quot;regenerator&quot;: true,            &quot;moduleName&quot;: &quot;babel-runtime&quot;        }    ]]}</code></pre><p>这里顺带解释一下preset与babel的关系:</p><ul><li>preset中已经包含了一组用来转换ES6+的语法的插件,如果只使用少数新特性而非大多数新特性,可以不使用preset而只使用对应的转换插件</li><li>babel默认只转换语法,而不转换新的API,如需使用新的API,还需要使用对应的转换插件或者polyfill<blockquote><p>例如，默认情况下babel可以将箭头函数，class等语法转换为ES5兼容的形式，但是却不能转换Map，Set，Promise等新的全局对象，这时候就需要使用polyfill去模拟这些新特性</p></blockquote></li></ul><p>此时看到页面输出正常:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-0bd3c3d1769d22ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ES7正常"></p><h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>全局babel-polyfill</p><pre><code>npm i babel-polyfill --save-dev</code></pre><p> webpack.config.js修改如下 <strong>注意看注释</strong></p><pre class=" language-JavaScript"><code class="language-JavaScript">// webpack.config.js  // entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包  entry: ['babel-polyfill', './src/main.js'], // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包 参考 https://www.jianshu.com/p/3b27dfc6785c</code></pre><p>此时重新跑项目npm run dev 结果方案一</p><blockquote><p>es6与es7转译部分参考文章<br><a href="https://www.jianshu.com/p/3b27dfc6785c" target="_blank" rel="noopener">babel-polyfill的几种使用方式</a><a href="https://www.jianshu.com/p/7a7f7abcddb5" target="_blank" rel="noopener">babel的使用</a></p></blockquote><h3 id="文章最后"><a href="#文章最后" class="headerlink" title="文章最后"></a>文章最后</h3><blockquote><p>项目搭建，缺啥补啥！！ 项目完整地址查看@王一诺<a href="[https://github.com/wLove-c/webpack4-vue2](https://github.com/wLove-c/webpack4-vue2">wlove_c/webpack4.0+vue2.0</a><br>)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现超出几行省略并...</title>
      <link href="/2020/05/13/coding-20190916/"/>
      <url>/2020/05/13/coding-20190916/</url>
      
        <content type="html"><![CDATA[<p>@<a href="css实现超出几行省略并...">TOC</a></p><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/9/16/16d38ce4d49c371b?w=7157&amp;h=1717&amp;f=jpeg&amp;s=510219" alt="杀生丸"></p><ul><li><p>单行</p><pre class=" language-css"><code class="language-css"><span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span> // 超出的文本隐藏<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span> // 溢出用省略号显示<span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span> // 溢出不换行</code></pre></li><li><p>两行或多行</p><pre class=" language-css"><code class="language-css"><span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span> // 超出的文本隐藏<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span> // 将对象作为弹性伸缩盒子模型显示。<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span>  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）<span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span> // 结合上面两个属性，表示显示的行数。</code></pre><blockquote><p>如果用上了autoprefixer的话，由于它自动补全css前缀，或者删除过时的前缀，导致-webkit-box-orient:vertical; 失效；这时候需要改成如下；</p></blockquote></li></ul><pre class=" language-css"><code class="language-css"><span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span> // 超出的文本隐藏<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span> // 将对象作为弹性伸缩盒子模型显示。 <span class="token comment" spellcheck="true">/* autoprefixer: off */</span> <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span>  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）<span class="token comment" spellcheck="true">/* autoprefixer: on */</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span> // 结合上面两个属性，表示显示的行数。</code></pre><blockquote><p> 如果用上了autoprefixer的话，也可以在使用autoprefixer的时候进行配置如下:</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token function">postcss</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> remove<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭autoprefixer的删除前缀功能；</span></code></pre><p>更多关于的配置请转<a href="https://www.npmjs.com/package/autoprefixer" target="_blank" rel="noopener">autoprefixer</a></p><p>作者博客:<a href="https://wlove-c.github.io/" target="_blank" rel="noopener">Eno</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue前端代码规范</title>
      <link href="/2020/05/13/coding-3/"/>
      <url>/2020/05/13/coding-3/</url>
      
        <content type="html"><![CDATA[<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p><section class="post-content"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── build<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js通过开始时间和结束时间计算出中间的所有日期</title>
      <link href="/2020/05/13/coding-20190614/"/>
      <url>/2020/05/13/coding-20190614/</url>
      
        <content type="html"><![CDATA[<p>@<a href="js通过开始时间和结束时间计算出中间的所有日期">TOC</a></p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><strong>实际开发过程中，我们有许许多多的产品都设计到了时间，也有时候需要自己转化时间格式，这里推荐一个日期时间处理类库<a href="http://momentjs.cn/" target="_blank" rel="noopener">momentjs</a>，但很多时候，我们仅仅是转化个别时间，还没必要安装这么一个依赖；这篇文章将在未来持续更新，搜罗各种关于时间转化的方法</strong></p><hr><h3 id="一-已知开始时间和结束时间-计算出中间的所有日期"><a href="#一-已知开始时间和结束时间-计算出中间的所有日期" class="headerlink" title="一 已知开始时间和结束时间  计算出中间的所有日期"></a>一 已知开始时间和结束时间  计算出中间的所有日期</h3><pre class=" language-javaScript"><code class="language-javaScript">// 中国标准时间format yyyy-mm-ddconst format = (time) => {  let ymd = ''  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())  ymd += time.getFullYear() + '-' // 获取年份。  ymd += mouth + '-' // 获取月份。  ymd += day // 获取日。  return ymd // 返回日期。}export const getAllDate = (start, end) => {  let dateArr = []  let startArr = start.split('-')  let endArr = end.split('-')  let db = new Date()  db.setUTCFullYear(startArr[0], startArr[1] - 1, startArr[2])  let de = new Date()  de.setUTCFullYear(endArr[0], endArr[1] - 1, endArr[2])  let unixDb = db.getTime()  let unixDe = de.getTime()  let stamp  const oneDay = 24 * 60 * 60 * 1000;  for (stamp = unixDb; stamp <= unixDe;) {    dateArr.push(format(new Date(parseInt(stamp))))    stamp = stamp + oneDay  }  return dateArr}...// 使用console.log(getAllDate('2018-12-12', '2019-3-3'))</code></pre><p>结果如下:<br><img src="https://upload-images.jianshu.io/upload_images/11447772-bc003c9bfdedb470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console.log(getAllDate(&#39;2018-12-12&#39;, &#39;2019-3-3&#39;))"></p><h3 id="二-最近七天-一个月-三个月-一年"><a href="#二-最近七天-一个月-三个月-一年" class="headerlink" title="二 最近七天 一个月 三个月 一年"></a>二 最近七天 一个月 三个月 一年</h3><p>   <strong>最近七天:</strong></p><pre class=" language-javaScript"><code class="language-javaScript">// 中国标准时间format yyyy-mm-ddconst format = (time) => {  let ymd = ''  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())  ymd += time.getFullYear() + '-' // 获取年份。  ymd += mouth + '-' // 获取月份。  ymd += day // 获取日。  return ymd // 返回日期。}export const getWeekDate = () => {  let myDate = new Date()  // 获取前一周时间  const oneDay = 24 * 60 * 60 * 1000;  let oneweekdate = new Date(myDate - 7 * oneDay)  let lastWeek = []  lastWeek.push(format(oneweekdate))  lastWeek.push(format(myDate))  return lastWeek}    ... // 使用console.log(getWeekDate())</code></pre><p>控制台输出结果:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-c7b2d92c2f82387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console.log(getWeekDate())"></p><p><strong>最近一个月:</strong></p><pre class=" language-javaScript"><code class="language-javaScript">// 中国标准时间format yyyy-mm-ddconst format = (time) => {  let ymd = ''  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())  ymd += time.getFullYear() + '-' // 获取年份。  ymd += mouth + '-' // 获取月份。  ymd += day // 获取日。  return ymd // 返回日期。}export const getMonthDate = () => {  let nowDate = new Date()  let nowDateChange = new Date()  let lastMonth = []  // 获取前一月时间  nowDateChange.setMonth(nowDateChange.getMonth() - 1)  lastMonth.push(format(nowDateChange))  lastMonth.push(format(nowDate))  return lastMonth}    ...// 使用 console.log(getMonthDate())</code></pre><p>输出如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-2625f339bfd85b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console.log(getMonthDate())"><br><strong>最近三个月</strong></p><pre class=" language-javaScript"><code class="language-javaScript">// 中国标准时间format yyyy-mm-ddconst format = (time) => {  let ymd = ''  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())  ymd += time.getFullYear() + '-' // 获取年份。  ymd += mouth + '-' // 获取月份。  ymd += day // 获取日。  return ymd // 返回日期。}export const getThreeMonthDate = () => {  let nowDate = new Date()  let nowDateChange = new Date()  let threeMonth = []  // 获取前三月时间  nowDateChange.setMonth(nowDateChange.getMonth() - 3)  threeMonth.push(format(nowDateChange))  threeMonth.push(format(nowDate))  return threeMonth}    ...// 使用console.log(getThreeMonthDate())</code></pre><p>输出如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-c6c3b35602c1204b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console.log(getThreeMonthDate())"></p><p><strong>一年</strong></p><pre><code>const format = (time) =&gt; {  let ymd = &#39;&#39;  let mouth = (time.getMonth() + 1) &gt;= 10 ? (time.getMonth() + 1) : (&#39;0&#39; + (time.getMonth() + 1))  let day = time.getDate() &gt;= 10 ? time.getDate() : (&#39;0&#39; + time.getDate())  ymd += time.getFullYear() + &#39;-&#39; // 获取年份。  ymd += mouth + &#39;-&#39; // 获取月份。  ymd += day // 获取日。  return ymd // 返回日期。}export const getYearDate = () =&gt; {  let nowDate = new Date()  let nowDateChange = new Date()  let lastYear = []  // 获取前一年时间  nowDateChange.setFullYear(nowDateChange.getFullYear()- 1)  lastYear.push(format(nowDateChange))  lastYear.push(format(nowDate))  return lastYear}    ... // 使用console.log(getYearDate())</code></pre><p>输出如下:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/11447772-18e43bb863ef2d93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console.log(getYearDate())"></p><blockquote><p>关于JavaScript Date 对象的方法详情请转@<a href="http://www.w3school.com.cn/jsref/jsref_obj_date.asp" target="_blank" rel="noopener">W3 school</a></p></blockquote><blockquote><p>更多文章请看我的博客@<a href="https://wlove-c.github.io/" target="_blank" rel="noopener">王一诺</a>  感谢阅读！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中call、bind、apply你知多少？</title>
      <link href="/2020/05/13/codding-20190624/"/>
      <url>/2020/05/13/codding-20190624/</url>
      
        <content type="html"><![CDATA[<p>@<a href="javascript中call、bind、apply你知多少？">TOC</a></p><blockquote><p>在我们日常开发过程中，js基础是用的最多的，也许很多人觉得熟悉框架就好了，不需要太深入原生js的原理及实现，其实这是一种舍本逐末的行为。。。很长一段时间，我的文章方向会在js基础上~</p></blockquote><blockquote><p>在我们日常开发过程中call、bind、apply无疑是我们用的比较多的语法,今天在开发中看到有同事傻傻分不清call和bind的区别,故在解释一通之后，写下此文；</p></blockquote><h3 id="首先查看文档理解含义"><a href="#首先查看文档理解含义" class="headerlink" title="首先查看文档理解含义"></a>首先查看文档理解含义</h3><h4 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h4><p>从<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">MDN 文档 call</a>我们可以了解到:<br>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。</p><ul><li>fun.call(thisArg, arg1, arg2, …)</li><li>thisArg 在 <em><code>fun</code></em> 函数运行时指定的 <code>this</code> 值<em>。</em>需要注意的是，指定的 <code>this</code> 值并不一定是该函数执行时真正的 <code>this</code> 值，如果这个函数在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" title="如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。" target="_blank" rel="noopener"><code>非严格模式</code></a>下运行，则指定为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" title="值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。" target="_blank" rel="noopener"><code>null</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。" target="_blank" rel="noopener"><code>undefined</code></a>的 <code>this</code> 值会自动指向全局对象（浏览器中就是 window 对象），同时值为原始值（数字，字符串，布尔值）的 <code>this</code> 会指向该原始值的自动包装对象。（ps:严格模式下 我们对函数的的调用必须严格的写出被调用的函数的对象）；</li><li>arg1, arg2, … 指定的参数列表</li></ul><p>先举个例子:</p><pre class=" language-javaScript"><code class="language-javaScript">// main.js  const foo={      name:'foo',      getFoo(...args){        console.log('this===',this,'this.name==',this.name)        console.log('-----------------------------------')        console.log('...args=====',...args)      }    }    const bar={      name:'bar',      getBar(...args){        console.log('this===',this,'this.name==',this.name)        console.log('-----------------------------------')        console.log('...args=====',...args)      }    }    foo.getFoo() //this=== {name: "foo", getFoo: ƒ} this.name== foo  ----------------------------------- ...args=====    bar.getBar() //this=== {name: "bar", getBar: ƒ} this.name== bar  ----------------------------------- ...args=====</code></pre><p>假如我们想在getFoo去借bar里面的东西用用，该怎么办呢?<br>也许有同学想到的是这样:</p><pre class=" language-javaScript"><code class="language-javaScript">    foo.getFoo(bar.name) // this=== {name: "foo", getFoo: ƒ} this.name== foo -----------------------------------  ...args===== bar</code></pre><p>毫无疑问，这是没问题的，但此时只是正常的传参，能否干脆点把this.name也改成bar呢；根据call的定义:</p><pre><code>foo.getFoo.call(bar,&#39;测试传参&#39;,&#39;测试call&#39;) //his=== {name: &quot;bar&quot;, getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试call//使用call后，我们可以看到foo.getFoo的this此时指向了bar对象，此时的name拿到的bar的对象的name；</code></pre><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><p>从<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">MDN 文档 apply</a>我们可以了解到:<br><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects" target="_blank" rel="noopener">类似数组对象</a>）提供的参数。</p><ul><li>func.apply(thisArg, [argsArray])</li><li><p>thisArg：可选的。在 <em><code>func</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" title="如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。" target="_blank" rel="noopener">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p></li><li><p>argsArray：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" title="值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。" target="_blank" rel="noopener"><code>null</code></a> 或  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。" target="_blank" rel="noopener"><code>undefined</code></a>，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Browser_compatibility" target="_blank" rel="noopener">浏览器兼容性</a> 请参阅本文底部内容。</p></li></ul><p>继续使用刚才的foo和bar</p><pre class=" language-javaScript"><code class="language-javaScript">foo.getFoo.apply(bar,['测试传参','测试apply']) //his=== {name: "bar", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试apply</code></pre><p>总结 <strong>call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。</strong></p><h4 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h4><p>从<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">MDN 文档 bind</a>我们可以了解到:</p><p>bind()方法创建一个新的函数，在调用时设置this关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p><ul><li>function.bind(thisArg[, arg1[, arg2[, …]]])</li><li><p>thisArg 调用绑定函数时作为<code>this</code>参数传递给目标函数的值。 如果使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" title="new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。" target="_blank" rel="noopener"><code>new</code></a>运算符构造绑定函数，则忽略该值。当使用<code>bind</code>在<code>setTimeout</code>中创建一个函数（作为回调提供）时，作为<code>thisArg</code>传递的任何原始值都将转换为<code>object</code>。如果<code>bind</code>函数的参数列表为空，执行作用域的<code>this</code>将被视为新函数的<code>thisArg</code>。</p></li><li><p>arg1, arg2, … 当目标函数被调用时，预先添加到绑定函数的参数列表中的参数。</p></li></ul><p>emmmm…继续最最上面的那个foo和bar</p><pre class=" language-javascript"><code class="language-javascript">foo<span class="token punctuation">.</span>getFoo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token string">'测试传参'</span><span class="token punctuation">,</span><span class="token string">'测试bind'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时是无输出，因为bind()方法创建一个新的函数，当前函数并没有执行</span></code></pre><p>修改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foobindbar <span class="token operator">=</span> foo<span class="token punctuation">.</span>getFoo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token string">'测试传参'</span><span class="token punctuation">,</span><span class="token string">'测试bind'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foobindbar<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ƒ getFoo(...args){</span>    <span class="token comment" spellcheck="true">//   console.log('this===',this,'this.name==',this.name)</span>    <span class="token comment" spellcheck="true">//   console.log('-----------------------------------')</span>    <span class="token comment" spellcheck="true">//   console.log('...args=====',...args)</span>    <span class="token comment" spellcheck="true">// }</span><span class="token function">foobindbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this=== {name: "bar", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试apply</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="call和apply的区别"><a href="#call和apply的区别" class="headerlink" title="call和apply的区别"></a>call和apply的区别</h4><p>call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。用apply时，即使传入的参数只有一个，也必须定义为数组才行；</p><h4 id="call与apply-和-bind的区别"><a href="#call与apply-和-bind的区别" class="headerlink" title="call与apply 和 bind的区别"></a>call与apply 和 bind的区别</h4><p>call与apply改变this的指向时，会直接触发函数;而bind会创建一个新的函数，在调用时设置this关键字为提供的值，使用bind时，会优先使用bind绑定的几个值；<br>如下：</p><pre><code>foo.getFoo.bind(bar,&#39;测试传参&#39;,&#39;测试bind&#39;)const foobindbar = foo.getFoo.bind(bar,&#39;测试传参&#39;,&#39;测试bind&#39;);console.log(foobindbar)    // ƒ getFoo(...args){    //   console.log(&#39;this===&#39;,this,&#39;this.name==&#39;,this.name)    //   console.log(&#39;-----------------------------------&#39;)    //   console.log(&#39;...args=====&#39;,...args)    // }foobindbar(&#39;参数1&#39;, &#39;参数2&#39;) //this=== {name: &quot;bar&quot;, getBar: ƒ} this.name== bar ----------------------------------- ...args=====  测试传参 测试apply 参数1 参数2// ...args=====  测试传参 测试apply 参数1 参数2</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript函数防抖和函数节流~</title>
      <link href="/2020/05/13/codding-20190825/"/>
      <url>/2020/05/13/codding-20190825/</url>
      
        <content type="html"><![CDATA[<hr><p><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/8/26/16ccb9c3667de170?w=1240&amp;h=297&amp;f=jpeg&amp;s=39707" alt="镇楼图杀生丸"></p><hr><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><ul><li><p>函数防抖和函数节流都是为了优化事件处理程序，</p></li><li><p><strong>防抖</strong> 一个频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。</p></li><li><p><strong>节流</strong> 一个频繁触发的函数，在规定时间内，函数执行一次后，只有大于设定的执行周期后才会执行第二次。</p></li></ul><blockquote><p>使用场景: <strong>防抖</strong> 经常用在我们搜索框输入搜索，点击提交，防止等；而 <strong>节流</strong> 一般在onresize、mousemove、滚动事件等事件中使用，防止过多的请求造成服务器压力</p></blockquote><h3 id="函数防抖；"><a href="#函数防抖；" class="headerlink" title="函数防抖；"></a>函数防抖；</h3><ul><li>原理：在第一次调用函数的时候，创建一个定时器，在指定的时间间隔之后运行代码；如果代码还没运行时，又触发了该函数，则清除旧的定时器，重新创建新的定时器；如果超过延时执行的时间，代码执行了，则此时已经是第二次触发；</li></ul><ul><li>实现如下:<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> debounce <span class="token operator">=</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定时器</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// method.apply(this) 看你用不用箭头函数</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="函数节流；"><a href="#函数节流；" class="headerlink" title="函数节流；"></a>函数节流；</h3></li></ul><ul><li>原理：第一次执行函数的时候，记录函数执行的时间，当下一次执行的时候，比较时间是否还在间隔时间内，如果是则不执行，否则继续执行；</li></ul><ul><li>实现如下:<pre><code>const throttle = (method, delay) =&gt; {  var lastTime = 0; // 上一次函数触发的时间  return () =&gt; {      var nowTime = Date.now();      if (nowTime - lastTime &gt; delay) {          method(); // method.apply(this) 看你用不用箭头函数          lastTime = nowTime;      }  }}</code></pre></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><blockquote><p>函数防抖和函数节流 两者非常相似，但还是有些区别，具体区别可以自行百度或者看以下文章；作者博客:<a href="https://wlove-c.github.io/" target="_blank" rel="noopener">Eno</a></p></blockquote><p>文章参考:<br><a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="noopener">函数防抖和节流的区别</a><br><a href="https://www.lodashjs.com/docs/latest#_debouncefunc-wait0-options" target="_blank" rel="noopener">lodashjs</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS垂直居中的几种方法</title>
      <link href="/2020/05/13/coding-1/"/>
      <url>/2020/05/13/coding-1/</url>
      
        <content type="html"><![CDATA[<p>CSS垂直居中的几种方法</p><p>@<a href="CSS垂直居中的几种方法">TOC</a></p><h3 id="假设HTML如下"><a href="#假设HTML如下" class="headerlink" title="假设HTML如下:"></a>假设HTML如下:</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="1-兼容性最好的方法-IE7以上"><a href="#1-兼容性最好的方法-IE7以上" class="headerlink" title="1. 兼容性最好的方法 IE7以上"></a>1. 兼容性最好的方法 IE7以上</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>     width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>     height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>     background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     position<span class="token punctuation">:</span>relative<span class="token punctuation">;</span> <span class="token punctuation">}</span>#content <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>pink<span class="token punctuation">;</span>    position<span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    top<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    right<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    bottom<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    left<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    margin<span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-transform进行元素偏移-IE8以上"><a href="#2-transform进行元素偏移-IE8以上" class="headerlink" title="2. transform进行元素偏移 IE8以上"></a>2. transform进行元素偏移 IE8以上</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    position<span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">}</span>#content<span class="token punctuation">{</span>    position<span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    left<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    top<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    transform<span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-弹性盒模型进行布局-IE兼容性差"><a href="#3-弹性盒模型进行布局-IE兼容性差" class="headerlink" title="3. 弹性盒模型进行布局 IE兼容性差"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">:</span>box<span class="token punctuation">;</span>    box<span class="token operator">-</span>pack<span class="token punctuation">:</span>center<span class="token punctuation">;</span>    box<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>    display<span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>flexbox<span class="token punctuation">;</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>pack<span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span>#content <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-flex布局-不兼容IE9以下"><a href="#4-flex布局-不兼容IE9以下" class="headerlink" title="4. flex布局 不兼容IE9以下"></a>4. flex布局 不兼容IE9以下</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    display<span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>flex<span class="token punctuation">;</span>     justify<span class="token operator">-</span>content<span class="token punctuation">:</span>center<span class="token punctuation">;</span>     align<span class="token operator">-</span>items<span class="token punctuation">:</span>center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>#content <span class="token punctuation">{</span>    position<span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h5 id="言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔"><a href="#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔" class="headerlink" title="言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中watch不触发、不生效的解决办法及原理</title>
      <link href="/2020/05/13/coding-2/"/>
      <url>/2020/05/13/coding-2/</url>
      
        <content type="html"><![CDATA[<p>vue中watch不触发、不生效的解决办法及原理<br>@<a href="vue中watch不触发、不生效的解决办法及原理">TOC</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>vue中watch不触发、不生效的解决办法及原理</p><p>@<a href="vue中watch不触发、不生效的解决办法及原理">TOC</a></p><h2 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：</p><pre class=" language-javascript"><code class="language-javascript">  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">uploaConfig</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>moreList <span class="token operator">=</span> newVal<span class="token punctuation">.</span>moreList          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>vue-devToola数据传递结果如下<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a392f85cf?w=622&amp;h=737&amp;f=png&amp;s=95782" alt="在这里插入图片描述"></p><h4 id="方案解决过程一"><a href="#方案解决过程一" class="headerlink" title="方案解决过程一"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:</p><pre class=" language-javascript"><code class="language-javascript"> watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">'uploaConfig.moreList'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          handler <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>moreList <span class="token operator">=</span> newVal<span class="token punctuation">.</span>moreList              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          deep<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>结果显而易见 还是不行；</p><h4 id="方案解决过程二"><a href="#方案解决过程二" class="headerlink" title="方案解决过程二"></a>方案解决过程二</h4><p>查阅: <a href="https://cn.vuejs.org/v2/api/#watch" target="_blank" rel="noopener">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,</p><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'uploaConfig.moreList'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          handler <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>moreList <span class="token operator">=</span> newVal<span class="token punctuation">.</span>moreList              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>最后博主问题终于得到解决了<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a4443d1f4?w=573&amp;h=608&amp;f=png&amp;s=79337" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p><blockquote><p>20190626更新 | 原文并没有解释清楚为何加上 deep: true或者 immediate: true就可以了，此次更新将加入demo</p></blockquote><h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><h3 id="1-常规的监听-watch"><a href="#1-常规的监听-watch" class="headerlink" title="1 常规的监听(watch)"></a>1 常规的监听(watch)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"watch-demo"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"watch-demo-item"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"val1"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>value1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// ...</span>data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      val1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      value1<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val1 <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value1 <span class="token operator">=</span> val    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span></code></pre><p>输出:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/6/28/16b99b399f2c62a0?w=990&amp;h=488&amp;f=png&amp;s=1959" alt="常规监听"></p><ul><li>从上图可以看出，常规的监听和我们想象中的完全一致，理想和实际完美吻合；</li></ul><h3 id="2-对象监听"><a href="#2-对象监听" class="headerlink" title="2 对象监听"></a>2 对象监听</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"watch-demo-item"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"obj.val2"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>value2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// ...</span>data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      val1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      value1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>        val2<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value2<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val1 <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value1 <span class="token operator">=</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    obj <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value2 <span class="token operator">=</span> val<span class="token punctuation">.</span>val2    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span></code></pre><p>输出结果:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/6/28/16b99b3990bb0cce?w=1240&amp;h=1040&amp;f=png&amp;s=4873" alt="对象监听"></p><ul><li>咦 为何刚才没问题，对象就有问题呢</li></ul><p><strong>方法一: 代码调整如下:</strong></p><pre class=" language-javascript"><code class="language-javascript"> data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      val1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      value1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>        val2<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value2<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val1 <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value1 <span class="token operator">=</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'obj.val2'</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value2 <span class="token operator">=</span> val    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span></code></pre><p>此时页面输出:<br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/6/28/16b99b39bc59b2fd?w=1240&amp;h=750&amp;f=png&amp;s=5085" alt="方法一"></p><blockquote><p>但现实开发过程中，我们的obj对象很难确定里面的key数量，假如很多个key的时候，总不能写多个监听去监听key吧？ 此时还有一种方法 如下</p></blockquote><p><strong>方法二</strong></p><pre class=" language-javascript"><code class="language-javascript">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      val1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      value1<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>        val2<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      value2<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    val1 <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value1 <span class="token operator">=</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'obj'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      handler <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value2 <span class="token operator">=</span> val<span class="token punctuation">.</span>val2      <span class="token punctuation">}</span><span class="token punctuation">,</span>      deep<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><strong>此时输出如下</strong><br><img src="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif" data-original="https://user-gold-cdn.xitu.io/2019/6/28/16b99b39b71b7b68?w=790&amp;h=760&amp;f=png&amp;s=3585" alt="方法二"></p><blockquote><p>解释:handler是watch的高级用法,里面有一个属性 deep，默认值是 false，代表是否深度监听, 还有一个属性 immediate，默认值也是 false ，但immediate:true代表如果在 wacth 里声明了之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。<strong>deep深度监听会影响性能；</strong> 两者可以同时存在；</p></blockquote><blockquote><p>此次代码演示demo请转 <a href="https://github.com/wLove-c/vue-study-demo/blob/master/src/components/watchDemo.vue" target="_blank" rel="noopener">王一诺watchDemo.vue</a></p></blockquote><p>如果对你有帮助麻烦点个赞👍</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
