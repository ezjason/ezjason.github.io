{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/custom.css","path":"libs/valine/custom.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","path":"libs/materialize/font/material-design-icons/LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","path":"libs/materialize/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","path":"libs/materialize/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","path":"libs/materialize/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","path":"libs/materialize/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","path":"libs/materialize/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","path":"libs/materialize/font/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","path":"libs/materialize/font/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","path":"libs/materialize/font/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","path":"libs/materialize/js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","path":"libs/materialize/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","path":"libs/materialize/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","path":"libs/materialize/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","path":"libs/materialize/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","path":"libs/materialize/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","path":"libs/materialize/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","path":"libs/materialize/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","path":"libs/materialize/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","path":"libs/materialize/font/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","path":"libs/materialize/css/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","path":"libs/materialize/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","path":"libs/materialize/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","path":"libs/materialize/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/README.md","hash":"9a63ad948c0db34aa4789a82c8f843c8bd9f8fa5","modified":1589782114686},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a59bd7f914c41deee3aed87276309a0c755e76ac","modified":1589782114686},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1589782114686},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"b888d6532ccef93149a427ccf7d7b7db5303e18a","modified":1589782114687},{"_id":"source/_data/musics.json","hash":"3eefc55c5d3d116e0e3d8254ec8603aefbeb8c1d","modified":1589782114680},{"_id":"source/about/index.md","hash":"9fc3bd9f39f35a58f67bccc1283e2af2ea7e6299","modified":1589782114685},{"_id":"source/_posts/actions.md","hash":"4ba692e3d4421e697149c4307bcf1a1e99ad60b2","modified":1589871666436},{"_id":"source/_posts/codding-20190624.md","hash":"8a35593497e9597f3d9a4f817cadaf0628696cc3","modified":1589782114681},{"_id":"source/_posts/applet.md","hash":"323c7b0774b92bf0ad3efbc2e69ebc703cd4a57d","modified":1594569823860},{"_id":"source/_posts/codding-20190825.md","hash":"54246ab90bd0d35f08f97cc530f96f974df16cb7","modified":1589782114681},{"_id":"source/_posts/coding-1.md","hash":"c86ffd4048917fe20c96d34e00f4952b8574ad16","modified":1589782114681},{"_id":"source/_posts/coding-2.md","hash":"62a128a4c4db4a6d876b4993a621c172d45ee4fe","modified":1589782114682},{"_id":"source/_posts/coding-20190329.md","hash":"6ada9d4912a15d79e27617873b3788f68dd6d8db","modified":1589782114682},{"_id":"source/_posts/coding-20190612.md","hash":"63b9715ace935f152eb9e9aef24f833c70202a63","modified":1589782114682},{"_id":"source/_posts/coding-20190614.md","hash":"82bb027e0d859641fbd63b5f9c07f7a7e6f87188","modified":1589782114682},{"_id":"source/_posts/coding-20190629.md","hash":"4eb35d47d99fdf6ec7f6e981d1edddad79fdf8f4","modified":1589782114682},{"_id":"source/_posts/coding-20190916.md","hash":"36c7a7fcbb22447878faa881353337370eab3b35","modified":1589782114683},{"_id":"source/_posts/coding-20191008.md","hash":"e59c0fb3eecd32df23d677d3611dd03b7f2a6777","modified":1589782114683},{"_id":"source/_posts/coding-3.md","hash":"99f243077957b02abb98b16edc98acf92b92adaa","modified":1589782114683},{"_id":"source/_posts/coding-4.md","hash":"5f3cfa3071fb5e5216c6aa3b26adb8905e6f257c","modified":1589782114683},{"_id":"source/_posts/coding-5.md","hash":"de9e8377a33c2eae43f3431d5c0cba08edede84d","modified":1589782114684},{"_id":"source/_posts/gulp-20190618.md","hash":"3345b111786c3b8917f4d6bf229bf0fca54860bf","modified":1589782114684},{"_id":"source/_posts/hello-world.md","hash":"ca1669ae188c76eebc61bd2283db978d32de27a6","modified":1589782114684},{"_id":"source/_posts/macnginx-20190603.md","hash":"1d6d77edd605bade814690c5bafa576515466e64","modified":1589782114684},{"_id":"source/_posts/nginx-20190603.md","hash":"a174dedfd339fa290524e16910a5ca0c7ebf724f","modified":1589782114684},{"_id":"source/coding/index.md","hash":"ef71f3c0a5aecb8f3feaa12bd2fc013283cfa241","modified":1589782114685},{"_id":"source/categories/index.md","hash":"a60190a718314320f55b90f90318d1db9032ff48","modified":1589782114685},{"_id":"source/tags/index.md","hash":"ec5895e154834c4bfb19e497706075c8db0edac7","modified":1589782114685},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9d8609d0213ca88c48b0a4dbcbc4ca2effdda1d7","modified":1589782114687},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"978718ecafe858d5a2357e72e12daea3326c26fa","modified":1589782114687},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"efaebb115f5dd0a35b05343266c7b62ce7fb1f5d","modified":1589782114693},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"c8459660e87a0a07a6e007a99a2303b142bb7744","modified":1589782114693},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1589782114693},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"95176564ea32e65ddc9fdbe9074332239d6a1305","modified":1589782114694},{"_id":"themes/hexo-theme-matery/layout/coding.ejs","hash":"6ccd10c996c291521c53296ab1894f162c02f7e9","modified":1589782114694},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"89c47cf1eb2cf1feb8a8d06f4eb7c76b713f79c0","modified":1589782114694},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"05730420fbbac114ac581b650707e7abc4bb247c","modified":1589782114694},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"3e0a601f17ad0f1fefa20dec5a58b30f5c7c6253","modified":1589782114694},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"9b794f8c3ab5925353162a92f3f74db4d57d640d","modified":1589782114695},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"ad1cc11ac2b99bd803276b28ae57340cdd5810c8","modified":1589782114695},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"7e34bd9811d8ea2f8f2ff8a477cb50ad813e88b8","modified":1589782114695},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"03602fcd3293db28e0d12cdf3948d854048e99dd","modified":1589782114696},{"_id":"themes/hexo-theme-matery/layout/_partial/about-cover.ejs","hash":"ff02fc607b21e25df12e9d89927b72dd1a533047","modified":1589782114688},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1589782114688},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-auto-push.ejs","hash":"7df46b0931bea16086c77edfdba6e8b60bad3297","modified":1589782114688},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"ba3425ca1c119afe4fd98711dcc6ea339a9f4a0b","modified":1589782114688},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"34a0ca5959763564a65250460f6363d9a0f85f7d","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1589782114688},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"e4c5bf28ddc29519eee8debe79cce45bf279adeb","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"e66e119f57bb9230395c70d67cd0f615927d3334","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"744f1cbdc9cb1af09bc320d4d47e5955c894f651","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"c219688593f2c5771533ea8988ea1360227f6920","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"f1c87edb91b595a978a1d1f4e26f3f06dc48ccec","modified":1589782114690},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"07420e6ecfd40048707d007bf465206eeff9d2a4","modified":1589782114689},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1589782114690},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"202dfebd4ce1e2e647e0fcbf275b30820d16507c","modified":1589782114690},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"b7320ccb822f9969c58401a0bc946a8a7a1fea9c","modified":1589782114690},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"df803e3fef3ddac2dcaa866b35aae4513923cb1a","modified":1589782114690},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1589782114690},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"3f73f077b05b6bf41150b00f43870a41d3fa390f","modified":1589782114690},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"d545c74f26ec321ba7e942d469f354eadd57e407","modified":1589782114691},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1589782114691},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"c948aa82afc65f08f1c894b049d6899577536306","modified":1589782114691},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"c59f7dd9a04f7f58bc64c7f7e2bcf29dc769f732","modified":1589782114691},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"6ac7b8ecea324ff49b06bf5c0c88fcb5f51a21b7","modified":1589782114691},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"c2f04b67721c36384e575994f3e66072843fc2bc","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"bd0edf8dad95b2255890d59fb6d6ed6f2eab9c2f","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1589782114692},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1589782114693},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1589782114693},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"cb7a0151cd20e90351e151c22bca9d4c3112f234","modified":1589782114693},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1589782114693},{"_id":"themes/hexo-theme-matery/source/css/custom.css","hash":"8cf75bac824791d1d40e873c688b8b0973eab49f","modified":1589782114695},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1589782114695},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"469c737b9da2240b771857abafb43e5328bfda61","modified":1589782114695},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1589782114696},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"8f4da1e5e6223f3e4a693ba46797f3c570627d24","modified":1589782114696},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"150437c526520b8243d25a6fff635f9921939acc","modified":1589782114696},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"4969bb6f9a714a473a8eb5ff26e1b1741aabaa17","modified":1589436830419},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"96d1766488b7c03cf50f5d61b1a68b66db3865cf","modified":1589782114735},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1589782114746},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1589782114697},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1589782114698},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1589782114698},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1589782114698},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1589782114703},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1589782114704},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1589782114708},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1589782114709},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1589782114710},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1589782114710},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1589782114714},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1589782114730},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1589782114730},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1589782114730},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1589782114732},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1589782114733},{"_id":"themes/hexo-theme-matery/source/libs/valine/custom.css","hash":"c8a1aa79ec633d90d019e3e52eca76e24e3935a3","modified":1589782114735},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"3219ce162c29f3849a24c0a329a3e0e303bbec26","modified":1589782114738},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1589782114739},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1589782114741},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1589782114741},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1589782114741},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1589782114743},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1589782114744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1589782114744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1589782114745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1589782114745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1589782114745},{"_id":"themes/hexo-theme-matery/source/medias/reward/.DS_Store","hash":"551396c663cfe88e8b21aa82c3a3601a4e911cbd","modified":1589440084374},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1589782114699},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1589782114704},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1589782114710},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1589782114711},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1589782114734},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1589782114739},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1589782114739},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1589782114740},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1589782114740},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1589782114741},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1589782114742},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1589782114742},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1589782114742},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1589782114743},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1589782114743},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1589782114744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1589782114744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1589782114745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1589782114746},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1589782114709},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1589782114712},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1589782114712},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1589782114712},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1589782114712},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1589782114713},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1589782114713},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1589782114713},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1589782114713},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1589782114713},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1589782114714},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1589782114730},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1589782114730},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1589782114731},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1589782114731},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1589782114731},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1589782114732},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1589782114732},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1589782114734},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1589782114736},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1589782114736},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1589782114736},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1589782114737},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1589782114738},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"c16506d84ede6121e38d1d0f32e552867c4d695c","modified":1589782114747},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1589782114700},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1589782114703},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1589782114740},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"540e43aea993ada0c9b4b50ae5843494d8b7cc28","modified":1589782114715},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1589782114719},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1589782114721},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1589782114723},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1589782114727},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1589782114727},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1589782114727},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1589782114728},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1589782114729},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1589782114729},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"676c5d20578d95902e76198e5445bf188ef41907","modified":1589782114748},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1589782114700},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1589782114702},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1589782114719},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1589782114721},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1589782114718},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1589782114718},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1589782114721},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1589782114722},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1589782114723},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1589782114725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1589782114725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1589782114726},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1589782114726},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1589782114728},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1589782114737},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1589782114701},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1589782114702},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1589782114715},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1589782114716},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1589782114720},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1589782114722},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1589782114724},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"757d54367f0df16a783769eec0ba974f42bd7dce","modified":1589782114717},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1589782114702},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1589782114707},{"_id":"public/atom.xml","hash":"19cf69956664b0aff04880c38c3698cf1145651c","modified":1594569881585},{"_id":"public/search.xml","hash":"b144a8b109c304f0e2a17500543b5cd1cb6ed1e3","modified":1594569881611},{"_id":"public/categories/index.html","hash":"4da2de678351e8f550efa89401a852792979f8d3","modified":1594569882526},{"_id":"public/about/index.html","hash":"96344b5521cc2bb2358c1d30e2837451239886a1","modified":1594569882526},{"_id":"public/coding/index.html","hash":"9c9f28724a5d7725a70cf86fd70c0ab2da77ef25","modified":1594569882526},{"_id":"public/tags/index.html","hash":"66a1f3556d4e39a734cdd556cb43af1e8c4b2dab","modified":1594569882526},{"_id":"public/2020/07/12/applet/index.html","hash":"0d7d98763a711ccf548b83f1b3121aa04cb6cd5c","modified":1594569882526},{"_id":"public/2020/05/19/actions/index.html","hash":"0aaf35d477ef6ba8484eb9ec17a1a50c3906ffd9","modified":1594569882526},{"_id":"public/2020/05/18/gulp-20190618/index.html","hash":"6a9082727462b0440700f8f04e62e785dc17a608","modified":1594569882527},{"_id":"public/2020/05/18/hello-world/index.html","hash":"be83824d94554f36f62750b88f6e804a3906a554","modified":1594569882527},{"_id":"public/2020/05/18/macnginx-20190603/index.html","hash":"a9bf806bef840dc7d1ab14af1c42b050ac178f41","modified":1594569882527},{"_id":"public/2020/05/18/nginx-20190603/index.html","hash":"2efeaa83b121fbf8bae7f59d534ca6a894564969","modified":1594569882527},{"_id":"public/2020/05/18/coding-3/index.html","hash":"712c751ee08f14cd88a457132bb72cbb7a47c344","modified":1594569882527},{"_id":"public/2020/05/18/coding-4/index.html","hash":"275ea5418cbfb5b4b2865a83fc11faf313a520ae","modified":1594569882527},{"_id":"public/2020/05/18/coding-5/index.html","hash":"ce4cc793ed28430f934e2aa818a557418fc28056","modified":1594569882527},{"_id":"public/2020/05/18/coding-20190329/index.html","hash":"62a12a2fb79840352ba84062d309fcdb12ba3c90","modified":1594569882527},{"_id":"public/2020/05/18/coding-20190612/index.html","hash":"2d997eb092c0b20901967e0dc43b01db54f41063","modified":1594569882527},{"_id":"public/2020/05/18/coding-20190614/index.html","hash":"49c0f589d6ef0b8a4173c145f27952a0401ac77d","modified":1594569882527},{"_id":"public/2020/05/18/coding-20190629/index.html","hash":"2a8c2079fc512ddfe9aaf8940f663d32407b7dcd","modified":1594569882527},{"_id":"public/2020/05/18/coding-20190916/index.html","hash":"c7122481704ee60ab38f5c7c21b839cbb72d2f01","modified":1594569882527},{"_id":"public/2020/05/18/codding-20190624/index.html","hash":"24bc39e9a75df908cf7d7b6a2d1f0a1347e6c47c","modified":1594569882527},{"_id":"public/2020/05/18/codding-20190825/index.html","hash":"dd225db9ffb88f6c707f45b983adb7bd48691b30","modified":1594569882527},{"_id":"public/2020/05/18/coding-1/index.html","hash":"86f516ceb82a0a440ef4199e11749b1fa638b7bc","modified":1594569882528},{"_id":"public/2020/05/18/coding-2/index.html","hash":"bea75b0ee8a4dfe1a1e9195b136b65d3c479004f","modified":1594569882528},{"_id":"public/index.html","hash":"6e9edaf03b9419ea28b53abdbde970e228ad927e","modified":1594569882528},{"_id":"public/page/2/index.html","hash":"bf0e90b21349b89e4991a70f9e2a24441e988e2c","modified":1594569882528},{"_id":"public/archives/index.html","hash":"46ada8db9f84cf5015bde5894f4fa07c4780bb7c","modified":1594569882528},{"_id":"public/archives/page/2/index.html","hash":"f2d86549f33d9b3d31dd4f87feaa258a434d1219","modified":1594569882528},{"_id":"public/archives/2020/index.html","hash":"aee065bad0b5a9518da44d7c535381061792ec4e","modified":1594569882528},{"_id":"public/archives/2020/page/2/index.html","hash":"99920f934be5fad995afacf50804da8aded5e80a","modified":1594569882528},{"_id":"public/archives/2020/05/index.html","hash":"d690bd3f778b63e92413d92b3d7ecd74775fffae","modified":1594569882528},{"_id":"public/archives/2020/05/page/2/index.html","hash":"1c703ce8c843dbdc2ef4d82726bbeffedc1ad2f2","modified":1594569882528},{"_id":"public/archives/2020/07/index.html","hash":"f5e7ee64315c10427a6c594ea53b6d4f658b6abe","modified":1594569882528},{"_id":"public/categories/编程/index.html","hash":"b87566716a7cd93921255d6046dc47aa707bc888","modified":1594569882528},{"_id":"public/categories/编程/page/2/index.html","hash":"ee05424851804c78e72912d7d8374fb66aa46fb7","modified":1594569882528},{"_id":"public/tags/github/index.html","hash":"512b3276e4d5b434e0117831e80c837701544f15","modified":1594569882528},{"_id":"public/tags/node/index.html","hash":"5ef2bcbcd471b43ec8f6d9470b014916e664d045","modified":1594569882528},{"_id":"public/tags/vue/index.html","hash":"30f58023de70010cabebc81b570864029ae869a5","modified":1594569882528},{"_id":"public/tags/javaScript/index.html","hash":"ab4b66b28a497699b86497e6f40271eaca4a31ba","modified":1594569882528},{"_id":"public/tags/nodejs/index.html","hash":"02b48c8e1fc6bc6f4607d3686a494172aa5e5483","modified":1594569882528},{"_id":"public/tags/CSS/index.html","hash":"9954a4d5ca538a2ba6ae5241aead13516f3e1a16","modified":1594569882528},{"_id":"public/tags/Vue/index.html","hash":"0dd10d934bedacae934b8a1d2d86494aac655f96","modified":1594569882529},{"_id":"public/tags/工具类/index.html","hash":"a0af9d61405b1faef4096367e8b04352fbc116d4","modified":1594569882529},{"_id":"public/tags/gulp/index.html","hash":"64009dd71a12f1cc0966e10c62bd9dc7f8f5b0a7","modified":1594569882529},{"_id":"public/tags/代理/index.html","hash":"fa66c13815193af3990286db93193e7f55825c18","modified":1594569882529},{"_id":"public/favicon.png","hash":"03602fcd3293db28e0d12cdf3948d854048e99dd","modified":1594569882538},{"_id":"public/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1594569882538},{"_id":"public/medias/banner/6.jpg","hash":"3219ce162c29f3849a24c0a329a3e0e303bbec26","modified":1594569882538},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1594569882538},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1594569882538},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1594569882538},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1594569882538},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1594569882538},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1594569882538},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1594569882539},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1594569882539},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1594569882539},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1594569882539},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1594569882539},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1594569882539},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1594569882539},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1594569882539},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1594569882539},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1594569882539},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1594569882539},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1594569882539},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1594569882539},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1594569882539},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1594569882539},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1594569882539},{"_id":"public/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"540e43aea993ada0c9b4b50ae5843494d8b7cc28","modified":1594569882539},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1594569882540},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1594569882540},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1594569882541},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1594569882541},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1594569882541},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1594569882541},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1594569882541},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1594569882541},{"_id":"public/live2dw/assets/Epsilon2.1.model.json","hash":"a47e7d1fd76d5a90d383fa049295c1cdd1546845","modified":1594569882541},{"_id":"public/live2dw/assets/Epsilon2.1.physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"fb553024b5a62d0a54ba32c40b5d12598dc434e7","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"02d1ac5b6d9019a1ee89b9d4d82894458deae35d","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"05dccc2eab9b9d019af1a9cc6f748276376dd828","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f05.exp.json","hash":"b53d5e42ca3105b19e5fe5fbf7fe4a6b4ced61f2","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f06.exp.json","hash":"0a7f5b3ac25b13d8688b1f529f3279a8342e3c75","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f08.exp.json","hash":"1dbb31e341c9fcc59475bd2594d60648c0c3e51c","modified":1594569882541},{"_id":"public/live2dw/assets/exp/f07.exp.json","hash":"d501ae71f1e36ff7e7834422900c0e84b8de8f28","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_01.mtn","hash":"eecc2854bea6bf90c9f0a0013281ec600c32f2bc","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_idle_01.mtn","hash":"b4e67d3091aba34efcf9ff3659fa36f6f1a4bd22","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_02.mtn","hash":"7a000a218b098172eeeb8a81e551d558bbaa6f8a","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_03.mtn","hash":"3568fc9f7ba95f2521abec8e1241da62581ab7cf","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_04.mtn","hash":"b717b620d044859762716d104e137dc9c09c8cce","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_05.mtn","hash":"f3a671a29f5d831f04284a8d5fe5adb90cd1e400","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_06.mtn","hash":"fec328bedb7d5af53e0cfd0eb5991f4574c3676a","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_07.mtn","hash":"2fd581bfc662b050c41afb904b9ae54b59d7d010","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_08.mtn","hash":"e61753f72a1c170926c59c71490596aaeee30ca6","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_01.mtn","hash":"d72c01b4d9c4faf0f4cb472c390a35712b2ee7f5","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_02.mtn","hash":"08f6d29160ce7100441efdd8ac7bbd89fc9c5120","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_03.mtn","hash":"55c11be6e505791de438c43ad25c31409713544a","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_04.mtn","hash":"42ae0fbe437cd97c623c09bee100c3695abb30ce","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_m_sp_05.mtn","hash":"9eb78800c41148712ac30e1342f025110db0f8d3","modified":1594569882542},{"_id":"public/live2dw/assets/mtn/Epsilon2.1_shake_01.mtn","hash":"8f81d974ada9b6800fa6eb852a41906a9e1f4c77","modified":1594569882542},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1594569882542},{"_id":"public/css/prism-tomorrow.css","hash":"2eb468e82b669045d37cb6b503af97dabc0a9eb2","modified":1594569882542},{"_id":"public/medias/avatar.jpg","hash":"96d1766488b7c03cf50f5d61b1a68b66db3865cf","modified":1594569882549},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1594569882550},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1594569882555},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1594569882555},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1594569882555},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1594569882556},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1594569882556},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1594569882556},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1594569882556},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1594569882556},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1594569882556},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1594569882556},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1594569882556},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1594569882556},{"_id":"public/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1594569882556},{"_id":"public/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1594569882556},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1594569882557},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1594569882557},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1594569882557},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1594569882557},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1594569882557},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1594569882557},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1594569882557},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1594569882557},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1594569882557},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1594569882557},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1594569882558},{"_id":"public/live2dw/assets/moc/Epsilon2.1.moc","hash":"2148649bde741b6e1557c0ea3c076e5ce5a23632","modified":1594569882558},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1594569882558},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1594569882565},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1594569882565},{"_id":"public/js/matery.js","hash":"8f4da1e5e6223f3e4a693ba46797f3c570627d24","modified":1594569882570},{"_id":"public/css/custom.css","hash":"8cf75bac824791d1d40e873c688b8b0973eab49f","modified":1594569882570},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1594569882570},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1594569882570},{"_id":"public/js/search.js","hash":"150437c526520b8243d25a6fff635f9921939acc","modified":1594569882570},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1594569882570},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1594569882570},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1594569882570},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1594569882570},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1594569882570},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1594569882570},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1594569882570},{"_id":"public/libs/valine/custom.css","hash":"c8a1aa79ec633d90d019e3e52eca76e24e3935a3","modified":1594569882570},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1594569882570},{"_id":"public/css/matery.css","hash":"469c737b9da2240b771857abafb43e5328bfda61","modified":1594569882570},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1594569882570},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1594569882571},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1594569882571},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1594569882571},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1594569882571},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1594569882571},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1594569882571},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1594569882571},{"_id":"public/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1594569882571},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1594569882571},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1594569882571},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1594569882571},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1594569882571},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1594569882571},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1594569882571},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1594569882572},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1594569882572},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1594569882572},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1594569882572},{"_id":"public/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1594569882572},{"_id":"public/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1594569882572},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1594569882572},{"_id":"public/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1594569882572},{"_id":"public/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1594569882572},{"_id":"public/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1594569882572},{"_id":"public/medias/reward/alipay.jpg","hash":"c16506d84ede6121e38d1d0f32e552867c4d695c","modified":1594569882572},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1594569882573},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1594569882573},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1594569882573},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1594569882578},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1594569882583},{"_id":"public/medias/reward/wechat.jpg","hash":"676c5d20578d95902e76198e5445bf188ef41907","modified":1594569882588},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"757d54367f0df16a783769eec0ba974f42bd7dce","modified":1594569882593},{"_id":"public/live2dw/assets/moc/Epsilon2.1.2048/texture_00.png","hash":"5a245b4c78e6ebaad4d50e47361d1fada208ae5f","modified":1594569882594},{"_id":"public/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1594569882597},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1594569882597},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1594569882600}],"Category":[{"name":"编程","_id":"ckcj9qif000040ohy0zm3tx4e"}],"Data":[{"_id":"musics","data":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}],"Page":[{"title":"首页","date":"2019-02-22T07:09:35.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 首页\ndate: 2019-02-22 15:09:35\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-05-18T06:08:34.685Z","path":"about/index.html","comments":1,"_id":"ckcj9qiev00000ohywqrmj1xz","content":"","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":""},{"title":"coding","date":"2019-02-22T09:35:49.000Z","type":"coding","layout":"coding","_content":"","source":"coding/index.md","raw":"---\ntitle: coding\ndate: 2019-02-22 17:35:49\ntype: \"coding\"\nlayout: \"coding\"\n---\n","updated":"2020-05-18T06:08:34.685Z","path":"coding/index.html","comments":1,"_id":"ckcj9qiez00020ohyyjl3dkel","content":"","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-02-22T07:01:57.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-02-22 15:01:57\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-05-18T06:08:34.685Z","path":"categories/index.html","comments":1,"_id":"ckcj9qig4001x0ohydmk4p6si","content":"","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-22T07:07:17.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-22 15:07:17\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-05-18T06:08:34.685Z","path":"tags/index.html","comments":1,"_id":"ckcj9qig4001y0ohyk9zp0z4o","content":"","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"Github actions 部署vue项目","_content":"\n### 关于 actions\nactions是个什么东西呢，其实他就是github的CI/CD工具，如果你用过gitlab的runner那你对CI/CD这个概念肯定不会陌生。\n\n如果你对CI/CD没啥概念，那我推荐你百度一下有个大概的了解就行。\n\nworkflow相当于gitlab里的gitlabl-ci.yml都是定义了一个自动化的流程，在这个流程里我们可以在允许的范围内为所欲为。\n\n###workflow 语法介绍\n语法介绍推荐看[官方文档](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file)或者[阮一峰老师的博客](http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html)\n\n###如何部署\n\n废话不多说，我们直接进入正题，如何使用actions部署vue项目。\n\n\n###创建一个vue项目\n我们这使用vue-cli直接生成一个项目。打开控制台，输入以下命令：\n\n```\ncli(2.9版本)\nvue init webpack github-action-demo\n\ncli(3.0版本)\nvue create github-action-demo\n```\n\n然后vue就会让我们选预设，这里我们就直接选DEFAULT，回车走起。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/cli.png)\n\n然后就进入了安装过程，巴拉巴拉吧。。。。。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/running.png)\n\n终于完成了\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/success.png)\n\n\n\n### 修改package.json文件\n\n我们需要在文件中新加一行\n\n```\n\"homepage\":\"https://[用户名].github.io/[项目名]\"\n```\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/home.png)\n\n### 上传代码\n完成以上步骤后，我们再通过以下步骤上传一下代码。\n\n登入我们的Github账号\n让我们新建一个Repo\n接着一顿操作上传代码\n\n```\n git init\n git add .\n git commit -m \"提交信息\"\n git remote add orgin [仓地址]\n git push -u origin master\n```\n\n### 准备工作\n\n1.我们需要申请一个 private token\n\n 首先点击我们的小头像，然后点击 Setting。\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/1.png)\n \n 接着在左侧列表中选择 Developer setttings。\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/2.png)\n \n 然后在左侧列表中选择 Personal access tokens\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/3.png)\n \n 最后我们点击 Generate new token按钮，选择好权限，生成一个新的token，记下生成的token，一会我们还需要用到。\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/4.png)\n \n2.我们直接将token明文写在yml中实在是一种缺心眼的行为，所以我们这选择将token保存在secret中。\n\n回到我们刚新建的repo中\n\n点击Settings,再点击左侧的Secrets按钮，点击Add a new secret按钮，自己起个Secret名称（我这就叫ACCESS_TOKEN了）并填入刚申请的token值，点击Add secret按钮。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/5.png)\n\n\n###编写yml文件\n进入Actions页面，可以看到github给我们预设了很多模板，我们这里先不管这些，点击 Set up a workflow yourself\n\n（我这里已经新建过了，所以你可以照看页面提示操作）\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/6.png)\n\n现在让我们开始编写yml文件吧，输入以下内容，并给yml文件换个名字，我们就叫 main.yml\n\n```$xslt\nname: buildAndDeploy\non:\n  push\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: checkout\n      uses: actions/checkout@master\n\n    - name: buildAndDeploy\n      uses: JamesIves/github-pages-deploy-action@master\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        BRANCH: gh-pages\n        FOLDER: dist\n        BUILD_SCRIPT: npm install && npm run build\n```\n\n注：ACCESS_TOKEN 就是在新建的token上的命名的，也就是如下图\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/7.png)\n\n点击 Start commit按钮，接着点击 Commit new file按钮。\n\n回到repo主页，我们可以看到action已经跑起来啦。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/8.png)\n\n点击Details可以查看详情。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/9.png)\n\n###开启github pages\n进入repo的Settings界面\n\n找到GitHub Pages设置，Source选择我们在yml文件中指定的那个分支，设置完成后可以看到一行蓝色的提示：Your site is ready to be published at xxxxxx\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/0.png)\n\n-----最后我们访问 https://[用户名].github.io/[项目名] 就可以看到自己的网站啦。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/10.png)","source":"_posts/actions.md","raw":"---\ntitle: Github actions 部署vue项目\ntags:  [github,node,vue]\ncategories: 编程\n---\n\n### 关于 actions\nactions是个什么东西呢，其实他就是github的CI/CD工具，如果你用过gitlab的runner那你对CI/CD这个概念肯定不会陌生。\n\n如果你对CI/CD没啥概念，那我推荐你百度一下有个大概的了解就行。\n\nworkflow相当于gitlab里的gitlabl-ci.yml都是定义了一个自动化的流程，在这个流程里我们可以在允许的范围内为所欲为。\n\n###workflow 语法介绍\n语法介绍推荐看[官方文档](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file)或者[阮一峰老师的博客](http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html)\n\n###如何部署\n\n废话不多说，我们直接进入正题，如何使用actions部署vue项目。\n\n\n###创建一个vue项目\n我们这使用vue-cli直接生成一个项目。打开控制台，输入以下命令：\n\n```\ncli(2.9版本)\nvue init webpack github-action-demo\n\ncli(3.0版本)\nvue create github-action-demo\n```\n\n然后vue就会让我们选预设，这里我们就直接选DEFAULT，回车走起。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/cli.png)\n\n然后就进入了安装过程，巴拉巴拉吧。。。。。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/running.png)\n\n终于完成了\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/success.png)\n\n\n\n### 修改package.json文件\n\n我们需要在文件中新加一行\n\n```\n\"homepage\":\"https://[用户名].github.io/[项目名]\"\n```\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/home.png)\n\n### 上传代码\n完成以上步骤后，我们再通过以下步骤上传一下代码。\n\n登入我们的Github账号\n让我们新建一个Repo\n接着一顿操作上传代码\n\n```\n git init\n git add .\n git commit -m \"提交信息\"\n git remote add orgin [仓地址]\n git push -u origin master\n```\n\n### 准备工作\n\n1.我们需要申请一个 private token\n\n 首先点击我们的小头像，然后点击 Setting。\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/1.png)\n \n 接着在左侧列表中选择 Developer setttings。\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/2.png)\n \n 然后在左侧列表中选择 Personal access tokens\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/3.png)\n \n 最后我们点击 Generate new token按钮，选择好权限，生成一个新的token，记下生成的token，一会我们还需要用到。\n \n ![图片预览](http://q9a56mzr3.bkt.clouddn.com/4.png)\n \n2.我们直接将token明文写在yml中实在是一种缺心眼的行为，所以我们这选择将token保存在secret中。\n\n回到我们刚新建的repo中\n\n点击Settings,再点击左侧的Secrets按钮，点击Add a new secret按钮，自己起个Secret名称（我这就叫ACCESS_TOKEN了）并填入刚申请的token值，点击Add secret按钮。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/5.png)\n\n\n###编写yml文件\n进入Actions页面，可以看到github给我们预设了很多模板，我们这里先不管这些，点击 Set up a workflow yourself\n\n（我这里已经新建过了，所以你可以照看页面提示操作）\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/6.png)\n\n现在让我们开始编写yml文件吧，输入以下内容，并给yml文件换个名字，我们就叫 main.yml\n\n```$xslt\nname: buildAndDeploy\non:\n  push\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: checkout\n      uses: actions/checkout@master\n\n    - name: buildAndDeploy\n      uses: JamesIves/github-pages-deploy-action@master\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        BRANCH: gh-pages\n        FOLDER: dist\n        BUILD_SCRIPT: npm install && npm run build\n```\n\n注：ACCESS_TOKEN 就是在新建的token上的命名的，也就是如下图\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/7.png)\n\n点击 Start commit按钮，接着点击 Commit new file按钮。\n\n回到repo主页，我们可以看到action已经跑起来啦。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/8.png)\n\n点击Details可以查看详情。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/9.png)\n\n###开启github pages\n进入repo的Settings界面\n\n找到GitHub Pages设置，Source选择我们在yml文件中指定的那个分支，设置完成后可以看到一行蓝色的提示：Your site is ready to be published at xxxxxx\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/0.png)\n\n-----最后我们访问 https://[用户名].github.io/[项目名] 就可以看到自己的网站啦。\n\n![图片预览](http://q9a56mzr3.bkt.clouddn.com/10.png)","slug":"actions","published":1,"date":"2020-05-19T07:01:06.436Z","updated":"2020-05-19T07:01:06.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qiew00010ohywhap5ljy","content":"<h3 id=\"关于-actions\"><a href=\"#关于-actions\" class=\"headerlink\" title=\"关于 actions\"></a>关于 actions</h3><p>actions是个什么东西呢，其实他就是github的CI/CD工具，如果你用过gitlab的runner那你对CI/CD这个概念肯定不会陌生。</p>\n<p>如果你对CI/CD没啥概念，那我推荐你百度一下有个大概的了解就行。</p>\n<p>workflow相当于gitlab里的gitlabl-ci.yml都是定义了一个自动化的流程，在这个流程里我们可以在允许的范围内为所欲为。</p>\n<p>###workflow 语法介绍<br>语法介绍推荐看<a href=\"https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file\" target=\"_blank\" rel=\"noopener\">官方文档</a>或者<a href=\"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\" target=\"_blank\" rel=\"noopener\">阮一峰老师的博客</a></p>\n<p>###如何部署</p>\n<p>废话不多说，我们直接进入正题，如何使用actions部署vue项目。</p>\n<p>###创建一个vue项目<br>我们这使用vue-cli直接生成一个项目。打开控制台，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cli(2.9版本)</span><br><span class=\"line\">vue init webpack github-action-demo</span><br><span class=\"line\"></span><br><span class=\"line\">cli(3.0版本)</span><br><span class=\"line\">vue create github-action-demo</span><br></pre></td></tr></table></figure>\n<p>然后vue就会让我们选预设，这里我们就直接选DEFAULT，回车走起。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/cli.png\" alt=\"图片预览\"></p>\n<p>然后就进入了安装过程，巴拉巴拉吧。。。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/running.png\" alt=\"图片预览\"></p>\n<p>终于完成了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/success.png\" alt=\"图片预览\"></p>\n<h3 id=\"修改package-json文件\"><a href=\"#修改package-json文件\" class=\"headerlink\" title=\"修改package.json文件\"></a>修改package.json文件</h3><p>我们需要在文件中新加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;homepage&quot;:&quot;https://[用户名].github.io/[项目名]&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/home.png\" alt=\"图片预览\"></p>\n<h3 id=\"上传代码\"><a href=\"#上传代码\" class=\"headerlink\" title=\"上传代码\"></a>上传代码</h3><p>完成以上步骤后，我们再通过以下步骤上传一下代码。</p>\n<p>登入我们的Github账号<br>让我们新建一个Repo<br>接着一顿操作上传代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;提交信息&quot;</span><br><span class=\"line\">git remote add orgin [仓地址]</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>1.我们需要申请一个 private token</p>\n<p> 首先点击我们的小头像，然后点击 Setting。</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/1.png\" alt=\"图片预览\"></p>\n<p> 接着在左侧列表中选择 Developer setttings。</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/2.png\" alt=\"图片预览\"></p>\n<p> 然后在左侧列表中选择 Personal access tokens</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/3.png\" alt=\"图片预览\"></p>\n<p> 最后我们点击 Generate new token按钮，选择好权限，生成一个新的token，记下生成的token，一会我们还需要用到。</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/4.png\" alt=\"图片预览\"></p>\n<p>2.我们直接将token明文写在yml中实在是一种缺心眼的行为，所以我们这选择将token保存在secret中。</p>\n<p>回到我们刚新建的repo中</p>\n<p>点击Settings,再点击左侧的Secrets按钮，点击Add a new secret按钮，自己起个Secret名称（我这就叫ACCESS_TOKEN了）并填入刚申请的token值，点击Add secret按钮。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/5.png\" alt=\"图片预览\"></p>\n<p>###编写yml文件<br>进入Actions页面，可以看到github给我们预设了很多模板，我们这里先不管这些，点击 Set up a workflow yourself</p>\n<p>（我这里已经新建过了，所以你可以照看页面提示操作）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/6.png\" alt=\"图片预览\"></p>\n<p>现在让我们开始编写yml文件吧，输入以下内容，并给yml文件换个名字，我们就叫 main.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: buildAndDeploy</span><br><span class=\"line\">on:</span><br><span class=\"line\">  push</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build-and-deploy:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - name: checkout</span><br><span class=\"line\">      uses: actions/checkout@master</span><br><span class=\"line\"></span><br><span class=\"line\">    - name: buildAndDeploy</span><br><span class=\"line\">      uses: JamesIves/github-pages-deploy-action@master</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class=\"line\">        BRANCH: gh-pages</span><br><span class=\"line\">        FOLDER: dist</span><br><span class=\"line\">        BUILD_SCRIPT: npm install &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>\n<p>注：ACCESS_TOKEN 就是在新建的token上的命名的，也就是如下图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/7.png\" alt=\"图片预览\"></p>\n<p>点击 Start commit按钮，接着点击 Commit new file按钮。</p>\n<p>回到repo主页，我们可以看到action已经跑起来啦。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/8.png\" alt=\"图片预览\"></p>\n<p>点击Details可以查看详情。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/9.png\" alt=\"图片预览\"></p>\n<p>###开启github pages<br>进入repo的Settings界面</p>\n<p>找到GitHub Pages设置，Source选择我们在yml文件中指定的那个分支，设置完成后可以看到一行蓝色的提示：Your site is ready to be published at xxxxxx</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/0.png\" alt=\"图片预览\"></p>\n<p>—–最后我们访问 https://[用户名].github.io/[项目名] 就可以看到自己的网站啦。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/10.png\" alt=\"图片预览\"></p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<h3 id=\"关于-actions\"><a href=\"#关于-actions\" class=\"headerlink\" title=\"关于 actions\"></a>关于 actions</h3><p>actions是个什么东西呢，其实他就是github的CI/CD工具，如果你用过gitlab的runner那你对CI/CD这个概念肯定不会陌生。</p>\n<p>如果你对CI/CD没啥概念，那我推荐你百度一下有个大概的了解就行。</p>\n<p>workflow相当于gitlab里的gitlabl-ci.yml都是定义了一个自动化的流程，在这个流程里我们可以在允许的范围内为所欲为。</p>\n<p>###workflow 语法介绍<br>语法介绍推荐看<a href=\"https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file\" target=\"_blank\" rel=\"noopener\">官方文档</a>或者<a href=\"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\" target=\"_blank\" rel=\"noopener\">阮一峰老师的博客</a></p>\n<p>###如何部署</p>\n<p>废话不多说，我们直接进入正题，如何使用actions部署vue项目。</p>\n<p>###创建一个vue项目<br>我们这使用vue-cli直接生成一个项目。打开控制台，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cli(2.9版本)</span><br><span class=\"line\">vue init webpack github-action-demo</span><br><span class=\"line\"></span><br><span class=\"line\">cli(3.0版本)</span><br><span class=\"line\">vue create github-action-demo</span><br></pre></td></tr></table></figure>\n<p>然后vue就会让我们选预设，这里我们就直接选DEFAULT，回车走起。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/cli.png\" alt=\"图片预览\"></p>\n<p>然后就进入了安装过程，巴拉巴拉吧。。。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/running.png\" alt=\"图片预览\"></p>\n<p>终于完成了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/success.png\" alt=\"图片预览\"></p>\n<h3 id=\"修改package-json文件\"><a href=\"#修改package-json文件\" class=\"headerlink\" title=\"修改package.json文件\"></a>修改package.json文件</h3><p>我们需要在文件中新加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;homepage&quot;:&quot;https://[用户名].github.io/[项目名]&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/home.png\" alt=\"图片预览\"></p>\n<h3 id=\"上传代码\"><a href=\"#上传代码\" class=\"headerlink\" title=\"上传代码\"></a>上传代码</h3><p>完成以上步骤后，我们再通过以下步骤上传一下代码。</p>\n<p>登入我们的Github账号<br>让我们新建一个Repo<br>接着一顿操作上传代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;提交信息&quot;</span><br><span class=\"line\">git remote add orgin [仓地址]</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>1.我们需要申请一个 private token</p>\n<p> 首先点击我们的小头像，然后点击 Setting。</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/1.png\" alt=\"图片预览\"></p>\n<p> 接着在左侧列表中选择 Developer setttings。</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/2.png\" alt=\"图片预览\"></p>\n<p> 然后在左侧列表中选择 Personal access tokens</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/3.png\" alt=\"图片预览\"></p>\n<p> 最后我们点击 Generate new token按钮，选择好权限，生成一个新的token，记下生成的token，一会我们还需要用到。</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/4.png\" alt=\"图片预览\"></p>\n<p>2.我们直接将token明文写在yml中实在是一种缺心眼的行为，所以我们这选择将token保存在secret中。</p>\n<p>回到我们刚新建的repo中</p>\n<p>点击Settings,再点击左侧的Secrets按钮，点击Add a new secret按钮，自己起个Secret名称（我这就叫ACCESS_TOKEN了）并填入刚申请的token值，点击Add secret按钮。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/5.png\" alt=\"图片预览\"></p>\n<p>###编写yml文件<br>进入Actions页面，可以看到github给我们预设了很多模板，我们这里先不管这些，点击 Set up a workflow yourself</p>\n<p>（我这里已经新建过了，所以你可以照看页面提示操作）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/6.png\" alt=\"图片预览\"></p>\n<p>现在让我们开始编写yml文件吧，输入以下内容，并给yml文件换个名字，我们就叫 main.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: buildAndDeploy</span><br><span class=\"line\">on:</span><br><span class=\"line\">  push</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build-and-deploy:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - name: checkout</span><br><span class=\"line\">      uses: actions/checkout@master</span><br><span class=\"line\"></span><br><span class=\"line\">    - name: buildAndDeploy</span><br><span class=\"line\">      uses: JamesIves/github-pages-deploy-action@master</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class=\"line\">        BRANCH: gh-pages</span><br><span class=\"line\">        FOLDER: dist</span><br><span class=\"line\">        BUILD_SCRIPT: npm install &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>\n<p>注：ACCESS_TOKEN 就是在新建的token上的命名的，也就是如下图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/7.png\" alt=\"图片预览\"></p>\n<p>点击 Start commit按钮，接着点击 Commit new file按钮。</p>\n<p>回到repo主页，我们可以看到action已经跑起来啦。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/8.png\" alt=\"图片预览\"></p>\n<p>点击Details可以查看详情。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/9.png\" alt=\"图片预览\"></p>\n<p>###开启github pages<br>进入repo的Settings界面</p>\n<p>找到GitHub Pages设置，Source选择我们在yml文件中指定的那个分支，设置完成后可以看到一行蓝色的提示：Your site is ready to be published at xxxxxx</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/0.png\" alt=\"图片预览\"></p>\n<p>—–最后我们访问 https://[用户名].github.io/[项目名] 就可以看到自己的网站啦。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"http://q9a56mzr3.bkt.clouddn.com/10.png\" alt=\"图片预览\"></p>\n"},{"title":"javascript中call、bind、apply你知多少？","_content":"\n\n\n@[TOC](javascript中call、bind、apply你知多少？)\n\n> 在我们日常开发过程中，js基础是用的最多的，也许很多人觉得熟悉框架就好了，不需要太深入原生js的原理及实现，其实这是一种舍本逐末的行为。。。很长一段时间，我的文章方向会在js基础上~\n\n> 在我们日常开发过程中call、bind、apply无疑是我们用的比较多的语法,今天在开发中看到有同事傻傻分不清call和bind的区别,故在解释一通之后，写下此文；\n\n### 首先查看文档理解含义\n#### call()\n从[MDN 文档 call](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)我们可以了解到:\ncall() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。\n* fun.call(thisArg, arg1, arg2, ...)\n* thisArg 在 *`fun`* 函数运行时指定的 `this` 值*。*需要注意的是，指定的 `this` 值并不一定是该函数执行时真正的 `this` 值，如果这个函数在[`非严格模式`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode \"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\")下运行，则指定为 [`null`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null \"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\") 和 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined \"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\")的 `this` 值会自动指向全局对象（浏览器中就是 window 对象），同时值为原始值（数字，字符串，布尔值）的 `this` 会指向该原始值的自动包装对象。（ps:严格模式下 我们对函数的的调用必须严格的写出被调用的函数的对象）；\n* arg1, arg2, ... 指定的参数列表\n\n先举个例子:\n```javaScript\n// main.js\n  const foo={\n      name:'foo',\n      getFoo(...args){\n        console.log('this===',this,'this.name==',this.name)\n        console.log('-----------------------------------')\n        console.log('...args=====',...args)\n      }\n    }\n    const bar={\n      name:'bar',\n      getBar(...args){\n        console.log('this===',this,'this.name==',this.name)\n        console.log('-----------------------------------')\n        console.log('...args=====',...args)\n      }\n    }\n    foo.getFoo() //this=== {name: \"foo\", getFoo: ƒ} this.name== foo  ----------------------------------- ...args=====\n    bar.getBar() //this=== {name: \"bar\", getBar: ƒ} this.name== bar  ----------------------------------- ...args=====\n\n```\n假如我们想在getFoo去借bar里面的东西用用，该怎么办呢?\n也许有同学想到的是这样:\n```javaScript\n    foo.getFoo(bar.name) // this=== {name: \"foo\", getFoo: ƒ} this.name== foo -----------------------------------  ...args===== bar\n\n```\n毫无疑问，这是没问题的，但此时只是正常的传参，能否干脆点把this.name也改成bar呢；根据call的定义:\n```\nfoo.getFoo.call(bar,'测试传参','测试call') //his=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试call\n//使用call后，我们可以看到foo.getFoo的this此时指向了bar对象，此时的name拿到的bar的对象的name；\n```\n#### apply()\n从[MDN 文档 apply](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)我们可以了解到:\n**`apply()`** 方法调用一个具有给定`this`值的函数，以及作为一个数组（或[类似数组对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects)）提供的参数。\n\n* func.apply(thisArg, [argsArray])\n* thisArg：可选的。在 *`func`* 函数运行时使用的 `this` 值。请注意，`this`可能不是该方法看到的实际值：如果这个函数处于[非严格模式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode \"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\")下，则指定为 `null` 或 `undefined` 时会自动替换为指向全局对象，原始值会被包装。\n\n* argsArray：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 `func` 函数。如果该参数的值为 [`null`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null \"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\") 或  [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined \"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\")，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。 [浏览器兼容性](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Browser_compatibility) 请参阅本文底部内容。\n\n继续使用刚才的foo和bar\n```javaScript\nfoo.getFoo.apply(bar,['测试传参','测试apply']) //his=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试apply\n\n```\n\n总结 **call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。**\n\n#### bind()\n从[MDN 文档 bind](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)我们可以了解到:\n\nbind()方法创建一个新的函数，在调用时设置this关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。\n* function.bind(thisArg[, arg1[, arg2[, ...]]])\n* thisArg 调用绑定函数时作为`this`参数传递给目标函数的值。 如果使用[`new`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new \"new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\")运算符构造绑定函数，则忽略该值。当使用`bind`在`setTimeout`中创建一个函数（作为回调提供）时，作为`thisArg`传递的任何原始值都将转换为`object`。如果`bind`函数的参数列表为空，执行作用域的`this`将被视为新函数的`thisArg`。\n\n* arg1, arg2, ... 当目标函数被调用时，预先添加到绑定函数的参数列表中的参数。\n\nemmmm...继续最最上面的那个foo和bar\n\n```javascript\nfoo.getFoo.bind(bar,'测试传参','测试bind') // 此时是无输出，因为bind()方法创建一个新的函数，当前函数并没有执行\n\n\n```\n修改如下：\n```javascript\nconst foobindbar = foo.getFoo.bind(bar,'测试传参','测试bind');\n\nconsole.log(foobindbar)\n    // ƒ getFoo(...args){\n    //   console.log('this===',this,'this.name==',this.name)\n    //   console.log('-----------------------------------')\n    //   console.log('...args=====',...args)\n    // }\n\nfoobindbar() //this=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试apply\n\n\n```\n### 总结\n#### call和apply的区别\ncall方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。用apply时，即使传入的参数只有一个，也必须定义为数组才行；\n\n#### call与apply 和 bind的区别\n\ncall与apply改变this的指向时，会直接触发函数;而bind会创建一个新的函数，在调用时设置this关键字为提供的值，使用bind时，会优先使用bind绑定的几个值；\n如下：\n```\nfoo.getFoo.bind(bar,'测试传参','测试bind')\nconst foobindbar = foo.getFoo.bind(bar,'测试传参','测试bind');\n\nconsole.log(foobindbar)\n    // ƒ getFoo(...args){\n    //   console.log('this===',this,'this.name==',this.name)\n    //   console.log('-----------------------------------')\n    //   console.log('...args=====',...args)\n    // }\n\nfoobindbar('参数1', '参数2') //this=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args=====  测试传参 测试apply 参数1 参数2\n// ...args=====  测试传参 测试apply 参数1 参数2\n\n```\n","source":"_posts/codding-20190624.md","raw":"---\ntitle: javascript中call、bind、apply你知多少？\ntags: javaScript\ncategories: 编程\n---\n\n\n\n@[TOC](javascript中call、bind、apply你知多少？)\n\n> 在我们日常开发过程中，js基础是用的最多的，也许很多人觉得熟悉框架就好了，不需要太深入原生js的原理及实现，其实这是一种舍本逐末的行为。。。很长一段时间，我的文章方向会在js基础上~\n\n> 在我们日常开发过程中call、bind、apply无疑是我们用的比较多的语法,今天在开发中看到有同事傻傻分不清call和bind的区别,故在解释一通之后，写下此文；\n\n### 首先查看文档理解含义\n#### call()\n从[MDN 文档 call](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)我们可以了解到:\ncall() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。\n* fun.call(thisArg, arg1, arg2, ...)\n* thisArg 在 *`fun`* 函数运行时指定的 `this` 值*。*需要注意的是，指定的 `this` 值并不一定是该函数执行时真正的 `this` 值，如果这个函数在[`非严格模式`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode \"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\")下运行，则指定为 [`null`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null \"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\") 和 [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined \"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\")的 `this` 值会自动指向全局对象（浏览器中就是 window 对象），同时值为原始值（数字，字符串，布尔值）的 `this` 会指向该原始值的自动包装对象。（ps:严格模式下 我们对函数的的调用必须严格的写出被调用的函数的对象）；\n* arg1, arg2, ... 指定的参数列表\n\n先举个例子:\n```javaScript\n// main.js\n  const foo={\n      name:'foo',\n      getFoo(...args){\n        console.log('this===',this,'this.name==',this.name)\n        console.log('-----------------------------------')\n        console.log('...args=====',...args)\n      }\n    }\n    const bar={\n      name:'bar',\n      getBar(...args){\n        console.log('this===',this,'this.name==',this.name)\n        console.log('-----------------------------------')\n        console.log('...args=====',...args)\n      }\n    }\n    foo.getFoo() //this=== {name: \"foo\", getFoo: ƒ} this.name== foo  ----------------------------------- ...args=====\n    bar.getBar() //this=== {name: \"bar\", getBar: ƒ} this.name== bar  ----------------------------------- ...args=====\n\n```\n假如我们想在getFoo去借bar里面的东西用用，该怎么办呢?\n也许有同学想到的是这样:\n```javaScript\n    foo.getFoo(bar.name) // this=== {name: \"foo\", getFoo: ƒ} this.name== foo -----------------------------------  ...args===== bar\n\n```\n毫无疑问，这是没问题的，但此时只是正常的传参，能否干脆点把this.name也改成bar呢；根据call的定义:\n```\nfoo.getFoo.call(bar,'测试传参','测试call') //his=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试call\n//使用call后，我们可以看到foo.getFoo的this此时指向了bar对象，此时的name拿到的bar的对象的name；\n```\n#### apply()\n从[MDN 文档 apply](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)我们可以了解到:\n**`apply()`** 方法调用一个具有给定`this`值的函数，以及作为一个数组（或[类似数组对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects)）提供的参数。\n\n* func.apply(thisArg, [argsArray])\n* thisArg：可选的。在 *`func`* 函数运行时使用的 `this` 值。请注意，`this`可能不是该方法看到的实际值：如果这个函数处于[非严格模式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode \"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\")下，则指定为 `null` 或 `undefined` 时会自动替换为指向全局对象，原始值会被包装。\n\n* argsArray：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 `func` 函数。如果该参数的值为 [`null`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null \"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\") 或  [`undefined`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined \"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\")，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。 [浏览器兼容性](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Browser_compatibility) 请参阅本文底部内容。\n\n继续使用刚才的foo和bar\n```javaScript\nfoo.getFoo.apply(bar,['测试传参','测试apply']) //his=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试apply\n\n```\n\n总结 **call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。**\n\n#### bind()\n从[MDN 文档 bind](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)我们可以了解到:\n\nbind()方法创建一个新的函数，在调用时设置this关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。\n* function.bind(thisArg[, arg1[, arg2[, ...]]])\n* thisArg 调用绑定函数时作为`this`参数传递给目标函数的值。 如果使用[`new`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new \"new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\")运算符构造绑定函数，则忽略该值。当使用`bind`在`setTimeout`中创建一个函数（作为回调提供）时，作为`thisArg`传递的任何原始值都将转换为`object`。如果`bind`函数的参数列表为空，执行作用域的`this`将被视为新函数的`thisArg`。\n\n* arg1, arg2, ... 当目标函数被调用时，预先添加到绑定函数的参数列表中的参数。\n\nemmmm...继续最最上面的那个foo和bar\n\n```javascript\nfoo.getFoo.bind(bar,'测试传参','测试bind') // 此时是无输出，因为bind()方法创建一个新的函数，当前函数并没有执行\n\n\n```\n修改如下：\n```javascript\nconst foobindbar = foo.getFoo.bind(bar,'测试传参','测试bind');\n\nconsole.log(foobindbar)\n    // ƒ getFoo(...args){\n    //   console.log('this===',this,'this.name==',this.name)\n    //   console.log('-----------------------------------')\n    //   console.log('...args=====',...args)\n    // }\n\nfoobindbar() //this=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args===== 测试传参 测试apply\n\n\n```\n### 总结\n#### call和apply的区别\ncall方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。用apply时，即使传入的参数只有一个，也必须定义为数组才行；\n\n#### call与apply 和 bind的区别\n\ncall与apply改变this的指向时，会直接触发函数;而bind会创建一个新的函数，在调用时设置this关键字为提供的值，使用bind时，会优先使用bind绑定的几个值；\n如下：\n```\nfoo.getFoo.bind(bar,'测试传参','测试bind')\nconst foobindbar = foo.getFoo.bind(bar,'测试传参','测试bind');\n\nconsole.log(foobindbar)\n    // ƒ getFoo(...args){\n    //   console.log('this===',this,'this.name==',this.name)\n    //   console.log('-----------------------------------')\n    //   console.log('...args=====',...args)\n    // }\n\nfoobindbar('参数1', '参数2') //this=== {name: \"bar\", getBar: ƒ} this.name== bar ----------------------------------- ...args=====  测试传参 测试apply 参数1 参数2\n// ...args=====  测试传参 测试apply 参数1 参数2\n\n```\n","slug":"codding-20190624","published":1,"date":"2020-05-18T06:08:34.681Z","updated":"2020-05-18T06:08:34.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qiez00030ohy23by4nhl","content":"<p>@<a href=\"javascript中call、bind、apply你知多少？\">TOC</a></p>\n<blockquote>\n<p>在我们日常开发过程中，js基础是用的最多的，也许很多人觉得熟悉框架就好了，不需要太深入原生js的原理及实现，其实这是一种舍本逐末的行为。。。很长一段时间，我的文章方向会在js基础上~</p>\n</blockquote>\n<blockquote>\n<p>在我们日常开发过程中call、bind、apply无疑是我们用的比较多的语法,今天在开发中看到有同事傻傻分不清call和bind的区别,故在解释一通之后，写下此文；</p>\n</blockquote>\n<h3 id=\"首先查看文档理解含义\"><a href=\"#首先查看文档理解含义\" class=\"headerlink\" title=\"首先查看文档理解含义\"></a>首先查看文档理解含义</h3><h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">MDN 文档 call</a>我们可以了解到:<br>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。</p>\n<ul>\n<li>fun.call(thisArg, arg1, arg2, …)</li>\n<li>thisArg 在 <em><code>fun</code></em> 函数运行时指定的 <code>this</code> 值<em>。</em>需要注意的是，指定的 <code>this</code> 值并不一定是该函数执行时真正的 <code>this</code> 值，如果这个函数在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" title=\"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\" target=\"_blank\" rel=\"noopener\"><code>非严格模式</code></a>下运行，则指定为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" title=\"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\" target=\"_blank\" rel=\"noopener\"><code>null</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\" title=\"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\" target=\"_blank\" rel=\"noopener\"><code>undefined</code></a>的 <code>this</code> 值会自动指向全局对象（浏览器中就是 window 对象），同时值为原始值（数字，字符串，布尔值）的 <code>this</code> 会指向该原始值的自动包装对象。（ps:严格模式下 我们对函数的的调用必须严格的写出被调用的函数的对象）；</li>\n<li>arg1, arg2, … 指定的参数列表</li>\n</ul>\n<p>先举个例子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> foo=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">      getFoo(...args)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this==='</span>,<span class=\"keyword\">this</span>,<span class=\"string\">'this.name=='</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------------------'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'...args====='</span>,...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bar=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      getBar(...args)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this==='</span>,<span class=\"keyword\">this</span>,<span class=\"string\">'this.name=='</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------------------'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'...args====='</span>,...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    foo.getFoo() <span class=\"comment\">//this=== &#123;name: \"foo\", getFoo: ƒ&#125; this.name== foo  ----------------------------------- ...args=====</span></span><br><span class=\"line\">    bar.getBar() <span class=\"comment\">//this=== &#123;name: \"bar\", getBar: ƒ&#125; this.name== bar  ----------------------------------- ...args=====</span></span><br></pre></td></tr></table></figure></p>\n<p>假如我们想在getFoo去借bar里面的东西用用，该怎么办呢?<br>也许有同学想到的是这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo(bar.name) <span class=\"comment\">// this=== &#123;name: \"foo\", getFoo: ƒ&#125; this.name== foo -----------------------------------  ...args===== bar</span></span><br></pre></td></tr></table></figure></p>\n<p>毫无疑问，这是没问题的，但此时只是正常的传参，能否干脆点把this.name也改成bar呢；根据call的定义:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.call(bar,&apos;测试传参&apos;,&apos;测试call&apos;) //his=== &#123;name: &quot;bar&quot;, getBar: ƒ&#125; this.name== bar ----------------------------------- ...args===== 测试传参 测试call</span><br><span class=\"line\">//使用call后，我们可以看到foo.getFoo的this此时指向了bar对象，此时的name拿到的bar的对象的name；</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">MDN 文档 apply</a>我们可以了解到:<br><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects\" target=\"_blank\" rel=\"noopener\">类似数组对象</a>）提供的参数。</p>\n<ul>\n<li>func.apply(thisArg, [argsArray])</li>\n<li><p>thisArg：可选的。在 <em><code>func</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" title=\"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\" target=\"_blank\" rel=\"noopener\">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p>\n</li>\n<li><p>argsArray：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" title=\"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\" target=\"_blank\" rel=\"noopener\"><code>null</code></a> 或  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\" title=\"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\" target=\"_blank\" rel=\"noopener\"><code>undefined</code></a>，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Browser_compatibility\" target=\"_blank\" rel=\"noopener\">浏览器兼容性</a> 请参阅本文底部内容。</p>\n</li>\n</ul>\n<p>继续使用刚才的foo和bar<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.apply(bar,[<span class=\"string\">'测试传参'</span>,<span class=\"string\">'测试apply'</span>]) <span class=\"comment\">//his=== &#123;name: \"bar\", getBar: ƒ&#125; this.name== bar ----------------------------------- ...args===== 测试传参 测试apply</span></span><br></pre></td></tr></table></figure></p>\n<p>总结 <strong>call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。</strong></p>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\">MDN 文档 bind</a>我们可以了解到:</p>\n<p>bind()方法创建一个新的函数，在调用时设置this关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p>\n<ul>\n<li>function.bind(thisArg[, arg1[, arg2[, …]]])</li>\n<li><p>thisArg 调用绑定函数时作为<code>this</code>参数传递给目标函数的值。 如果使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\" title=\"new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\" target=\"_blank\" rel=\"noopener\"><code>new</code></a>运算符构造绑定函数，则忽略该值。当使用<code>bind</code>在<code>setTimeout</code>中创建一个函数（作为回调提供）时，作为<code>thisArg</code>传递的任何原始值都将转换为<code>object</code>。如果<code>bind</code>函数的参数列表为空，执行作用域的<code>this</code>将被视为新函数的<code>thisArg</code>。</p>\n</li>\n<li><p>arg1, arg2, … 当目标函数被调用时，预先添加到绑定函数的参数列表中的参数。</p>\n</li>\n</ul>\n<p>emmmm…继续最最上面的那个foo和bar</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.bind(bar,<span class=\"string\">'测试传参'</span>,<span class=\"string\">'测试bind'</span>) <span class=\"comment\">// 此时是无输出，因为bind()方法创建一个新的函数，当前函数并没有执行</span></span><br></pre></td></tr></table></figure>\n<p>修改如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foobindbar = foo.getFoo.bind(bar,<span class=\"string\">'测试传参'</span>,<span class=\"string\">'测试bind'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foobindbar)</span><br><span class=\"line\">    <span class=\"comment\">// ƒ getFoo(...args)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   console.log('this===',this,'this.name==',this.name)</span></span><br><span class=\"line\">    <span class=\"comment\">//   console.log('-----------------------------------')</span></span><br><span class=\"line\">    <span class=\"comment\">//   console.log('...args=====',...args)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">foobindbar() <span class=\"comment\">//this=== &#123;name: \"bar\", getBar: ƒ&#125; this.name== bar ----------------------------------- ...args===== 测试传参 测试apply</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"call和apply的区别\"><a href=\"#call和apply的区别\" class=\"headerlink\" title=\"call和apply的区别\"></a>call和apply的区别</h4><p>call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。用apply时，即使传入的参数只有一个，也必须定义为数组才行；</p>\n<h4 id=\"call与apply-和-bind的区别\"><a href=\"#call与apply-和-bind的区别\" class=\"headerlink\" title=\"call与apply 和 bind的区别\"></a>call与apply 和 bind的区别</h4><p>call与apply改变this的指向时，会直接触发函数;而bind会创建一个新的函数，在调用时设置this关键字为提供的值，使用bind时，会优先使用bind绑定的几个值；<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.bind(bar,&apos;测试传参&apos;,&apos;测试bind&apos;)</span><br><span class=\"line\">const foobindbar = foo.getFoo.bind(bar,&apos;测试传参&apos;,&apos;测试bind&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(foobindbar)</span><br><span class=\"line\">    // ƒ getFoo(...args)&#123;</span><br><span class=\"line\">    //   console.log(&apos;this===&apos;,this,&apos;this.name==&apos;,this.name)</span><br><span class=\"line\">    //   console.log(&apos;-----------------------------------&apos;)</span><br><span class=\"line\">    //   console.log(&apos;...args=====&apos;,...args)</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foobindbar(&apos;参数1&apos;, &apos;参数2&apos;) //this=== &#123;name: &quot;bar&quot;, getBar: ƒ&#125; this.name== bar ----------------------------------- ...args=====  测试传参 测试apply 参数1 参数2</span><br><span class=\"line\">// ...args=====  测试传参 测试apply 参数1 参数2</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"javascript中call、bind、apply你知多少？\">TOC</a></p>\n<blockquote>\n<p>在我们日常开发过程中，js基础是用的最多的，也许很多人觉得熟悉框架就好了，不需要太深入原生js的原理及实现，其实这是一种舍本逐末的行为。。。很长一段时间，我的文章方向会在js基础上~</p>\n</blockquote>\n<blockquote>\n<p>在我们日常开发过程中call、bind、apply无疑是我们用的比较多的语法,今天在开发中看到有同事傻傻分不清call和bind的区别,故在解释一通之后，写下此文；</p>\n</blockquote>\n<h3 id=\"首先查看文档理解含义\"><a href=\"#首先查看文档理解含义\" class=\"headerlink\" title=\"首先查看文档理解含义\"></a>首先查看文档理解含义</h3><h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">MDN 文档 call</a>我们可以了解到:<br>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。</p>\n<ul>\n<li>fun.call(thisArg, arg1, arg2, …)</li>\n<li>thisArg 在 <em><code>fun</code></em> 函数运行时指定的 <code>this</code> 值<em>。</em>需要注意的是，指定的 <code>this</code> 值并不一定是该函数执行时真正的 <code>this</code> 值，如果这个函数在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" title=\"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\" target=\"_blank\" rel=\"noopener\"><code>非严格模式</code></a>下运行，则指定为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" title=\"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\" target=\"_blank\" rel=\"noopener\"><code>null</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\" title=\"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\" target=\"_blank\" rel=\"noopener\"><code>undefined</code></a>的 <code>this</code> 值会自动指向全局对象（浏览器中就是 window 对象），同时值为原始值（数字，字符串，布尔值）的 <code>this</code> 会指向该原始值的自动包装对象。（ps:严格模式下 我们对函数的的调用必须严格的写出被调用的函数的对象）；</li>\n<li>arg1, arg2, … 指定的参数列表</li>\n</ul>\n<p>先举个例子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> foo=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">'foo'</span>,</span><br><span class=\"line\">      getFoo(...args)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this==='</span>,<span class=\"keyword\">this</span>,<span class=\"string\">'this.name=='</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------------------'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'...args====='</span>,...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bar=&#123;</span><br><span class=\"line\">      name:<span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      getBar(...args)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'this==='</span>,<span class=\"keyword\">this</span>,<span class=\"string\">'this.name=='</span>,<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------------------'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'...args====='</span>,...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    foo.getFoo() <span class=\"comment\">//this=== &#123;name: \"foo\", getFoo: ƒ&#125; this.name== foo  ----------------------------------- ...args=====</span></span><br><span class=\"line\">    bar.getBar() <span class=\"comment\">//this=== &#123;name: \"bar\", getBar: ƒ&#125; this.name== bar  ----------------------------------- ...args=====</span></span><br></pre></td></tr></table></figure></p>\n<p>假如我们想在getFoo去借bar里面的东西用用，该怎么办呢?<br>也许有同学想到的是这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo(bar.name) <span class=\"comment\">// this=== &#123;name: \"foo\", getFoo: ƒ&#125; this.name== foo -----------------------------------  ...args===== bar</span></span><br></pre></td></tr></table></figure></p>\n<p>毫无疑问，这是没问题的，但此时只是正常的传参，能否干脆点把this.name也改成bar呢；根据call的定义:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.call(bar,&apos;测试传参&apos;,&apos;测试call&apos;) //his=== &#123;name: &quot;bar&quot;, getBar: ƒ&#125; this.name== bar ----------------------------------- ...args===== 测试传参 测试call</span><br><span class=\"line\">//使用call后，我们可以看到foo.getFoo的this此时指向了bar对象，此时的name拿到的bar的对象的name；</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">MDN 文档 apply</a>我们可以了解到:<br><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及作为一个数组（或<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects\" target=\"_blank\" rel=\"noopener\">类似数组对象</a>）提供的参数。</p>\n<ul>\n<li>func.apply(thisArg, [argsArray])</li>\n<li><p>thisArg：可选的。在 <em><code>func</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\" title=\"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。\" target=\"_blank\" rel=\"noopener\">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p>\n</li>\n<li><p>argsArray：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" title=\"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。\" target=\"_blank\" rel=\"noopener\"><code>null</code></a> 或  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\" title=\"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。\" target=\"_blank\" rel=\"noopener\"><code>undefined</code></a>，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#Browser_compatibility\" target=\"_blank\" rel=\"noopener\">浏览器兼容性</a> 请参阅本文底部内容。</p>\n</li>\n</ul>\n<p>继续使用刚才的foo和bar<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.apply(bar,[<span class=\"string\">'测试传参'</span>,<span class=\"string\">'测试apply'</span>]) <span class=\"comment\">//his=== &#123;name: \"bar\", getBar: ƒ&#125; this.name== bar ----------------------------------- ...args===== 测试传参 测试apply</span></span><br></pre></td></tr></table></figure></p>\n<p>总结 <strong>call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。</strong></p>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><p>从<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\">MDN 文档 bind</a>我们可以了解到:</p>\n<p>bind()方法创建一个新的函数，在调用时设置this关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p>\n<ul>\n<li>function.bind(thisArg[, arg1[, arg2[, …]]])</li>\n<li><p>thisArg 调用绑定函数时作为<code>this</code>参数传递给目标函数的值。 如果使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\" title=\"new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\" target=\"_blank\" rel=\"noopener\"><code>new</code></a>运算符构造绑定函数，则忽略该值。当使用<code>bind</code>在<code>setTimeout</code>中创建一个函数（作为回调提供）时，作为<code>thisArg</code>传递的任何原始值都将转换为<code>object</code>。如果<code>bind</code>函数的参数列表为空，执行作用域的<code>this</code>将被视为新函数的<code>thisArg</code>。</p>\n</li>\n<li><p>arg1, arg2, … 当目标函数被调用时，预先添加到绑定函数的参数列表中的参数。</p>\n</li>\n</ul>\n<p>emmmm…继续最最上面的那个foo和bar</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.bind(bar,<span class=\"string\">'测试传参'</span>,<span class=\"string\">'测试bind'</span>) <span class=\"comment\">// 此时是无输出，因为bind()方法创建一个新的函数，当前函数并没有执行</span></span><br></pre></td></tr></table></figure>\n<p>修改如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foobindbar = foo.getFoo.bind(bar,<span class=\"string\">'测试传参'</span>,<span class=\"string\">'测试bind'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foobindbar)</span><br><span class=\"line\">    <span class=\"comment\">// ƒ getFoo(...args)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   console.log('this===',this,'this.name==',this.name)</span></span><br><span class=\"line\">    <span class=\"comment\">//   console.log('-----------------------------------')</span></span><br><span class=\"line\">    <span class=\"comment\">//   console.log('...args=====',...args)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">foobindbar() <span class=\"comment\">//this=== &#123;name: \"bar\", getBar: ƒ&#125; this.name== bar ----------------------------------- ...args===== 测试传参 测试apply</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"call和apply的区别\"><a href=\"#call和apply的区别\" class=\"headerlink\" title=\"call和apply的区别\"></a>call和apply的区别</h4><p>call方法和apply方法两者极度相似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。用apply时，即使传入的参数只有一个，也必须定义为数组才行；</p>\n<h4 id=\"call与apply-和-bind的区别\"><a href=\"#call与apply-和-bind的区别\" class=\"headerlink\" title=\"call与apply 和 bind的区别\"></a>call与apply 和 bind的区别</h4><p>call与apply改变this的指向时，会直接触发函数;而bind会创建一个新的函数，在调用时设置this关键字为提供的值，使用bind时，会优先使用bind绑定的几个值；<br>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.getFoo.bind(bar,&apos;测试传参&apos;,&apos;测试bind&apos;)</span><br><span class=\"line\">const foobindbar = foo.getFoo.bind(bar,&apos;测试传参&apos;,&apos;测试bind&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(foobindbar)</span><br><span class=\"line\">    // ƒ getFoo(...args)&#123;</span><br><span class=\"line\">    //   console.log(&apos;this===&apos;,this,&apos;this.name==&apos;,this.name)</span><br><span class=\"line\">    //   console.log(&apos;-----------------------------------&apos;)</span><br><span class=\"line\">    //   console.log(&apos;...args=====&apos;,...args)</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foobindbar(&apos;参数1&apos;, &apos;参数2&apos;) //this=== &#123;name: &quot;bar&quot;, getBar: ƒ&#125; this.name== bar ----------------------------------- ...args=====  测试传参 测试apply 参数1 参数2</span><br><span class=\"line\">// ...args=====  测试传参 测试apply 参数1 参数2</span><br></pre></td></tr></table></figure></p>\n"},{"title":"代码片段 之 小程序授权","date":"2020-07-12T15:41:44.000Z","_content":"### html内容\n\n<!-- #ifdef MP-WEIXIN -->\n<button open-type=\"getUserInfo\" bindgetuserinfo=\"userInfoHandler\" @click=\"clickHandle\">\n    Click me\n</button>\n<!-- #endif -->\n<!-- #ifdef MP-ALIPAY -->\n<button @click=\"getAuthCode\">\n    获取授权码\n</button>\n<!-- #endif -->\n\n\n### 微信授权\n```javaScript\nclickHandle() {\n    wx.getSetting({\n        success(res) {\n            if (res.authSetting['scope.userInfo']) {\n                // 微信已授权回调\n                this.$emit('click')\n            }\n        },\n    })\n}\n```\n\n### 支付宝授权\n```javaScript\n\ngetAuthCode() {\n    // todo 判断支付宝是否已授权，触发点击事件\n    my.getAuthCode({\n        scopes: 'auth_user', // 主动授权：auth_user，静默授权：auth_base。或者其它scope\n        success: (res) => {\n            if (res.authCode) {\n                // 认证成功\n                // 调用自己的服务端接口，让服务端进行后端的授权认证，并且利用session，需要解决跨域问题\n                my.getAuthUserInfo({\n                    success: (res) => {\n                        console.log(res)\n                    }\n                })\n            }\n        },\n    });\n}\n\n```\n### 获取openId\n\n```javaScript\n// todo 更新全局属性 wx-appid，ali-appid\n\n// 微信\n// #ifdef MP-WEIXIN\nwx.login({\n    success (res) {\n        if (res.code) {\n            //发起网络请求\n            // 携带 res.code 发送 请求 获取 微信 openId\n            wx.request({\n                url: '',\n                data: {\n                    code: res.code\n                }\n            })\n        }\n    }\n})\n// #endif\n\n// 支付宝\n// #ifdef MP-ALIPAY\nmy.getAuthCode({\n    scopes: 'auth_base', // 主动授权：auth_user，静默授权：auth_base。或者其它scope\n    success: (res) => {\n        if (res.authCode) {\n            // 携带 res.authCode 发送 请求 获取 支付宝 openId\n        }\n    },\n});\n// #endif\n\n```\n","source":"_posts/applet.md","raw":"---\ntitle: 代码片段 之 小程序授权\ntags:\n  - nodejs\ndate: 2020-07-12 23:41:44\n---\n### html内容\n\n<!-- #ifdef MP-WEIXIN -->\n<button open-type=\"getUserInfo\" bindgetuserinfo=\"userInfoHandler\" @click=\"clickHandle\">\n    Click me\n</button>\n<!-- #endif -->\n<!-- #ifdef MP-ALIPAY -->\n<button @click=\"getAuthCode\">\n    获取授权码\n</button>\n<!-- #endif -->\n\n\n### 微信授权\n```javaScript\nclickHandle() {\n    wx.getSetting({\n        success(res) {\n            if (res.authSetting['scope.userInfo']) {\n                // 微信已授权回调\n                this.$emit('click')\n            }\n        },\n    })\n}\n```\n\n### 支付宝授权\n```javaScript\n\ngetAuthCode() {\n    // todo 判断支付宝是否已授权，触发点击事件\n    my.getAuthCode({\n        scopes: 'auth_user', // 主动授权：auth_user，静默授权：auth_base。或者其它scope\n        success: (res) => {\n            if (res.authCode) {\n                // 认证成功\n                // 调用自己的服务端接口，让服务端进行后端的授权认证，并且利用session，需要解决跨域问题\n                my.getAuthUserInfo({\n                    success: (res) => {\n                        console.log(res)\n                    }\n                })\n            }\n        },\n    });\n}\n\n```\n### 获取openId\n\n```javaScript\n// todo 更新全局属性 wx-appid，ali-appid\n\n// 微信\n// #ifdef MP-WEIXIN\nwx.login({\n    success (res) {\n        if (res.code) {\n            //发起网络请求\n            // 携带 res.code 发送 请求 获取 微信 openId\n            wx.request({\n                url: '',\n                data: {\n                    code: res.code\n                }\n            })\n        }\n    }\n})\n// #endif\n\n// 支付宝\n// #ifdef MP-ALIPAY\nmy.getAuthCode({\n    scopes: 'auth_base', // 主动授权：auth_user，静默授权：auth_base。或者其它scope\n    success: (res) => {\n        if (res.authCode) {\n            // 携带 res.authCode 发送 请求 获取 支付宝 openId\n        }\n    },\n});\n// #endif\n\n```\n","slug":"applet","published":1,"updated":"2020-07-12T16:03:43.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qif200060ohygdlay42v","content":"<h3 id=\"html内容\"><a href=\"#html内容\" class=\"headerlink\" title=\"html内容\"></a>html内容</h3><!-- #ifdef MP-WEIXIN -->\n<p><button open-type=\"getUserInfo\" bindgetuserinfo=\"userInfoHandler\" @click=\"clickHandle\"><br>    Click me<br></button><br><!-- #endif --><br><!-- #ifdef MP-ALIPAY --></p>\n<p><button @click=\"getAuthCode\"><br>    获取授权码<br></button><br><!-- #endif --></p>\n<h3 id=\"微信授权\"><a href=\"#微信授权\" class=\"headerlink\" title=\"微信授权\"></a>微信授权</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickHandle() &#123;</span><br><span class=\"line\">    wx.getSetting(&#123;</span><br><span class=\"line\">        success(res) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res.authSetting[<span class=\"string\">'scope.userInfo'</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 微信已授权回调</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'click'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"支付宝授权\"><a href=\"#支付宝授权\" class=\"headerlink\" title=\"支付宝授权\"></a>支付宝授权</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">getAuthCode() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo 判断支付宝是否已授权，触发点击事件</span></span><br><span class=\"line\">    my.getAuthCode(&#123;</span><br><span class=\"line\">        scopes: <span class=\"string\">'auth_user'</span>, <span class=\"comment\">// 主动授权：auth_user，静默授权：auth_base。或者其它scope</span></span><br><span class=\"line\">        success: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res.authCode) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 认证成功</span></span><br><span class=\"line\">                <span class=\"comment\">// 调用自己的服务端接口，让服务端进行后端的授权认证，并且利用session，需要解决跨域问题</span></span><br><span class=\"line\">                my.getAuthUserInfo(&#123;</span><br><span class=\"line\">                    success: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取openId\"><a href=\"#获取openId\" class=\"headerlink\" title=\"获取openId\"></a>获取openId</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todo 更新全局属性 wx-appid，ali-appid</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 微信</span></span><br><span class=\"line\"><span class=\"comment\">// #ifdef MP-WEIXIN</span></span><br><span class=\"line\">wx.login(&#123;</span><br><span class=\"line\">    success (res) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.code) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//发起网络请求</span></span><br><span class=\"line\">            <span class=\"comment\">// 携带 res.code 发送 请求 获取 微信 openId</span></span><br><span class=\"line\">            wx.request(&#123;</span><br><span class=\"line\">                url: <span class=\"string\">''</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    code: res.code</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// #endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 支付宝</span></span><br><span class=\"line\"><span class=\"comment\">// #ifdef MP-ALIPAY</span></span><br><span class=\"line\">my.getAuthCode(&#123;</span><br><span class=\"line\">    scopes: <span class=\"string\">'auth_base'</span>, <span class=\"comment\">// 主动授权：auth_user，静默授权：auth_base。或者其它scope</span></span><br><span class=\"line\">    success: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.authCode) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 携带 res.authCode 发送 请求 获取 支付宝 openId</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// #endif</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<h3 id=\"html内容\"><a href=\"#html内容\" class=\"headerlink\" title=\"html内容\"></a>html内容</h3><!-- #ifdef MP-WEIXIN -->\n<p><button open-type=\"getUserInfo\" bindgetuserinfo=\"userInfoHandler\" @click=\"clickHandle\"><br>    Click me<br></button><br><!-- #endif --><br><!-- #ifdef MP-ALIPAY --></p>\n<p><button @click=\"getAuthCode\"><br>    获取授权码<br></button><br><!-- #endif --></p>\n<h3 id=\"微信授权\"><a href=\"#微信授权\" class=\"headerlink\" title=\"微信授权\"></a>微信授权</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clickHandle() &#123;</span><br><span class=\"line\">    wx.getSetting(&#123;</span><br><span class=\"line\">        success(res) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res.authSetting[<span class=\"string\">'scope.userInfo'</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 微信已授权回调</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'click'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"支付宝授权\"><a href=\"#支付宝授权\" class=\"headerlink\" title=\"支付宝授权\"></a>支付宝授权</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">getAuthCode() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo 判断支付宝是否已授权，触发点击事件</span></span><br><span class=\"line\">    my.getAuthCode(&#123;</span><br><span class=\"line\">        scopes: <span class=\"string\">'auth_user'</span>, <span class=\"comment\">// 主动授权：auth_user，静默授权：auth_base。或者其它scope</span></span><br><span class=\"line\">        success: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res.authCode) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 认证成功</span></span><br><span class=\"line\">                <span class=\"comment\">// 调用自己的服务端接口，让服务端进行后端的授权认证，并且利用session，需要解决跨域问题</span></span><br><span class=\"line\">                my.getAuthUserInfo(&#123;</span><br><span class=\"line\">                    success: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取openId\"><a href=\"#获取openId\" class=\"headerlink\" title=\"获取openId\"></a>获取openId</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// todo 更新全局属性 wx-appid，ali-appid</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 微信</span></span><br><span class=\"line\"><span class=\"comment\">// #ifdef MP-WEIXIN</span></span><br><span class=\"line\">wx.login(&#123;</span><br><span class=\"line\">    success (res) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.code) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//发起网络请求</span></span><br><span class=\"line\">            <span class=\"comment\">// 携带 res.code 发送 请求 获取 微信 openId</span></span><br><span class=\"line\">            wx.request(&#123;</span><br><span class=\"line\">                url: <span class=\"string\">''</span>,</span><br><span class=\"line\">                data: &#123;</span><br><span class=\"line\">                    code: res.code</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// #endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 支付宝</span></span><br><span class=\"line\"><span class=\"comment\">// #ifdef MP-ALIPAY</span></span><br><span class=\"line\">my.getAuthCode(&#123;</span><br><span class=\"line\">    scopes: <span class=\"string\">'auth_base'</span>, <span class=\"comment\">// 主动授权：auth_user，静默授权：auth_base。或者其它scope</span></span><br><span class=\"line\">    success: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.authCode) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 携带 res.authCode 发送 请求 获取 支付宝 openId</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// #endif</span></span><br></pre></td></tr></table></figure>\n"},{"title":"javascript函数防抖和函数节流~","_content":"\n\n\n-------------------------\n\n![镇楼图杀生丸](https://user-gold-cdn.xitu.io/2019/8/26/16ccb9c3667de170?w=1240&h=297&f=jpeg&s=39707)\n\n------------------------\n### 写在前面\n- 函数防抖和函数节流都是为了优化事件处理程序，\n\n- **防抖** 一个频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。\n\n- **节流** 一个频繁触发的函数，在规定时间内，函数执行一次后，只有大于设定的执行周期后才会执行第二次。\n\n> 使用场景: **防抖** 经常用在我们搜索框输入搜索，点击提交，防止等；而 **节流** 一般在onresize、mousemove、滚动事件等事件中使用，防止过多的请求造成服务器压力\n\n### 函数防抖；\n\n* 原理：在第一次调用函数的时候，创建一个定时器，在指定的时间间隔之后运行代码；如果代码还没运行时，又触发了该函数，则清除旧的定时器，重新创建新的定时器；如果超过延时执行的时间，代码执行了，则此时已经是第二次触发；\n- 实现如下:\n```javascript\n const debounce = (method, delay)  => {\n      var timer = null;  //定时器\n      return () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          method(); // method.apply(this) 看你用不用箭头函数\n        }, delay)\n      }\n    }\n```\n### 函数节流；\n* 原理：第一次执行函数的时候，记录函数执行的时间，当下一次执行的时候，比较时间是否还在间隔时间内，如果是则不执行，否则继续执行；\n- 实现如下:\n```\nconst throttle = (method, delay) => {\n    var lastTime = 0; // 上一次函数触发的时间\n    return () => {\n        var nowTime = Date.now();\n        if (nowTime - lastTime > delay) {\n            method(); // method.apply(this) 看你用不用箭头函数\n            lastTime = nowTime;\n        }\n    }\n}\n```\n\n### 总结:\n> 函数防抖和函数节流 两者非常相似，但还是有些区别，具体区别可以自行百度或者看以下文章；作者博客:[Eno](https://wlove-c.github.io/)\n\n\n文章参考:\n[函数防抖和节流的区别](https://css-tricks.com/debouncing-throttling-explained-examples/)\n[lodashjs](https://www.lodashjs.com/docs/latest#_debouncefunc-wait0-options)\n\n\n","source":"_posts/codding-20190825.md","raw":"---\ntitle: javascript函数防抖和函数节流~\ntags: javaScript\ncategories: 编程\n---\n\n\n\n-------------------------\n\n![镇楼图杀生丸](https://user-gold-cdn.xitu.io/2019/8/26/16ccb9c3667de170?w=1240&h=297&f=jpeg&s=39707)\n\n------------------------\n### 写在前面\n- 函数防抖和函数节流都是为了优化事件处理程序，\n\n- **防抖** 一个频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。\n\n- **节流** 一个频繁触发的函数，在规定时间内，函数执行一次后，只有大于设定的执行周期后才会执行第二次。\n\n> 使用场景: **防抖** 经常用在我们搜索框输入搜索，点击提交，防止等；而 **节流** 一般在onresize、mousemove、滚动事件等事件中使用，防止过多的请求造成服务器压力\n\n### 函数防抖；\n\n* 原理：在第一次调用函数的时候，创建一个定时器，在指定的时间间隔之后运行代码；如果代码还没运行时，又触发了该函数，则清除旧的定时器，重新创建新的定时器；如果超过延时执行的时间，代码执行了，则此时已经是第二次触发；\n- 实现如下:\n```javascript\n const debounce = (method, delay)  => {\n      var timer = null;  //定时器\n      return () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          method(); // method.apply(this) 看你用不用箭头函数\n        }, delay)\n      }\n    }\n```\n### 函数节流；\n* 原理：第一次执行函数的时候，记录函数执行的时间，当下一次执行的时候，比较时间是否还在间隔时间内，如果是则不执行，否则继续执行；\n- 实现如下:\n```\nconst throttle = (method, delay) => {\n    var lastTime = 0; // 上一次函数触发的时间\n    return () => {\n        var nowTime = Date.now();\n        if (nowTime - lastTime > delay) {\n            method(); // method.apply(this) 看你用不用箭头函数\n            lastTime = nowTime;\n        }\n    }\n}\n```\n\n### 总结:\n> 函数防抖和函数节流 两者非常相似，但还是有些区别，具体区别可以自行百度或者看以下文章；作者博客:[Eno](https://wlove-c.github.io/)\n\n\n文章参考:\n[函数防抖和节流的区别](https://css-tricks.com/debouncing-throttling-explained-examples/)\n[lodashjs](https://www.lodashjs.com/docs/latest#_debouncefunc-wait0-options)\n\n\n","slug":"codding-20190825","published":1,"date":"2020-05-18T06:08:34.681Z","updated":"2020-05-18T06:08:34.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qif300070ohy2gvx75w4","content":"<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/8/26/16ccb9c3667de170?w=1240&amp;h=297&amp;f=jpeg&amp;s=39707\" alt=\"镇楼图杀生丸\"></p>\n<hr>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><ul>\n<li><p>函数防抖和函数节流都是为了优化事件处理程序，</p>\n</li>\n<li><p><strong>防抖</strong> 一个频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。</p>\n</li>\n<li><p><strong>节流</strong> 一个频繁触发的函数，在规定时间内，函数执行一次后，只有大于设定的执行周期后才会执行第二次。</p>\n</li>\n</ul>\n<blockquote>\n<p>使用场景: <strong>防抖</strong> 经常用在我们搜索框输入搜索，点击提交，防止等；而 <strong>节流</strong> 一般在onresize、mousemove、滚动事件等事件中使用，防止过多的请求造成服务器压力</p>\n</blockquote>\n<h3 id=\"函数防抖；\"><a href=\"#函数防抖；\" class=\"headerlink\" title=\"函数防抖；\"></a>函数防抖；</h3><ul>\n<li>原理：在第一次调用函数的时候，创建一个定时器，在指定的时间间隔之后运行代码；如果代码还没运行时，又触发了该函数，则清除旧的定时器，重新创建新的定时器；如果超过延时执行的时间，代码执行了，则此时已经是第二次触发；</li>\n</ul>\n<ul>\n<li>实现如下:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">method, delay</span>)  =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;  <span class=\"comment\">//定时器</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">       clearTimeout(timer);</span><br><span class=\"line\">       timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">         method(); <span class=\"comment\">// method.apply(this) 看你用不用箭头函数</span></span><br><span class=\"line\">       &#125;, delay)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"函数节流；\"><a href=\"#函数节流；\" class=\"headerlink\" title=\"函数节流；\"></a>函数节流；</h3><ul>\n<li>原理：第一次执行函数的时候，记录函数执行的时间，当下一次执行的时候，比较时间是否还在间隔时间内，如果是则不执行，否则继续执行；</li>\n</ul>\n<ul>\n<li>实现如下:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const throttle = (method, delay) =&gt; &#123;</span><br><span class=\"line\">    var lastTime = 0; // 上一次函数触发的时间</span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">        var nowTime = Date.now();</span><br><span class=\"line\">        if (nowTime - lastTime &gt; delay) &#123;</span><br><span class=\"line\">            method(); // method.apply(this) 看你用不用箭头函数</span><br><span class=\"line\">            lastTime = nowTime;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><blockquote>\n<p>函数防抖和函数节流 两者非常相似，但还是有些区别，具体区别可以自行百度或者看以下文章；作者博客:<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">Eno</a></p>\n</blockquote>\n<p>文章参考:<br><a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">函数防抖和节流的区别</a><br><a href=\"https://www.lodashjs.com/docs/latest#_debouncefunc-wait0-options\" target=\"_blank\" rel=\"noopener\">lodashjs</a></p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/8/26/16ccb9c3667de170?w=1240&amp;h=297&amp;f=jpeg&amp;s=39707\" alt=\"镇楼图杀生丸\"></p>\n<hr>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><ul>\n<li><p>函数防抖和函数节流都是为了优化事件处理程序，</p>\n</li>\n<li><p><strong>防抖</strong> 一个频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。</p>\n</li>\n<li><p><strong>节流</strong> 一个频繁触发的函数，在规定时间内，函数执行一次后，只有大于设定的执行周期后才会执行第二次。</p>\n</li>\n</ul>\n<blockquote>\n<p>使用场景: <strong>防抖</strong> 经常用在我们搜索框输入搜索，点击提交，防止等；而 <strong>节流</strong> 一般在onresize、mousemove、滚动事件等事件中使用，防止过多的请求造成服务器压力</p>\n</blockquote>\n<h3 id=\"函数防抖；\"><a href=\"#函数防抖；\" class=\"headerlink\" title=\"函数防抖；\"></a>函数防抖；</h3><ul>\n<li>原理：在第一次调用函数的时候，创建一个定时器，在指定的时间间隔之后运行代码；如果代码还没运行时，又触发了该函数，则清除旧的定时器，重新创建新的定时器；如果超过延时执行的时间，代码执行了，则此时已经是第二次触发；</li>\n</ul>\n<ul>\n<li>实现如下:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">method, delay</span>)  =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;  <span class=\"comment\">//定时器</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">       clearTimeout(timer);</span><br><span class=\"line\">       timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">         method(); <span class=\"comment\">// method.apply(this) 看你用不用箭头函数</span></span><br><span class=\"line\">       &#125;, delay)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"函数节流；\"><a href=\"#函数节流；\" class=\"headerlink\" title=\"函数节流；\"></a>函数节流；</h3><ul>\n<li>原理：第一次执行函数的时候，记录函数执行的时间，当下一次执行的时候，比较时间是否还在间隔时间内，如果是则不执行，否则继续执行；</li>\n</ul>\n<ul>\n<li>实现如下:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const throttle = (method, delay) =&gt; &#123;</span><br><span class=\"line\">    var lastTime = 0; // 上一次函数触发的时间</span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">        var nowTime = Date.now();</span><br><span class=\"line\">        if (nowTime - lastTime &gt; delay) &#123;</span><br><span class=\"line\">            method(); // method.apply(this) 看你用不用箭头函数</span><br><span class=\"line\">            lastTime = nowTime;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><blockquote>\n<p>函数防抖和函数节流 两者非常相似，但还是有些区别，具体区别可以自行百度或者看以下文章；作者博客:<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">Eno</a></p>\n</blockquote>\n<p>文章参考:<br><a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">函数防抖和节流的区别</a><br><a href=\"https://www.lodashjs.com/docs/latest#_debouncefunc-wait0-options\" target=\"_blank\" rel=\"noopener\">lodashjs</a></p>\n"},{"title":"CSS垂直居中的几种方法","_content":"CSS垂直居中的几种方法\n\n\n\n\n\n\n@[TOC](CSS垂直居中的几种方法)\n\n### 假设HTML如下:\n```html\n<body>\n    <div id=\"box\">\n        <div id=\"content\"></div>\n    </div>\n</body>\n\n```\n### 1. 兼容性最好的方法 IE7以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\t width:100%;\n\t height:100%;\n\t background:rgba(0,0,0,0.7);\n\t position:relative;\n }\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:pink;\n\tposition:absolute;\n\ttop:0;\n\tright:0;\n\tbottom:0;\n\tleft:0;\n\tmargin:auto;\n}\n```\n\n### 2. transform进行元素偏移 IE8以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tposition:relative;\n}\n#content{\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n\tleft:50%;\n\ttop:50%;\n\ttransform:translateX(-50%) translateY(-50%);\n\t-webkit-transform:translateX(-50%) translateY(-50%);\n}\n```\n\n### 3. 弹性盒模型进行布局 IE兼容性差\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:box;\n\tbox-pack:center;\n\tbox-align:center;\n\tdisplay:-webkit-flexbox;\n\t-webkit-box-pack:center;\n\t-webkit-box-align:center;\n}\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n}\n```\n\n\n### 4. flex布局 不兼容IE9以下\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:flex;\n\tdisplay:-webkit-flex;\n\t justify-content:center;\n\t align-items:center;\n  }\n#content {\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n  }\n```\n\n\n##### 言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\n","source":"_posts/coding-1.md","raw":"---\ntitle: CSS垂直居中的几种方法\ntags: CSS\ncategories: 编程\n---\nCSS垂直居中的几种方法\n\n\n\n\n\n\n@[TOC](CSS垂直居中的几种方法)\n\n### 假设HTML如下:\n```html\n<body>\n    <div id=\"box\">\n        <div id=\"content\"></div>\n    </div>\n</body>\n\n```\n### 1. 兼容性最好的方法 IE7以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\t width:100%;\n\t height:100%;\n\t background:rgba(0,0,0,0.7);\n\t position:relative;\n }\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:pink;\n\tposition:absolute;\n\ttop:0;\n\tright:0;\n\tbottom:0;\n\tleft:0;\n\tmargin:auto;\n}\n```\n\n### 2. transform进行元素偏移 IE8以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tposition:relative;\n}\n#content{\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n\tleft:50%;\n\ttop:50%;\n\ttransform:translateX(-50%) translateY(-50%);\n\t-webkit-transform:translateX(-50%) translateY(-50%);\n}\n```\n\n### 3. 弹性盒模型进行布局 IE兼容性差\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:box;\n\tbox-pack:center;\n\tbox-align:center;\n\tdisplay:-webkit-flexbox;\n\t-webkit-box-pack:center;\n\t-webkit-box-align:center;\n}\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n}\n```\n\n\n### 4. flex布局 不兼容IE9以下\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:flex;\n\tdisplay:-webkit-flex;\n\t justify-content:center;\n\t align-items:center;\n  }\n#content {\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n  }\n```\n\n\n##### 言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\n","slug":"coding-1","published":1,"date":"2020-05-18T06:08:34.681Z","updated":"2020-05-18T06:08:34.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qif400080ohyenv3vxu7","content":"<p>CSS垂直居中的几种方法</p>\n<p>@<a href=\"CSS垂直居中的几种方法\">TOC</a></p>\n<h3 id=\"假设HTML如下\"><a href=\"#假设HTML如下\" class=\"headerlink\" title=\"假设HTML如下:\"></a>假设HTML如下:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-兼容性最好的方法-IE7以上\"><a href=\"#1-兼容性最好的方法-IE7以上\" class=\"headerlink\" title=\"1. 兼容性最好的方法 IE7以上\"></a>1. 兼容性最好的方法 IE7以上</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\t width:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\t height:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\t background:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\t position:relative;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">#content &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:pink;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\ttop:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tright:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tbottom:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tleft:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tmargin:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-transform进行元素偏移-IE8以上\"><a href=\"#2-transform进行元素偏移-IE8以上\" class=\"headerlink\" title=\"2. transform进行元素偏移 IE8以上\"></a>2. transform进行元素偏移 IE8以上</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\tbackground:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#content&#123;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:blue;</span><br><span class=\"line\">\tleft:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\ttop:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\ttransform:translateX(<span class=\"number\">-50</span>%) translateY(<span class=\"number\">-50</span>%);</span><br><span class=\"line\">\t-webkit-transform:translateX(<span class=\"number\">-50</span>%) translateY(<span class=\"number\">-50</span>%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-弹性盒模型进行布局-IE兼容性差\"><a href=\"#3-弹性盒模型进行布局-IE兼容性差\" class=\"headerlink\" title=\"3. 弹性盒模型进行布局 IE兼容性差\"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\tbackground:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\tdisplay:box;</span><br><span class=\"line\">\tbox-pack:center;</span><br><span class=\"line\">\tbox-align:center;</span><br><span class=\"line\">\tdisplay:-webkit-flexbox;</span><br><span class=\"line\">\t-webkit-box-pack:center;</span><br><span class=\"line\">\t-webkit-box-align:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#content &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-flex布局-不兼容IE9以下\"><a href=\"#4-flex布局-不兼容IE9以下\" class=\"headerlink\" title=\"4. flex布局 不兼容IE9以下\"></a>4. flex布局 不兼容IE9以下</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\tbackground:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\tdisplay:flex;</span><br><span class=\"line\">\tdisplay:-webkit-flex;</span><br><span class=\"line\">\t justify-content:center;</span><br><span class=\"line\">\t align-items:center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">#content &#123;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:blue;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"><a href=\"#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\" class=\"headerlink\" title=\"言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>CSS垂直居中的几种方法</p>\n<p>@<a href=\"CSS垂直居中的几种方法\">TOC</a></p>\n<h3 id=\"假设HTML如下\"><a href=\"#假设HTML如下\" class=\"headerlink\" title=\"假设HTML如下:\"></a>假设HTML如下:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"box\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-兼容性最好的方法-IE7以上\"><a href=\"#1-兼容性最好的方法-IE7以上\" class=\"headerlink\" title=\"1. 兼容性最好的方法 IE7以上\"></a>1. 兼容性最好的方法 IE7以上</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\t width:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\t height:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\t background:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\t position:relative;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">#content &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:pink;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\ttop:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tright:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tbottom:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tleft:<span class=\"number\">0</span>;</span><br><span class=\"line\">\tmargin:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-transform进行元素偏移-IE8以上\"><a href=\"#2-transform进行元素偏移-IE8以上\" class=\"headerlink\" title=\"2. transform进行元素偏移 IE8以上\"></a>2. transform进行元素偏移 IE8以上</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\tbackground:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\tposition:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#content&#123;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:blue;</span><br><span class=\"line\">\tleft:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\ttop:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\ttransform:translateX(<span class=\"number\">-50</span>%) translateY(<span class=\"number\">-50</span>%);</span><br><span class=\"line\">\t-webkit-transform:translateX(<span class=\"number\">-50</span>%) translateY(<span class=\"number\">-50</span>%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-弹性盒模型进行布局-IE兼容性差\"><a href=\"#3-弹性盒模型进行布局-IE兼容性差\" class=\"headerlink\" title=\"3. 弹性盒模型进行布局 IE兼容性差\"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\tbackground:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\tdisplay:box;</span><br><span class=\"line\">\tbox-pack:center;</span><br><span class=\"line\">\tbox-align:center;</span><br><span class=\"line\">\tdisplay:-webkit-flexbox;</span><br><span class=\"line\">\t-webkit-box-pack:center;</span><br><span class=\"line\">\t-webkit-box-align:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#content &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-flex布局-不兼容IE9以下\"><a href=\"#4-flex布局-不兼容IE9以下\" class=\"headerlink\" title=\"4. flex布局 不兼容IE9以下\"></a>4. flex布局 不兼容IE9以下</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body,html &#123; <span class=\"attr\">margin</span>:<span class=\"number\">0</span>; width:<span class=\"number\">100</span>%; height:<span class=\"number\">100</span>%; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#box &#123;</span><br><span class=\"line\">\twidth:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">100</span>%;</span><br><span class=\"line\">\tbackground:rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.7</span>);</span><br><span class=\"line\">\tdisplay:flex;</span><br><span class=\"line\">\tdisplay:-webkit-flex;</span><br><span class=\"line\">\t justify-content:center;</span><br><span class=\"line\">\t align-items:center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">#content &#123;</span><br><span class=\"line\">\tposition:absolute;</span><br><span class=\"line\">\twidth:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\theight:<span class=\"number\">50</span>%;</span><br><span class=\"line\">\tbackground:blue;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"><a href=\"#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\" class=\"headerlink\" title=\"言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>"},{"title":"vue中watch不触发、不生效的解决办法及原理","_content":"vue中watch不触发、不生效的解决办法及原理\n@[TOC](vue中watch不触发、不生效的解决办法及原理)\n\n## 遇到的问题\n\nvue中watch不触发、不生效的解决办法及原理\n\n\n@[TOC](vue中watch不触发、不生效的解决办法及原理)\n\n## 遇到的问题\n 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；\n watch代码如下：\n```javascript\n  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n      \tthis.moreList = newVal.moreList\n      \t}\n  \t}\n  },\n```\n\nvue-devToola数据传递结果如下\n![在这里插入图片描述](https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a392f85cf?w=622&h=737&f=png&s=95782)\n#### 方案解决过程一\n考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:\n```javascript\n watch: {\n\t 'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true\n\t    }\n  \t},\n```\n\n结果显而易见 还是不行；\n\n#### 方案解决过程二\n查阅: [vue官方文档](https://cn.vuejs.org/v2/api/#watch).得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,\n```javascript\nwatch: {\n\t    'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true,\n\t      immediate: true,\n\t    }\n    }\n```\n最后博主问题终于得到解决了\n![在这里插入图片描述](https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a4443d1f4?w=573&h=608&f=png&s=79337)\n\n## 总结:\n出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~\n> 20190626更新 | 原文并没有解释清楚为何加上 deep: true或者 immediate: true就可以了，此次更新将加入demo\n\n## 更新内容\n### 1 常规的监听(watch)\n```javascript\n<div class=\"watch-demo\">\n    <div class=\"watch-demo-item\">\n      <input type=\"text\" v-model=\"val1\">\n      <div>{{value1}}</div>\n    </div>\n  </div>\n// ...\ndata () {\n    return {\n      val1: '',\n      value1: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    }\n  },\n  methods: {\n  }\n```\n输出:\n![常规监听](https://user-gold-cdn.xitu.io/2019/6/28/16b99b399f2c62a0?w=990&h=488&f=png&s=1959)\n\n* 从上图可以看出，常规的监听和我们想象中的完全一致，理想和实际完美吻合；\n\n### 2 对象监听\n```javascript\n <div class=\"watch-demo-item\">\n      <input type=\"text\" v-model=\"obj.val2\">\n      <div>{{value2}}</div>\n    </div>\n// ...\n\ndata () {\n    return {\n      val1: '',\n      value1: '',\n      obj: {\n        val2: ''\n      },\n      value2: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    },\n    obj (val, oval) {\n      this.value2 = val.val2\n    }\n  },\n  methods: {\n  }\n```\n\n输出结果:\n![对象监听](https://user-gold-cdn.xitu.io/2019/6/28/16b99b3990bb0cce?w=1240&h=1040&f=png&s=4873)\n\n* 咦 为何刚才没问题，对象就有问题呢\n\n**方法一: 代码调整如下:**\n\n```javascript\n data () {\n    return {\n      val1: '',\n      value1: '',\n      obj: {\n        val2: ''\n      },\n      value2: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    },\n    'obj.val2' (val, oval) {\n      this.value2 = val\n    }\n  },\n  methods: {\n  }\n```\n此时页面输出:\n![方法一](https://user-gold-cdn.xitu.io/2019/6/28/16b99b39bc59b2fd?w=1240&h=750&f=png&s=5085)\n\n> 但现实开发过程中，我们的obj对象很难确定里面的key数量，假如很多个key的时候，总不能写多个监听去监听key吧？ 此时还有一种方法 如下\n\n**方法二**\n```javascript\ndata () {\n    return {\n      val1: '',\n      value1: '',\n      obj: {\n        val2: ''\n      },\n      value2: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    },\n    'obj': {\n      handler (val, oval) {\n        this.value2 = val.val2\n      },\n      deep: true\n    }\n  },\n\n```\n**此时输出如下**\n![方法二](https://user-gold-cdn.xitu.io/2019/6/28/16b99b39b71b7b68?w=790&h=760&f=png&s=3585)\n\n> 解释:handler是watch的高级用法,里面有一个属性 deep，默认值是 false，代表是否深度监听, 还有一个属性 immediate，默认值也是 false ，但immediate:true代表如果在 wacth 里声明了之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。**deep深度监听会影响性能；** 两者可以同时存在；\n\n> 此次代码演示demo请转 [Jason watchDemo.vue](https://github.com/wLove-c/vue-study-demo/blob/master/src/components/watchDemo.vue)\n\n如果对你有帮助麻烦点个赞👍\n","source":"_posts/coding-2.md","raw":"---\ntitle: vue中watch不触发、不生效的解决办法及原理\ntags: Vue\ncategories: 编程\n---\nvue中watch不触发、不生效的解决办法及原理\n@[TOC](vue中watch不触发、不生效的解决办法及原理)\n\n## 遇到的问题\n\nvue中watch不触发、不生效的解决办法及原理\n\n\n@[TOC](vue中watch不触发、不生效的解决办法及原理)\n\n## 遇到的问题\n 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；\n watch代码如下：\n```javascript\n  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n      \tthis.moreList = newVal.moreList\n      \t}\n  \t}\n  },\n```\n\nvue-devToola数据传递结果如下\n![在这里插入图片描述](https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a392f85cf?w=622&h=737&f=png&s=95782)\n#### 方案解决过程一\n考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:\n```javascript\n watch: {\n\t 'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true\n\t    }\n  \t},\n```\n\n结果显而易见 还是不行；\n\n#### 方案解决过程二\n查阅: [vue官方文档](https://cn.vuejs.org/v2/api/#watch).得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,\n```javascript\nwatch: {\n\t    'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true,\n\t      immediate: true,\n\t    }\n    }\n```\n最后博主问题终于得到解决了\n![在这里插入图片描述](https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a4443d1f4?w=573&h=608&f=png&s=79337)\n\n## 总结:\n出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~\n> 20190626更新 | 原文并没有解释清楚为何加上 deep: true或者 immediate: true就可以了，此次更新将加入demo\n\n## 更新内容\n### 1 常规的监听(watch)\n```javascript\n<div class=\"watch-demo\">\n    <div class=\"watch-demo-item\">\n      <input type=\"text\" v-model=\"val1\">\n      <div>{{value1}}</div>\n    </div>\n  </div>\n// ...\ndata () {\n    return {\n      val1: '',\n      value1: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    }\n  },\n  methods: {\n  }\n```\n输出:\n![常规监听](https://user-gold-cdn.xitu.io/2019/6/28/16b99b399f2c62a0?w=990&h=488&f=png&s=1959)\n\n* 从上图可以看出，常规的监听和我们想象中的完全一致，理想和实际完美吻合；\n\n### 2 对象监听\n```javascript\n <div class=\"watch-demo-item\">\n      <input type=\"text\" v-model=\"obj.val2\">\n      <div>{{value2}}</div>\n    </div>\n// ...\n\ndata () {\n    return {\n      val1: '',\n      value1: '',\n      obj: {\n        val2: ''\n      },\n      value2: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    },\n    obj (val, oval) {\n      this.value2 = val.val2\n    }\n  },\n  methods: {\n  }\n```\n\n输出结果:\n![对象监听](https://user-gold-cdn.xitu.io/2019/6/28/16b99b3990bb0cce?w=1240&h=1040&f=png&s=4873)\n\n* 咦 为何刚才没问题，对象就有问题呢\n\n**方法一: 代码调整如下:**\n\n```javascript\n data () {\n    return {\n      val1: '',\n      value1: '',\n      obj: {\n        val2: ''\n      },\n      value2: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    },\n    'obj.val2' (val, oval) {\n      this.value2 = val\n    }\n  },\n  methods: {\n  }\n```\n此时页面输出:\n![方法一](https://user-gold-cdn.xitu.io/2019/6/28/16b99b39bc59b2fd?w=1240&h=750&f=png&s=5085)\n\n> 但现实开发过程中，我们的obj对象很难确定里面的key数量，假如很多个key的时候，总不能写多个监听去监听key吧？ 此时还有一种方法 如下\n\n**方法二**\n```javascript\ndata () {\n    return {\n      val1: '',\n      value1: '',\n      obj: {\n        val2: ''\n      },\n      value2: ''\n    }\n  },\n  watch: {\n    val1 (val, oval) {\n      this.value1 = val\n    },\n    'obj': {\n      handler (val, oval) {\n        this.value2 = val.val2\n      },\n      deep: true\n    }\n  },\n\n```\n**此时输出如下**\n![方法二](https://user-gold-cdn.xitu.io/2019/6/28/16b99b39b71b7b68?w=790&h=760&f=png&s=3585)\n\n> 解释:handler是watch的高级用法,里面有一个属性 deep，默认值是 false，代表是否深度监听, 还有一个属性 immediate，默认值也是 false ，但immediate:true代表如果在 wacth 里声明了之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。**deep深度监听会影响性能；** 两者可以同时存在；\n\n> 此次代码演示demo请转 [Jason watchDemo.vue](https://github.com/wLove-c/vue-study-demo/blob/master/src/components/watchDemo.vue)\n\n如果对你有帮助麻烦点个赞👍\n","slug":"coding-2","published":1,"date":"2020-05-18T06:08:34.681Z","updated":"2020-05-18T06:08:34.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qif6000b0ohym62ssezb","content":"<p>vue中watch不触发、不生效的解决办法及原理<br>@<a href=\"vue中watch不触发、不生效的解决办法及原理\">TOC</a></p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>vue中watch不触发、不生效的解决办法及原理</p>\n<p>@<a href=\"vue中watch不触发、不生效的解决办法及原理\">TOC</a></p>\n<h2 id=\"遇到的问题-1\"><a href=\"#遇到的问题-1\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">uploaConfig(newVal,oldVal)&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.uploadConfig.moreList &amp;&amp; <span class=\"keyword\">this</span>.uploadConfig.moreList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.moreList = newVal.moreList</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>vue-devToola数据传递结果如下<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a392f85cf?w=622&amp;h=737&amp;f=png&amp;s=95782\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方案解决过程一\"><a href=\"#方案解决过程一\" class=\"headerlink\" title=\"方案解决过程一\"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\"> <span class=\"string\">'uploaConfig.moreList'</span>: &#123;</span><br><span class=\"line\">      handler (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.uploadConfig.moreList &amp;&amp; <span class=\"keyword\">this</span>.uploadConfig.moreList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">this</span>.moreList = newVal.moreList</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> \t&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>结果显而易见 还是不行；</p>\n<h4 id=\"方案解决过程二\"><a href=\"#方案解决过程二\" class=\"headerlink\" title=\"方案解决过程二\"></a>方案解决过程二</h4><p>查阅: <a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">\t    <span class=\"string\">'uploaConfig.moreList'</span>: &#123;</span><br><span class=\"line\">\t      handler (newVal) &#123;</span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.uploadConfig.moreList &amp;&amp; <span class=\"keyword\">this</span>.uploadConfig.moreList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t      \t<span class=\"keyword\">this</span>.moreList = newVal.moreList</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">\t      &#125;,</span><br><span class=\"line\">\t      deep: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t      immediate: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后博主问题终于得到解决了<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a4443d1f4?w=573&amp;h=608&amp;f=png&amp;s=79337\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p>\n<blockquote>\n<p>20190626更新 | 原文并没有解释清楚为何加上 deep: true或者 immediate: true就可以了，此次更新将加入demo</p>\n</blockquote>\n<h2 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h2><h3 id=\"1-常规的监听-watch\"><a href=\"#1-常规的监听-watch\" class=\"headerlink\" title=\"1 常规的监听(watch)\"></a>1 常规的监听(watch)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"watch-demo\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"watch-demo-item\"</span>&gt;</span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"val1\"</span>&gt;</span><br><span class=\"line\">      &lt;div&gt;&#123;&#123;value1&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br><span class=\"line\"><span class=\"regexp\">data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      val1: '',</span></span><br><span class=\"line\"><span class=\"regexp\">      value1: ''</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  watch: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    val1 (val, oval) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.value1 = val</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>输出:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b399f2c62a0?w=990&amp;h=488&amp;f=png&amp;s=1959\" alt=\"常规监听\"></p>\n<ul>\n<li>从上图可以看出，常规的监听和我们想象中的完全一致，理想和实际完美吻合；</li>\n</ul>\n<h3 id=\"2-对象监听\"><a href=\"#2-对象监听\" class=\"headerlink\" title=\"2 对象监听\"></a>2 对象监听</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"watch-demo-item\"</span>&gt;</span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"obj.val2\"</span>&gt;</span><br><span class=\"line\">      &lt;div&gt;&#123;&#123;value2&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      val1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      value1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      obj: &#123;</span><br><span class=\"line\">        val2: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      value2: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    val1 (val, oval) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value1 = val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    obj (val, oval) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value2 = val.val2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b3990bb0cce?w=1240&amp;h=1040&amp;f=png&amp;s=4873\" alt=\"对象监听\"></p>\n<ul>\n<li>咦 为何刚才没问题，对象就有问题呢</li>\n</ul>\n<p><strong>方法一: 代码调整如下:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     val1: <span class=\"string\">''</span>,</span><br><span class=\"line\">     value1: <span class=\"string\">''</span>,</span><br><span class=\"line\">     obj: &#123;</span><br><span class=\"line\">       val2: <span class=\"string\">''</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     value2: <span class=\"string\">''</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> watch: &#123;</span><br><span class=\"line\">   val1 (val, oval) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.value1 = val</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"string\">'obj.val2'</span> (val, oval) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.value2 = val</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> methods: &#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>此时页面输出:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b39bc59b2fd?w=1240&amp;h=750&amp;f=png&amp;s=5085\" alt=\"方法一\"></p>\n<blockquote>\n<p>但现实开发过程中，我们的obj对象很难确定里面的key数量，假如很多个key的时候，总不能写多个监听去监听key吧？ 此时还有一种方法 如下</p>\n</blockquote>\n<p><strong>方法二</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      val1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      value1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      obj: &#123;</span><br><span class=\"line\">        val2: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      value2: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    val1 (val, oval) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value1 = val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'obj'</span>: &#123;</span><br><span class=\"line\">      handler (val, oval) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value2 = val.val2</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<p><strong>此时输出如下</strong><br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b39b71b7b68?w=790&amp;h=760&amp;f=png&amp;s=3585\" alt=\"方法二\"></p>\n<blockquote>\n<p>解释:handler是watch的高级用法,里面有一个属性 deep，默认值是 false，代表是否深度监听, 还有一个属性 immediate，默认值也是 false ，但immediate:true代表如果在 wacth 里声明了之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。<strong>deep深度监听会影响性能；</strong> 两者可以同时存在；</p>\n</blockquote>\n<blockquote>\n<p>此次代码演示demo请转 <a href=\"https://github.com/wLove-c/vue-study-demo/blob/master/src/components/watchDemo.vue\" target=\"_blank\" rel=\"noopener\">Jason watchDemo.vue</a></p>\n</blockquote>\n<p>如果对你有帮助麻烦点个赞👍</p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>vue中watch不触发、不生效的解决办法及原理<br>@<a href=\"vue中watch不触发、不生效的解决办法及原理\">TOC</a></p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>vue中watch不触发、不生效的解决办法及原理</p>\n<p>@<a href=\"vue中watch不触发、不生效的解决办法及原理\">TOC</a></p>\n<h2 id=\"遇到的问题-1\"><a href=\"#遇到的问题-1\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">uploaConfig(newVal,oldVal)&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.uploadConfig.moreList &amp;&amp; <span class=\"keyword\">this</span>.uploadConfig.moreList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.moreList = newVal.moreList</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>vue-devToola数据传递结果如下<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a392f85cf?w=622&amp;h=737&amp;f=png&amp;s=95782\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方案解决过程一\"><a href=\"#方案解决过程一\" class=\"headerlink\" title=\"方案解决过程一\"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\"> <span class=\"string\">'uploaConfig.moreList'</span>: &#123;</span><br><span class=\"line\">      handler (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.uploadConfig.moreList &amp;&amp; <span class=\"keyword\">this</span>.uploadConfig.moreList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      \t<span class=\"keyword\">this</span>.moreList = newVal.moreList</span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> \t&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>结果显而易见 还是不行；</p>\n<h4 id=\"方案解决过程二\"><a href=\"#方案解决过程二\" class=\"headerlink\" title=\"方案解决过程二\"></a>方案解决过程二</h4><p>查阅: <a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">\t    <span class=\"string\">'uploaConfig.moreList'</span>: &#123;</span><br><span class=\"line\">\t      handler (newVal) &#123;</span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.uploadConfig.moreList &amp;&amp; <span class=\"keyword\">this</span>.uploadConfig.moreList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t      \t<span class=\"keyword\">this</span>.moreList = newVal.moreList</span><br><span class=\"line\">\t      \t&#125;</span><br><span class=\"line\">\t      &#125;,</span><br><span class=\"line\">\t      deep: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t      immediate: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后博主问题终于得到解决了<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b3a4443d1f4?w=573&amp;h=608&amp;f=png&amp;s=79337\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p>\n<blockquote>\n<p>20190626更新 | 原文并没有解释清楚为何加上 deep: true或者 immediate: true就可以了，此次更新将加入demo</p>\n</blockquote>\n<h2 id=\"更新内容\"><a href=\"#更新内容\" class=\"headerlink\" title=\"更新内容\"></a>更新内容</h2><h3 id=\"1-常规的监听-watch\"><a href=\"#1-常规的监听-watch\" class=\"headerlink\" title=\"1 常规的监听(watch)\"></a>1 常规的监听(watch)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"watch-demo\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"watch-demo-item\"</span>&gt;</span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"val1\"</span>&gt;</span><br><span class=\"line\">      &lt;div&gt;&#123;&#123;value1&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br><span class=\"line\"><span class=\"regexp\">data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      val1: '',</span></span><br><span class=\"line\"><span class=\"regexp\">      value1: ''</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  watch: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    val1 (val, oval) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.value1 = val</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>输出:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b399f2c62a0?w=990&amp;h=488&amp;f=png&amp;s=1959\" alt=\"常规监听\"></p>\n<ul>\n<li>从上图可以看出，常规的监听和我们想象中的完全一致，理想和实际完美吻合；</li>\n</ul>\n<h3 id=\"2-对象监听\"><a href=\"#2-对象监听\" class=\"headerlink\" title=\"2 对象监听\"></a>2 对象监听</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"watch-demo-item\"</span>&gt;</span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"obj.val2\"</span>&gt;</span><br><span class=\"line\">      &lt;div&gt;&#123;&#123;value2&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      val1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      value1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      obj: &#123;</span><br><span class=\"line\">        val2: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      value2: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    val1 (val, oval) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value1 = val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    obj (val, oval) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value2 = val.val2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b3990bb0cce?w=1240&amp;h=1040&amp;f=png&amp;s=4873\" alt=\"对象监听\"></p>\n<ul>\n<li>咦 为何刚才没问题，对象就有问题呢</li>\n</ul>\n<p><strong>方法一: 代码调整如下:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     val1: <span class=\"string\">''</span>,</span><br><span class=\"line\">     value1: <span class=\"string\">''</span>,</span><br><span class=\"line\">     obj: &#123;</span><br><span class=\"line\">       val2: <span class=\"string\">''</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     value2: <span class=\"string\">''</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> watch: &#123;</span><br><span class=\"line\">   val1 (val, oval) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.value1 = val</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"string\">'obj.val2'</span> (val, oval) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.value2 = val</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> methods: &#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>此时页面输出:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b39bc59b2fd?w=1240&amp;h=750&amp;f=png&amp;s=5085\" alt=\"方法一\"></p>\n<blockquote>\n<p>但现实开发过程中，我们的obj对象很难确定里面的key数量，假如很多个key的时候，总不能写多个监听去监听key吧？ 此时还有一种方法 如下</p>\n</blockquote>\n<p><strong>方法二</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      val1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      value1: <span class=\"string\">''</span>,</span><br><span class=\"line\">      obj: &#123;</span><br><span class=\"line\">        val2: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      value2: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    val1 (val, oval) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value1 = val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'obj'</span>: &#123;</span><br><span class=\"line\">      handler (val, oval) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value2 = val.val2</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<p><strong>此时输出如下</strong><br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/6/28/16b99b39b71b7b68?w=790&amp;h=760&amp;f=png&amp;s=3585\" alt=\"方法二\"></p>\n<blockquote>\n<p>解释:handler是watch的高级用法,里面有一个属性 deep，默认值是 false，代表是否深度监听, 还有一个属性 immediate，默认值也是 false ，但immediate:true代表如果在 wacth 里声明了之后，就会立即先去执行里面的handler方法，如果为 false就跟我们以前的效果一样，不会在绑定的时候就执行。<strong>deep深度监听会影响性能；</strong> 两者可以同时存在；</p>\n</blockquote>\n<blockquote>\n<p>此次代码演示demo请转 <a href=\"https://github.com/wLove-c/vue-study-demo/blob/master/src/components/watchDemo.vue\" target=\"_blank\" rel=\"noopener\">Jason watchDemo.vue</a></p>\n</blockquote>\n<p>如果对你有帮助麻烦点个赞👍</p>\n"},{"title":"IDEA、 JetBrains、webstorm、 pycharm 破解教程","_content":"\n\n@[TOC](IDEA、 JetBrains、webstorm、 pycharm 破解教程)\n### 第一步 [下载IDEA 2018年2月前版本](https://www.jetbrains.com/)\n)\n       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用\n\n### 第二步 打开[破解包网址](http://idea.lanyus.com/) 下图所示 点击下载\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击下载\n\n### 第三步 把下载好的jar包放到IDEA安装目录的/bin里面\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 第四步\n打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n### 最后打开IDEA\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！\n\n如果破解失败\n则把下面这串编码替换掉第四步的编码\n\n```txt\n\n\nBIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n\n\n```\n","source":"_posts/coding-20190329.md","raw":"---\ntitle: IDEA、 JetBrains、webstorm、 pycharm 破解教程\ntags: 工具类\ncategories: 编程\n---\n\n\n@[TOC](IDEA、 JetBrains、webstorm、 pycharm 破解教程)\n### 第一步 [下载IDEA 2018年2月前版本](https://www.jetbrains.com/)\n)\n       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用\n\n### 第二步 打开[破解包网址](http://idea.lanyus.com/) 下图所示 点击下载\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击下载\n\n### 第三步 把下载好的jar包放到IDEA安装目录的/bin里面\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 第四步\n打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n### 最后打开IDEA\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！\n\n如果破解失败\n则把下面这串编码替换掉第四步的编码\n\n```txt\n\n\nBIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n\n\n```\n","slug":"coding-20190329","published":1,"date":"2020-05-18T06:08:34.682Z","updated":"2020-05-18T06:08:34.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qif6000c0ohyto7o1y6u","content":"<p>@<a href=\"IDEA、 JetBrains、webstorm、 pycharm 破解教程\">TOC</a></p>\n<h3 id=\"第一步-下载IDEA-2018年2月前版本\"><a href=\"#第一步-下载IDEA-2018年2月前版本\" class=\"headerlink\" title=\"第一步 下载IDEA 2018年2月前版本\"></a>第一步 <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"noopener\">下载IDEA 2018年2月前版本</a></h3><p>)<br>       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用</p>\n<h3 id=\"第二步-打开破解包网址-下图所示-点击下载\"><a href=\"#第二步-打开破解包网址-下图所示-点击下载\" class=\"headerlink\" title=\"第二步 打开破解包网址 下图所示 点击下载\"></a>第二步 打开<a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">破解包网址</a> 下图所示 点击下载</h3><p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击下载</p>\n<h3 id=\"第三步-把下载好的jar包放到IDEA安装目录的-bin里面\"><a href=\"#第三步-把下载好的jar包放到IDEA安装目录的-bin里面\" class=\"headerlink\" title=\"第三步 把下载好的jar包放到IDEA安装目录的/bin里面\"></a>第三步 把下载好的jar包放到IDEA安装目录的/bin里面</h3><p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<h3 id=\"最后打开IDEA\"><a href=\"#最后打开IDEA\" class=\"headerlink\" title=\"最后打开IDEA\"></a>最后打开IDEA</h3><p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<p>则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！</p>\n<p>如果破解失败<br>则把下面这串编码替换掉第四步的编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span><br></pre></td></tr></table></figure>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"IDEA、 JetBrains、webstorm、 pycharm 破解教程\">TOC</a></p>\n<h3 id=\"第一步-下载IDEA-2018年2月前版本\"><a href=\"#第一步-下载IDEA-2018年2月前版本\" class=\"headerlink\" title=\"第一步 下载IDEA 2018年2月前版本\"></a>第一步 <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"noopener\">下载IDEA 2018年2月前版本</a></h3><p>)<br>       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用</p>\n<h3 id=\"第二步-打开破解包网址-下图所示-点击下载\"><a href=\"#第二步-打开破解包网址-下图所示-点击下载\" class=\"headerlink\" title=\"第二步 打开破解包网址 下图所示 点击下载\"></a>第二步 打开<a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">破解包网址</a> 下图所示 点击下载</h3><p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击下载</p>\n<h3 id=\"第三步-把下载好的jar包放到IDEA安装目录的-bin里面\"><a href=\"#第三步-把下载好的jar包放到IDEA安装目录的-bin里面\" class=\"headerlink\" title=\"第三步 把下载好的jar包放到IDEA安装目录的/bin里面\"></a>第三步 把下载好的jar包放到IDEA安装目录的/bin里面</h3><p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<h3 id=\"最后打开IDEA\"><a href=\"#最后打开IDEA\" class=\"headerlink\" title=\"最后打开IDEA\"></a>最后打开IDEA</h3><p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<p>则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！</p>\n<p>如果破解失败<br>则把下面这串编码替换掉第四步的编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span><br></pre></td></tr></table></figure>\n"},{"title":"webpack4.0+加vue2.0+从零开始搭设vue项目","_content":"\n\n@[TOC](webpack4+加vue2+从零开始搭设vue项目)\n\n本地环境\n> node -v    // v9.1.0\nnpm -v  // 6.5.0\nwebpack -v   // 4.32.2\nwebpack-cli -v // 3.3.2\n\n*这里需要注意的是webpack4+以后需要单独安装webpack-cli*\n### 起步\n#### 1.初始化项目\n```\nnpm init\n```\n一直enter生成package.json文件（小技巧:npm init -y 可以免去繁琐的enter）\n#### 2.安装依赖\n```\nnpm i webpack webpack-cli webpack-dev-server --save-dev\n```\n> 想要深入上述依赖请转[webpack文档](https://webpack.js.org/configuration)\n\n依赖安装成功接下来就开始动手吧\n#### 3.目录文件配置\n根目录鼠标右键新建index.html    webpack.config.js  src文件夹或：\n```\n// window\ntype >webpcak.config.js\ntype >index.html\nmd src\n\n//mac 土豪玩家\ntouch webpcak.config.js\ntouch index.html\nmkdir src\n```\n\nsrc目录下面新建 main.js\n\n此时目录如下\n```\nproject/\n        src/\n            main.js\n        webpack.config.js\n        index.html\n        package.json\n\n```\n内容如下：\n```javascript\n//index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>webpack从零搭设</title>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n</html>\n\n```\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\nmodul.exports = {}\n```\n#### 4.配置index.html及webpack.config.js\n首先\nmain.js修改如下:\n```javascript\n// src/main.js\nconsole.log('hello world');\n```\nwebpack.config.js修改如下:\n\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  // module.exports commonjs规范\n  entry: './src/main.js', // 项目入口文件，webpack将从main.js开始，把所有依赖的js都打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包后的输出路径 可修改\n    publicPath: '/dist/', // 通过devServer访问路径 可修改\n    filename: 'build.js' // 打包后的文件名 可修改\n  },\n  devServer: {\n    historyApiFallback: true, // When using the HTML5 History API, the `index.html` page will likely have to be served in place of any `404` responses\n    overlay: true //Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors\n  },\n};\n\n```\nindex.html 修改如下 *增加引入打包后的js*\n```javascript\n// index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>webpack从零搭设</title>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n<script src=\"/dist/build.js\"></script>\n</html>\n\n```\npackage.json修改如下：\n```json\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --open --hot\",\n    \"build\": \"webpack --progress --hide-modules\"\n  },\n```\n> webpack-dev-server会启动一个静态资源web服务器 --hot参数表示启动热更新\n\n重新启动服务\n```\nnpm run dev\n```\n打开控制台可以看到 有输出hello world\n![控制台输出hello world](https://upload-images.jianshu.io/upload_images/11447772-436a3617acf0b57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 5.vue的起步\n安装vue\n```javascript\nnpm install vue --save\n```\n修改main.js如下\n```\n// src/main.js\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n// console.log('hello world');\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  }\n})\n\n```\n此时 修改index.html如下:\n```JavaScript\n// index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>webpack从零搭设</title>\n</head>\n<body>\n<div id=\"app\">\n\t{{ mess }}\n</div>\n</body>\n<script src=\"/dist/build.js\"></script>\n</html>\n\n```\n重新启动服务\n```JavaScript\nnpm run build\nnpm run dev\n```\n此时\n![控制台报错，页面也未显示hello Vue！](https://upload-images.jianshu.io/upload_images/11447772-d32d4812803e8fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n查阅资料发现:\n**vue有两种形式的代码 compiler（模板）模式和runtime模式（运行）\nvue模块的package.json的main字段默认为runtime模式， 指向\"dist/vue.runtime.common.js\"位置。这是vue升级到2.0之后就有的特点。**\n\n但此时我们main.js的写法是\n```\n// src/main.js\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n// console.log('hello world');\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  }\n})\n\n```\n##### 解决方案 一\n\n```\n// src/main.js\n//import Vue from 'vue';\n import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n// console.log('hello world');\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  }\n})\n\n```\n因为vue2.0默认的是runtime模式，需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript代码；\n##### 解决方案 二(常规操作)\n\n```\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  //module.exports commonjs规范\n  entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包文件路径\n    publicPath: '/dist/', // 通过devServer访问路径\n    filename: 'build.js' // 打包后的文件名\n  },\n  devServer: {\n    historyApiFallback: true,\n    overlay: true\n  },\n  resolve: { // 修改别名，import Vue from ‘vue’ 这行代码被解析为 import Vue from ‘vue/dist/vue.esm.js\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js'\n    }\n  },\n};\n\n```\n> 这个修改和上次是一样的意思，不过相对雅观很多...\n\n#### 解决方案 三\n修改main.js的模式\n1. compiler 模式\n```javascript\n// src/main.js\n// compiler 模式\nnew Vue({\n  el: '#app',\n})\n```\n2.runtime 模式\n```\n//runtime模式\nnew Vue({\nrender: h => h(App)  // App.vue\n}).$mount(\"#app\")\n```\n将1换成2，但我们推荐使用方案二；\n\n最后 页面展示如下:\n![hello Vue@2.0](https://upload-images.jianshu.io/upload_images/11447772-4470400cac4db5f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 引入css和scss\n\n> **webpack默认支持的是js的模块化，如果需要其他类型文件也支持模块化开发，则需要引入相应的loader用以解析!**\n\n安装相关依赖\n```javascript\nnpm i node-sass css-loader vue-style-loader sass-loader --save-dev\n```\n webpack.config.js 修改如下\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  //module.exports commonjs规范\n  entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包文件路径\n    publicPath: '/dist/', // 通过devServer访问路径\n    filename: 'build.js' // 打包后的文件名\n  },\n  devServer: {\n    historyApiFallback: true,\n    overlay: true\n  },\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js'\n    }\n  },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/,\n         use: [\n           'vue-style-loader',\n           'css-loader'\n         ],\n       },\n       { // scss\n         test: /\\.scss$/,\n         use: [\n           'vue-style-loader',\n           'css-loader',\n           'sass-loader'\n         ],\n       }\n     ]\n   }\n};\n\n```\n此时scss 及 css都能在开发中使用并且模块化引入了\n\n### 语法转译 ES6 => ES5\n引入相关依赖 利用bable转译\n```javascript\nnpm i babel-core babel-loader babel-preset-env babel-preset-stage-3 --save-dev\n```\n**其中  babel-preset-stage是不同阶段语法提案的转码规则（共有4个阶段），选装一个,其中0最厉害**\n> npm install --save-dev babel-preset-stage-0\nnpm install --save-dev babel-preset-stage-1\nnpm install --save-dev babel-preset-stage-2\nnpm install --save-dev babel-preset-stage-3\n```\n// .babelrc\n{\n  \"presets\": [\n    [\"env\", { \"modules\": false }],\n    \"stage-3\"\n  ]\n}\n\n```\n同时修改 webpack.config.js\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  //module.exports commonjs规范\n  entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包文件路径\n    publicPath: '/dist/', // 通过devServer访问路径\n    filename: 'build.js' // 打包后的文件名\n  },\n  devServer: {\n    historyApiFallback: true,\n    overlay: true\n  },\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js'\n    }\n  },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/,\n         use: [\n           'vue-style-loader',\n           'css-loader'\n         ],\n       },\n       { // scss\n         test: /\\.scss$/,\n         use: [\n           'vue-style-loader',\n           'css-loader',\n           'sass-loader'\n         ],\n       },\n       { // 添加解析js的loader\n         test: /\\.js$/,\n         loader: 'babel-loader',\n         exclude: /node_modules/\n       }\n     ]\n   }\n};\n\n```\n此时我们修改main.js尝试使用es6语法\n```javascript\n// src/main.js\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n\n// console.log('hello world');\n\nconst say = function () {\n  return new Promise((resolve, reject) => {\n    resolve('I am es6');\n  })\n}\n\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  },\n  methods: {\n    updateData() {\n      say().then((res)=>{\n        this.mess = res;\n      });\n    },\n\n  },\n  created() {\n    this.updateData();\n  }\n})\n\n```\n此时页面输出效果如下\n![I am es6](https://upload-images.jianshu.io/upload_images/11447772-b3232207a960b915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n虽然满足我们使用了，那么接下来我们尝试一下ES7支持与否\nmain.js修改如下:\n```JavaScript\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n\n// console.log('hello world');\n\nconst say = function () {\n  return new Promise((resolve, reject) => {\n    resolve('I am es7');\n  })\n}\n\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  },\n  methods: {\n    /*updateData() {\n      say().then((res)=>{\n        this.mess = res;\n      });\n    },*/\n    async updateData() {\n      const mess = await say();\n      this.mess = mess;\n    }\n  },\n  created() {\n    this.updateData();\n  }\n})\n\n```\n页面展示如下:\n![ES7测试](https://upload-images.jianshu.io/upload_images/11447772-b1ef12f2c2f7effb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n此时看到控制台报错\n> \"ReferenceError: regeneratorRuntime is not defined\"\n\n查阅相关文章发现， 要想对es7语法进行支持，还需要安装相关依赖进行转译；\n##### 这里有两种方案\n##### 方案一\n```javascript\nnpm i --save-dev babel-plugin-transform-runtime\n```\n修改.babelrc文件\n```\n// .babelrc\n{\n\t\"presets\": [\n\t\t[\"env\", { \"modules\": false }],\n\t\t\"stage-3\"\n\t],\n\t\"plugins\": [[  //  参考 https://www.jianshu.com/p/7a7f7abcddb5\n\t\t\"transform-runtime\",\n\t\t{\n\t\t\t\"helpers\": false,\n\t\t\t\"polyfill\": false,\n\t\t\t\"regenerator\": true,\n\t\t\t\"moduleName\": \"babel-runtime\"\n\t\t}\n\t]]\n}\n```\n这里顺带解释一下preset与babel的关系:\n* preset中已经包含了一组用来转换ES6+的语法的插件,如果只使用少数新特性而非大多数新特性,可以不使用preset而只使用对应的转换插件\n* babel默认只转换语法,而不转换新的API,如需使用新的API,还需要使用对应的转换插件或者polyfill\n> 例如，默认情况下babel可以将箭头函数，class等语法转换为ES5兼容的形式，但是却不能转换Map，Set，Promise等新的全局对象，这时候就需要使用polyfill去模拟这些新特性\n\n此时看到页面输出正常:\n![ES7正常](https://upload-images.jianshu.io/upload_images/11447772-0bd3c3d1769d22ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 方案二\n全局babel-polyfill\n```\nnpm i babel-polyfill --save-dev\n```\n webpack.config.js修改如下 **注意看注释**\n```JavaScript\n// webpack.config.js\n  // entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  entry: ['babel-polyfill', './src/main.js'], // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包 参考 https://www.jianshu.com/p/3b27dfc6785c\n```\n此时重新跑项目npm run dev 结果方案一\n\n>es6与es7转译部分参考文章\n[babel-polyfill的几种使用方式\n](https://www.jianshu.com/p/3b27dfc6785c)[babel的使用](https://www.jianshu.com/p/7a7f7abcddb5)\n\n### 文章最后\n> 项目搭建，缺啥补啥！！ 项目完整地址查看@王一诺[wlove_c/webpack4.0+vue2.0]([https://github.com/wLove-c/webpack4-vue2](https://github.com/wLove-c/webpack4-vue2)\n)\n","source":"_posts/coding-20190612.md","raw":"---\ntitle: webpack4.0+加vue2.0+从零开始搭设vue项目\ntags: vue\ncategories: 编程\n---\n\n\n@[TOC](webpack4+加vue2+从零开始搭设vue项目)\n\n本地环境\n> node -v    // v9.1.0\nnpm -v  // 6.5.0\nwebpack -v   // 4.32.2\nwebpack-cli -v // 3.3.2\n\n*这里需要注意的是webpack4+以后需要单独安装webpack-cli*\n### 起步\n#### 1.初始化项目\n```\nnpm init\n```\n一直enter生成package.json文件（小技巧:npm init -y 可以免去繁琐的enter）\n#### 2.安装依赖\n```\nnpm i webpack webpack-cli webpack-dev-server --save-dev\n```\n> 想要深入上述依赖请转[webpack文档](https://webpack.js.org/configuration)\n\n依赖安装成功接下来就开始动手吧\n#### 3.目录文件配置\n根目录鼠标右键新建index.html    webpack.config.js  src文件夹或：\n```\n// window\ntype >webpcak.config.js\ntype >index.html\nmd src\n\n//mac 土豪玩家\ntouch webpcak.config.js\ntouch index.html\nmkdir src\n```\n\nsrc目录下面新建 main.js\n\n此时目录如下\n```\nproject/\n        src/\n            main.js\n        webpack.config.js\n        index.html\n        package.json\n\n```\n内容如下：\n```javascript\n//index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>webpack从零搭设</title>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n</html>\n\n```\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\nmodul.exports = {}\n```\n#### 4.配置index.html及webpack.config.js\n首先\nmain.js修改如下:\n```javascript\n// src/main.js\nconsole.log('hello world');\n```\nwebpack.config.js修改如下:\n\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  // module.exports commonjs规范\n  entry: './src/main.js', // 项目入口文件，webpack将从main.js开始，把所有依赖的js都打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包后的输出路径 可修改\n    publicPath: '/dist/', // 通过devServer访问路径 可修改\n    filename: 'build.js' // 打包后的文件名 可修改\n  },\n  devServer: {\n    historyApiFallback: true, // When using the HTML5 History API, the `index.html` page will likely have to be served in place of any `404` responses\n    overlay: true //Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors\n  },\n};\n\n```\nindex.html 修改如下 *增加引入打包后的js*\n```javascript\n// index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>webpack从零搭设</title>\n</head>\n<body>\n<div id=\"app\"></div>\n</body>\n<script src=\"/dist/build.js\"></script>\n</html>\n\n```\npackage.json修改如下：\n```json\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --open --hot\",\n    \"build\": \"webpack --progress --hide-modules\"\n  },\n```\n> webpack-dev-server会启动一个静态资源web服务器 --hot参数表示启动热更新\n\n重新启动服务\n```\nnpm run dev\n```\n打开控制台可以看到 有输出hello world\n![控制台输出hello world](https://upload-images.jianshu.io/upload_images/11447772-436a3617acf0b57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 5.vue的起步\n安装vue\n```javascript\nnpm install vue --save\n```\n修改main.js如下\n```\n// src/main.js\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n// console.log('hello world');\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  }\n})\n\n```\n此时 修改index.html如下:\n```JavaScript\n// index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>webpack从零搭设</title>\n</head>\n<body>\n<div id=\"app\">\n\t{{ mess }}\n</div>\n</body>\n<script src=\"/dist/build.js\"></script>\n</html>\n\n```\n重新启动服务\n```JavaScript\nnpm run build\nnpm run dev\n```\n此时\n![控制台报错，页面也未显示hello Vue！](https://upload-images.jianshu.io/upload_images/11447772-d32d4812803e8fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n查阅资料发现:\n**vue有两种形式的代码 compiler（模板）模式和runtime模式（运行）\nvue模块的package.json的main字段默认为runtime模式， 指向\"dist/vue.runtime.common.js\"位置。这是vue升级到2.0之后就有的特点。**\n\n但此时我们main.js的写法是\n```\n// src/main.js\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n// console.log('hello world');\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  }\n})\n\n```\n##### 解决方案 一\n\n```\n// src/main.js\n//import Vue from 'vue';\n import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n// console.log('hello world');\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  }\n})\n\n```\n因为vue2.0默认的是runtime模式，需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript代码；\n##### 解决方案 二(常规操作)\n\n```\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  //module.exports commonjs规范\n  entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包文件路径\n    publicPath: '/dist/', // 通过devServer访问路径\n    filename: 'build.js' // 打包后的文件名\n  },\n  devServer: {\n    historyApiFallback: true,\n    overlay: true\n  },\n  resolve: { // 修改别名，import Vue from ‘vue’ 这行代码被解析为 import Vue from ‘vue/dist/vue.esm.js\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js'\n    }\n  },\n};\n\n```\n> 这个修改和上次是一样的意思，不过相对雅观很多...\n\n#### 解决方案 三\n修改main.js的模式\n1. compiler 模式\n```javascript\n// src/main.js\n// compiler 模式\nnew Vue({\n  el: '#app',\n})\n```\n2.runtime 模式\n```\n//runtime模式\nnew Vue({\nrender: h => h(App)  // App.vue\n}).$mount(\"#app\")\n```\n将1换成2，但我们推荐使用方案二；\n\n最后 页面展示如下:\n![hello Vue@2.0](https://upload-images.jianshu.io/upload_images/11447772-4470400cac4db5f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 引入css和scss\n\n> **webpack默认支持的是js的模块化，如果需要其他类型文件也支持模块化开发，则需要引入相应的loader用以解析!**\n\n安装相关依赖\n```javascript\nnpm i node-sass css-loader vue-style-loader sass-loader --save-dev\n```\n webpack.config.js 修改如下\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  //module.exports commonjs规范\n  entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包文件路径\n    publicPath: '/dist/', // 通过devServer访问路径\n    filename: 'build.js' // 打包后的文件名\n  },\n  devServer: {\n    historyApiFallback: true,\n    overlay: true\n  },\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js'\n    }\n  },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/,\n         use: [\n           'vue-style-loader',\n           'css-loader'\n         ],\n       },\n       { // scss\n         test: /\\.scss$/,\n         use: [\n           'vue-style-loader',\n           'css-loader',\n           'sass-loader'\n         ],\n       }\n     ]\n   }\n};\n\n```\n此时scss 及 css都能在开发中使用并且模块化引入了\n\n### 语法转译 ES6 => ES5\n引入相关依赖 利用bable转译\n```javascript\nnpm i babel-core babel-loader babel-preset-env babel-preset-stage-3 --save-dev\n```\n**其中  babel-preset-stage是不同阶段语法提案的转码规则（共有4个阶段），选装一个,其中0最厉害**\n> npm install --save-dev babel-preset-stage-0\nnpm install --save-dev babel-preset-stage-1\nnpm install --save-dev babel-preset-stage-2\nnpm install --save-dev babel-preset-stage-3\n```\n// .babelrc\n{\n  \"presets\": [\n    [\"env\", { \"modules\": false }],\n    \"stage-3\"\n  ]\n}\n\n```\n同时修改 webpack.config.js\n```javascript\n// webpack.config.js\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {  //module.exports commonjs规范\n  entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  output: {\n    path: path.resolve(__dirname, './dist'), // 项目的打包文件路径\n    publicPath: '/dist/', // 通过devServer访问路径\n    filename: 'build.js' // 打包后的文件名\n  },\n  devServer: {\n    historyApiFallback: true,\n    overlay: true\n  },\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js'\n    }\n  },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/,\n         use: [\n           'vue-style-loader',\n           'css-loader'\n         ],\n       },\n       { // scss\n         test: /\\.scss$/,\n         use: [\n           'vue-style-loader',\n           'css-loader',\n           'sass-loader'\n         ],\n       },\n       { // 添加解析js的loader\n         test: /\\.js$/,\n         loader: 'babel-loader',\n         exclude: /node_modules/\n       }\n     ]\n   }\n};\n\n```\n此时我们修改main.js尝试使用es6语法\n```javascript\n// src/main.js\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n\n// console.log('hello world');\n\nconst say = function () {\n  return new Promise((resolve, reject) => {\n    resolve('I am es6');\n  })\n}\n\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  },\n  methods: {\n    updateData() {\n      say().then((res)=>{\n        this.mess = res;\n      });\n    },\n\n  },\n  created() {\n    this.updateData();\n  }\n})\n\n```\n此时页面输出效果如下\n![I am es6](https://upload-images.jianshu.io/upload_images/11447772-b3232207a960b915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n虽然满足我们使用了，那么接下来我们尝试一下ES7支持与否\nmain.js修改如下:\n```JavaScript\nimport Vue from 'vue';\n// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build\n\n\n// console.log('hello world');\n\nconst say = function () {\n  return new Promise((resolve, reject) => {\n    resolve('I am es7');\n  })\n}\n\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    mess: 'Hello Vue@2.0!'\n  },\n  methods: {\n    /*updateData() {\n      say().then((res)=>{\n        this.mess = res;\n      });\n    },*/\n    async updateData() {\n      const mess = await say();\n      this.mess = mess;\n    }\n  },\n  created() {\n    this.updateData();\n  }\n})\n\n```\n页面展示如下:\n![ES7测试](https://upload-images.jianshu.io/upload_images/11447772-b1ef12f2c2f7effb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n此时看到控制台报错\n> \"ReferenceError: regeneratorRuntime is not defined\"\n\n查阅相关文章发现， 要想对es7语法进行支持，还需要安装相关依赖进行转译；\n##### 这里有两种方案\n##### 方案一\n```javascript\nnpm i --save-dev babel-plugin-transform-runtime\n```\n修改.babelrc文件\n```\n// .babelrc\n{\n\t\"presets\": [\n\t\t[\"env\", { \"modules\": false }],\n\t\t\"stage-3\"\n\t],\n\t\"plugins\": [[  //  参考 https://www.jianshu.com/p/7a7f7abcddb5\n\t\t\"transform-runtime\",\n\t\t{\n\t\t\t\"helpers\": false,\n\t\t\t\"polyfill\": false,\n\t\t\t\"regenerator\": true,\n\t\t\t\"moduleName\": \"babel-runtime\"\n\t\t}\n\t]]\n}\n```\n这里顺带解释一下preset与babel的关系:\n* preset中已经包含了一组用来转换ES6+的语法的插件,如果只使用少数新特性而非大多数新特性,可以不使用preset而只使用对应的转换插件\n* babel默认只转换语法,而不转换新的API,如需使用新的API,还需要使用对应的转换插件或者polyfill\n> 例如，默认情况下babel可以将箭头函数，class等语法转换为ES5兼容的形式，但是却不能转换Map，Set，Promise等新的全局对象，这时候就需要使用polyfill去模拟这些新特性\n\n此时看到页面输出正常:\n![ES7正常](https://upload-images.jianshu.io/upload_images/11447772-0bd3c3d1769d22ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##### 方案二\n全局babel-polyfill\n```\nnpm i babel-polyfill --save-dev\n```\n webpack.config.js修改如下 **注意看注释**\n```JavaScript\n// webpack.config.js\n  // entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包\n  entry: ['babel-polyfill', './src/main.js'], // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包 参考 https://www.jianshu.com/p/3b27dfc6785c\n```\n此时重新跑项目npm run dev 结果方案一\n\n>es6与es7转译部分参考文章\n[babel-polyfill的几种使用方式\n](https://www.jianshu.com/p/3b27dfc6785c)[babel的使用](https://www.jianshu.com/p/7a7f7abcddb5)\n\n### 文章最后\n> 项目搭建，缺啥补啥！！ 项目完整地址查看@王一诺[wlove_c/webpack4.0+vue2.0]([https://github.com/wLove-c/webpack4-vue2](https://github.com/wLove-c/webpack4-vue2)\n)\n","slug":"coding-20190612","published":1,"date":"2020-05-18T06:08:34.682Z","updated":"2020-05-18T06:08:34.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qif8000f0ohyuu0nn1o0","content":"<p>@<a href=\"webpack4+加vue2+从零开始搭设vue项目\">TOC</a></p>\n<p>本地环境</p>\n<blockquote>\n<p>node -v    // v9.1.0<br>npm -v  // 6.5.0<br>webpack -v   // 4.32.2<br>webpack-cli -v // 3.3.2</p>\n</blockquote>\n<p><em>这里需要注意的是webpack4+以后需要单独安装webpack-cli</em></p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"1.初始化项目\"></a>1.初始化项目</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>一直enter生成package.json文件（小技巧:npm init -y 可以免去繁琐的enter）</p>\n<h4 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2.安装依赖\"></a>2.安装依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>想要深入上述依赖请转<a href=\"https://webpack.js.org/configuration\" target=\"_blank\" rel=\"noopener\">webpack文档</a></p>\n</blockquote>\n<p>依赖安装成功接下来就开始动手吧</p>\n<h4 id=\"3-目录文件配置\"><a href=\"#3-目录文件配置\" class=\"headerlink\" title=\"3.目录文件配置\"></a>3.目录文件配置</h4><p>根目录鼠标右键新建index.html    webpack.config.js  src文件夹或：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// window</span><br><span class=\"line\">type &gt;webpcak.config.js</span><br><span class=\"line\">type &gt;index.html</span><br><span class=\"line\">md src</span><br><span class=\"line\"></span><br><span class=\"line\">//mac 土豪玩家</span><br><span class=\"line\">touch webpcak.config.js</span><br><span class=\"line\">touch index.html</span><br><span class=\"line\">mkdir src</span><br></pre></td></tr></table></figure></p>\n<p>src目录下面新建 main.js</p>\n<p>此时目录如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            main.js</span><br><span class=\"line\">        webpack.config.js</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        package.json</span><br></pre></td></tr></table></figure></p>\n<p>内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;webpack从零搭设&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\">modul.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-配置index-html及webpack-config-js\"><a href=\"#4-配置index-html及webpack-config-js\" class=\"headerlink\" title=\"4.配置index.html及webpack.config.js\"></a>4.配置index.html及webpack.config.js</h4><p>首先<br>main.js修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>webpack.config.js修改如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  <span class=\"comment\">// module.exports commonjs规范</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">// 项目入口文件，webpack将从main.js开始，把所有依赖的js都打包</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 项目的打包后的输出路径 可修改</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>, <span class=\"comment\">// 通过devServer访问路径 可修改</span></span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span> <span class=\"comment\">// 打包后的文件名 可修改</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">// When using the HTML5 History API, the `index.html` page will likely have to be served in place of any `404` responses</span></span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span> <span class=\"comment\">//Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>index.html 修改如下 <em>增加引入打包后的js</em><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;webpack从零搭设&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"/</span>dist/build.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>package.json修改如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"dev\": \"webpack-dev-server --open --hot\",</span><br><span class=\"line\">    \"build\": \"webpack --progress --hide-modules\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>webpack-dev-server会启动一个静态资源web服务器 –hot参数表示启动热更新</p>\n</blockquote>\n<p>重新启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>打开控制台可以看到 有输出hello world<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-436a3617acf0b57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"控制台输出hello world\"></p>\n<h4 id=\"5-vue的起步\"><a href=\"#5-vue的起步\" class=\"headerlink\" title=\"5.vue的起步\"></a>5.vue的起步</h4><p>安装vue<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue --save</span><br></pre></td></tr></table></figure></p>\n<p>修改main.js如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">import Vue from &apos;vue&apos;;</span><br><span class=\"line\">// import Vue from &apos;vue/dist/vue.esm.js&apos;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span><br><span class=\"line\"></span><br><span class=\"line\">// console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: &apos;Hello Vue@2.0!&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此时 修改index.html如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;webpack从零搭设&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t&#123;&#123; mess &#125;&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"/dist/build.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>重新启动服务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>此时<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d32d4812803e8fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"控制台报错，页面也未显示hello Vue！\"></p>\n<p>查阅资料发现:<br><strong>vue有两种形式的代码 compiler（模板）模式和runtime模式（运行）<br>vue模块的package.json的main字段默认为runtime模式， 指向”dist/vue.runtime.common.js”位置。这是vue升级到2.0之后就有的特点。</strong></p>\n<p>但此时我们main.js的写法是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">import Vue from &apos;vue&apos;;</span><br><span class=\"line\">// import Vue from &apos;vue/dist/vue.esm.js&apos;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span><br><span class=\"line\"></span><br><span class=\"line\">// console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: &apos;Hello Vue@2.0!&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"解决方案-一\"><a href=\"#解决方案-一\" class=\"headerlink\" title=\"解决方案 一\"></a>解决方案 一</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">//import Vue from &apos;vue&apos;;</span><br><span class=\"line\"> import Vue from &apos;vue/dist/vue.esm.js&apos;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span><br><span class=\"line\"></span><br><span class=\"line\">// console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: &apos;Hello Vue@2.0!&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为vue2.0默认的是runtime模式，需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript代码；</p>\n<h5 id=\"解决方案-二-常规操作\"><a href=\"#解决方案-二-常规操作\" class=\"headerlink\" title=\"解决方案 二(常规操作)\"></a>解决方案 二(常规操作)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.config.js</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;  //module.exports commonjs规范</span><br><span class=\"line\">  entry: &apos;./src/main.js&apos;, // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;), // 项目的打包文件路径</span><br><span class=\"line\">    publicPath: &apos;/dist/&apos;, // 通过devServer访问路径</span><br><span class=\"line\">    filename: &apos;build.js&apos; // 打包后的文件名</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: true,</span><br><span class=\"line\">    overlay: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123; // 修改别名，import Vue from ‘vue’ 这行代码被解析为 import Vue from ‘vue/dist/vue.esm.js</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个修改和上次是一样的意思，不过相对雅观很多…</p>\n</blockquote>\n<h4 id=\"解决方案-三\"><a href=\"#解决方案-三\" class=\"headerlink\" title=\"解决方案 三\"></a>解决方案 三</h4><p>修改main.js的模式</p>\n<ol>\n<li>compiler 模式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"comment\">// compiler 模式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.runtime 模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//runtime模式</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">render: h =&gt; h(App)  // App.vue</span><br><span class=\"line\">&#125;).$mount(&quot;#app&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>将1换成2，但我们推荐使用方案二；</p>\n<p>最后 页面展示如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-4470400cac4db5f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hello Vue@2.0\"></p>\n<h3 id=\"引入css和scss\"><a href=\"#引入css和scss\" class=\"headerlink\" title=\"引入css和scss\"></a>引入css和scss</h3><blockquote>\n<p><strong>webpack默认支持的是js的模块化，如果需要其他类型文件也支持模块化开发，则需要引入相应的loader用以解析!</strong></p>\n</blockquote>\n<p>安装相关依赖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-sass css-loader vue-style-loader sass-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p> webpack.config.js 修改如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  <span class=\"comment\">//module.exports commonjs规范</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">// 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 项目的打包文件路径</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>, <span class=\"comment\">// 通过devServer访问路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span> <span class=\"comment\">// 打包后的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">   <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">     rules: [</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123; <span class=\"comment\">// scss</span></span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>此时scss 及 css都能在开发中使用并且模块化引入了</p>\n<h3 id=\"语法转译-ES6-gt-ES5\"><a href=\"#语法转译-ES6-gt-ES5\" class=\"headerlink\" title=\"语法转译 ES6 =&gt; ES5\"></a>语法转译 ES6 =&gt; ES5</h3><p>引入相关依赖 利用bable转译<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-core babel-loader babel-preset-env babel-preset-stage<span class=\"number\">-3</span> --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>其中  babel-preset-stage是不同阶段语法提案的转码规则（共有4个阶段），选装一个,其中0最厉害</strong></p>\n<blockquote>\n<p>npm install –save-dev babel-preset-stage-0<br>npm install –save-dev babel-preset-stage-1<br>npm install –save-dev babel-preset-stage-2<br>npm install –save-dev babel-preset-stage-3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [</span><br><span class=\"line\">    [&quot;env&quot;, &#123; &quot;modules&quot;: false &#125;],</span><br><span class=\"line\">    &quot;stage-3&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>同时修改 webpack.config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  <span class=\"comment\">//module.exports commonjs规范</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">// 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 项目的打包文件路径</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>, <span class=\"comment\">// 通过devServer访问路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span> <span class=\"comment\">// 打包后的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">   <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">     rules: [</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123; <span class=\"comment\">// scss</span></span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123; <span class=\"comment\">// 添加解析js的loader</span></span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">         loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">         exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>此时我们修改main.js尝试使用es6语法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"comment\">// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log('hello world');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'I am es6'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: <span class=\"string\">'Hello Vue@2.0!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    updateData() &#123;</span><br><span class=\"line\">      say().then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mess = res;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.updateData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此时页面输出效果如下<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b3232207a960b915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"I am es6\"><br>虽然满足我们使用了，那么接下来我们尝试一下ES7支持与否<br>main.js修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"comment\">// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log('hello world');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'I am es7'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: <span class=\"string\">'Hello Vue@2.0!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*updateData() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      say().then((res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.mess = res;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;,*/</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> updateData() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> mess = <span class=\"keyword\">await</span> say();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mess = mess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.updateData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>页面展示如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b1ef12f2c2f7effb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ES7测试\"><br>此时看到控制台报错</p>\n<blockquote>\n<p>“ReferenceError: regeneratorRuntime is not defined”</p>\n</blockquote>\n<p>查阅相关文章发现， 要想对es7语法进行支持，还需要安装相关依赖进行转译；</p>\n<h5 id=\"这里有两种方案\"><a href=\"#这里有两种方案\" class=\"headerlink\" title=\"这里有两种方案\"></a>这里有两种方案</h5><h5 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev babel-plugin-transform-runtime</span><br></pre></td></tr></table></figure>\n<p>修改.babelrc文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;presets&quot;: [</span><br><span class=\"line\">\t\t[&quot;env&quot;, &#123; &quot;modules&quot;: false &#125;],</span><br><span class=\"line\">\t\t&quot;stage-3&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;plugins&quot;: [[  //  参考 https://www.jianshu.com/p/7a7f7abcddb5</span><br><span class=\"line\">\t\t&quot;transform-runtime&quot;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;helpers&quot;: false,</span><br><span class=\"line\">\t\t\t&quot;polyfill&quot;: false,</span><br><span class=\"line\">\t\t\t&quot;regenerator&quot;: true,</span><br><span class=\"line\">\t\t\t&quot;moduleName&quot;: &quot;babel-runtime&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里顺带解释一下preset与babel的关系:</p>\n<ul>\n<li>preset中已经包含了一组用来转换ES6+的语法的插件,如果只使用少数新特性而非大多数新特性,可以不使用preset而只使用对应的转换插件</li>\n<li>babel默认只转换语法,而不转换新的API,如需使用新的API,还需要使用对应的转换插件或者polyfill<blockquote>\n<p>例如，默认情况下babel可以将箭头函数，class等语法转换为ES5兼容的形式，但是却不能转换Map，Set，Promise等新的全局对象，这时候就需要使用polyfill去模拟这些新特性</p>\n</blockquote>\n</li>\n</ul>\n<p>此时看到页面输出正常:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-0bd3c3d1769d22ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ES7正常\"></p>\n<h5 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h5><p>全局babel-polyfill<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-polyfill --save-dev</span><br></pre></td></tr></table></figure></p>\n<p> webpack.config.js修改如下 <strong>注意看注释</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">  <span class=\"comment\">// entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span></span><br><span class=\"line\">  entry: [<span class=\"string\">'babel-polyfill'</span>, <span class=\"string\">'./src/main.js'</span>], <span class=\"comment\">// 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包 参考 https://www.jianshu.com/p/3b27dfc6785c</span></span><br></pre></td></tr></table></figure></p>\n<p>此时重新跑项目npm run dev 结果方案一</p>\n<blockquote>\n<p>es6与es7转译部分参考文章<br><a href=\"https://www.jianshu.com/p/3b27dfc6785c\" target=\"_blank\" rel=\"noopener\">babel-polyfill的几种使用方式\n</a><a href=\"https://www.jianshu.com/p/7a7f7abcddb5\" target=\"_blank\" rel=\"noopener\">babel的使用</a></p>\n</blockquote>\n<h3 id=\"文章最后\"><a href=\"#文章最后\" class=\"headerlink\" title=\"文章最后\"></a>文章最后</h3><blockquote>\n<p>项目搭建，缺啥补啥！！ 项目完整地址查看@王一诺<a href=\"[https://github.com/wLove-c/webpack4-vue2](https://github.com/wLove-c/webpack4-vue2\">wlove_c/webpack4.0+vue2.0</a><br>)</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"webpack4+加vue2+从零开始搭设vue项目\">TOC</a></p>\n<p>本地环境</p>\n<blockquote>\n<p>node -v    // v9.1.0<br>npm -v  // 6.5.0<br>webpack -v   // 4.32.2<br>webpack-cli -v // 3.3.2</p>\n</blockquote>\n<p><em>这里需要注意的是webpack4+以后需要单独安装webpack-cli</em></p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"1.初始化项目\"></a>1.初始化项目</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>一直enter生成package.json文件（小技巧:npm init -y 可以免去繁琐的enter）</p>\n<h4 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2.安装依赖\"></a>2.安装依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>想要深入上述依赖请转<a href=\"https://webpack.js.org/configuration\" target=\"_blank\" rel=\"noopener\">webpack文档</a></p>\n</blockquote>\n<p>依赖安装成功接下来就开始动手吧</p>\n<h4 id=\"3-目录文件配置\"><a href=\"#3-目录文件配置\" class=\"headerlink\" title=\"3.目录文件配置\"></a>3.目录文件配置</h4><p>根目录鼠标右键新建index.html    webpack.config.js  src文件夹或：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// window</span><br><span class=\"line\">type &gt;webpcak.config.js</span><br><span class=\"line\">type &gt;index.html</span><br><span class=\"line\">md src</span><br><span class=\"line\"></span><br><span class=\"line\">//mac 土豪玩家</span><br><span class=\"line\">touch webpcak.config.js</span><br><span class=\"line\">touch index.html</span><br><span class=\"line\">mkdir src</span><br></pre></td></tr></table></figure></p>\n<p>src目录下面新建 main.js</p>\n<p>此时目录如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project/</span><br><span class=\"line\">        src/</span><br><span class=\"line\">            main.js</span><br><span class=\"line\">        webpack.config.js</span><br><span class=\"line\">        index.html</span><br><span class=\"line\">        package.json</span><br></pre></td></tr></table></figure></p>\n<p>内容如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;webpack从零搭设&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\">modul.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-配置index-html及webpack-config-js\"><a href=\"#4-配置index-html及webpack-config-js\" class=\"headerlink\" title=\"4.配置index.html及webpack.config.js\"></a>4.配置index.html及webpack.config.js</h4><p>首先<br>main.js修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>webpack.config.js修改如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  <span class=\"comment\">// module.exports commonjs规范</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">// 项目入口文件，webpack将从main.js开始，把所有依赖的js都打包</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 项目的打包后的输出路径 可修改</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>, <span class=\"comment\">// 通过devServer访问路径 可修改</span></span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span> <span class=\"comment\">// 打包后的文件名 可修改</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">// When using the HTML5 History API, the `index.html` page will likely have to be served in place of any `404` responses</span></span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span> <span class=\"comment\">//Shows a full-screen overlay in the browser when there are compiler errors or warnings. Disabled by default. If you want to show only compiler errors</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>index.html 修改如下 <em>增加引入打包后的js</em><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;webpack从零搭设&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"/</span>dist/build.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>package.json修改如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"dev\": \"webpack-dev-server --open --hot\",</span><br><span class=\"line\">    \"build\": \"webpack --progress --hide-modules\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>webpack-dev-server会启动一个静态资源web服务器 –hot参数表示启动热更新</p>\n</blockquote>\n<p>重新启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>打开控制台可以看到 有输出hello world<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-436a3617acf0b57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"控制台输出hello world\"></p>\n<h4 id=\"5-vue的起步\"><a href=\"#5-vue的起步\" class=\"headerlink\" title=\"5.vue的起步\"></a>5.vue的起步</h4><p>安装vue<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue --save</span><br></pre></td></tr></table></figure></p>\n<p>修改main.js如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">import Vue from &apos;vue&apos;;</span><br><span class=\"line\">// import Vue from &apos;vue/dist/vue.esm.js&apos;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span><br><span class=\"line\"></span><br><span class=\"line\">// console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: &apos;Hello Vue@2.0!&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此时 修改index.html如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">\t&lt;title&gt;webpack从零搭设&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">\t&#123;&#123; mess &#125;&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"/dist/build.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>重新启动服务<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>此时<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d32d4812803e8fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"控制台报错，页面也未显示hello Vue！\"></p>\n<p>查阅资料发现:<br><strong>vue有两种形式的代码 compiler（模板）模式和runtime模式（运行）<br>vue模块的package.json的main字段默认为runtime模式， 指向”dist/vue.runtime.common.js”位置。这是vue升级到2.0之后就有的特点。</strong></p>\n<p>但此时我们main.js的写法是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">import Vue from &apos;vue&apos;;</span><br><span class=\"line\">// import Vue from &apos;vue/dist/vue.esm.js&apos;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span><br><span class=\"line\"></span><br><span class=\"line\">// console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: &apos;Hello Vue@2.0!&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"解决方案-一\"><a href=\"#解决方案-一\" class=\"headerlink\" title=\"解决方案 一\"></a>解决方案 一</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">//import Vue from &apos;vue&apos;;</span><br><span class=\"line\"> import Vue from &apos;vue/dist/vue.esm.js&apos;  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span><br><span class=\"line\"></span><br><span class=\"line\">// console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = new Vue(&#123;</span><br><span class=\"line\">  el: &apos;#app&apos;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: &apos;Hello Vue@2.0!&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>因为vue2.0默认的是runtime模式，需要借助如 webpack 的 vue-loader 工具把 .vue 文件编译成 JavaScript代码；</p>\n<h5 id=\"解决方案-二-常规操作\"><a href=\"#解决方案-二-常规操作\" class=\"headerlink\" title=\"解决方案 二(常规操作)\"></a>解决方案 二(常规操作)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.config.js</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;  //module.exports commonjs规范</span><br><span class=\"line\">  entry: &apos;./src/main.js&apos;, // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;), // 项目的打包文件路径</span><br><span class=\"line\">    publicPath: &apos;/dist/&apos;, // 通过devServer访问路径</span><br><span class=\"line\">    filename: &apos;build.js&apos; // 打包后的文件名</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: true,</span><br><span class=\"line\">    overlay: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123; // 修改别名，import Vue from ‘vue’ 这行代码被解析为 import Vue from ‘vue/dist/vue.esm.js</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个修改和上次是一样的意思，不过相对雅观很多…</p>\n</blockquote>\n<h4 id=\"解决方案-三\"><a href=\"#解决方案-三\" class=\"headerlink\" title=\"解决方案 三\"></a>解决方案 三</h4><p>修改main.js的模式</p>\n<ol>\n<li>compiler 模式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"comment\">// compiler 模式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.runtime 模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//runtime模式</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">render: h =&gt; h(App)  // App.vue</span><br><span class=\"line\">&#125;).$mount(&quot;#app&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>将1换成2，但我们推荐使用方案二；</p>\n<p>最后 页面展示如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-4470400cac4db5f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"hello Vue@2.0\"></p>\n<h3 id=\"引入css和scss\"><a href=\"#引入css和scss\" class=\"headerlink\" title=\"引入css和scss\"></a>引入css和scss</h3><blockquote>\n<p><strong>webpack默认支持的是js的模块化，如果需要其他类型文件也支持模块化开发，则需要引入相应的loader用以解析!</strong></p>\n</blockquote>\n<p>安装相关依赖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-sass css-loader vue-style-loader sass-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p> webpack.config.js 修改如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  <span class=\"comment\">//module.exports commonjs规范</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">// 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 项目的打包文件路径</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>, <span class=\"comment\">// 通过devServer访问路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span> <span class=\"comment\">// 打包后的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">   <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">     rules: [</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123; <span class=\"comment\">// scss</span></span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>此时scss 及 css都能在开发中使用并且模块化引入了</p>\n<h3 id=\"语法转译-ES6-gt-ES5\"><a href=\"#语法转译-ES6-gt-ES5\" class=\"headerlink\" title=\"语法转译 ES6 =&gt; ES5\"></a>语法转译 ES6 =&gt; ES5</h3><p>引入相关依赖 利用bable转译<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-core babel-loader babel-preset-env babel-preset-stage<span class=\"number\">-3</span> --save-dev</span><br></pre></td></tr></table></figure></p>\n<p><strong>其中  babel-preset-stage是不同阶段语法提案的转码规则（共有4个阶段），选装一个,其中0最厉害</strong></p>\n<blockquote>\n<p>npm install –save-dev babel-preset-stage-0<br>npm install –save-dev babel-preset-stage-1<br>npm install –save-dev babel-preset-stage-2<br>npm install –save-dev babel-preset-stage-3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [</span><br><span class=\"line\">    [&quot;env&quot;, &#123; &quot;modules&quot;: false &#125;],</span><br><span class=\"line\">    &quot;stage-3&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>同时修改 webpack.config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;  <span class=\"comment\">//module.exports commonjs规范</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">// 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"comment\">// 项目的打包文件路径</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>, <span class=\"comment\">// 通过devServer访问路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span> <span class=\"comment\">// 打包后的文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">   <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">     rules: [</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123; <span class=\"comment\">// scss</span></span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">         use: [</span><br><span class=\"line\">           <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">           <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">         ],</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       &#123; <span class=\"comment\">// 添加解析js的loader</span></span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">         loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">         exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>此时我们修改main.js尝试使用es6语法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"comment\">// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log('hello world');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'I am es6'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: <span class=\"string\">'Hello Vue@2.0!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    updateData() &#123;</span><br><span class=\"line\">      say().then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mess = res;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.updateData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此时页面输出效果如下<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b3232207a960b915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"I am es6\"><br>虽然满足我们使用了，那么接下来我们尝试一下ES7支持与否<br>main.js修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"comment\">// import Vue from 'vue/dist/vue.esm.js'  // 解决You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log('hello world');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'I am es7'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    mess: <span class=\"string\">'Hello Vue@2.0!'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*updateData() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      say().then((res)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.mess = res;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;,*/</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> updateData() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> mess = <span class=\"keyword\">await</span> say();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mess = mess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.updateData();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>页面展示如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b1ef12f2c2f7effb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ES7测试\"><br>此时看到控制台报错</p>\n<blockquote>\n<p>“ReferenceError: regeneratorRuntime is not defined”</p>\n</blockquote>\n<p>查阅相关文章发现， 要想对es7语法进行支持，还需要安装相关依赖进行转译；</p>\n<h5 id=\"这里有两种方案\"><a href=\"#这里有两种方案\" class=\"headerlink\" title=\"这里有两种方案\"></a>这里有两种方案</h5><h5 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev babel-plugin-transform-runtime</span><br></pre></td></tr></table></figure>\n<p>修改.babelrc文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;presets&quot;: [</span><br><span class=\"line\">\t\t[&quot;env&quot;, &#123; &quot;modules&quot;: false &#125;],</span><br><span class=\"line\">\t\t&quot;stage-3&quot;</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;plugins&quot;: [[  //  参考 https://www.jianshu.com/p/7a7f7abcddb5</span><br><span class=\"line\">\t\t&quot;transform-runtime&quot;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&quot;helpers&quot;: false,</span><br><span class=\"line\">\t\t\t&quot;polyfill&quot;: false,</span><br><span class=\"line\">\t\t\t&quot;regenerator&quot;: true,</span><br><span class=\"line\">\t\t\t&quot;moduleName&quot;: &quot;babel-runtime&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里顺带解释一下preset与babel的关系:</p>\n<ul>\n<li>preset中已经包含了一组用来转换ES6+的语法的插件,如果只使用少数新特性而非大多数新特性,可以不使用preset而只使用对应的转换插件</li>\n<li>babel默认只转换语法,而不转换新的API,如需使用新的API,还需要使用对应的转换插件或者polyfill<blockquote>\n<p>例如，默认情况下babel可以将箭头函数，class等语法转换为ES5兼容的形式，但是却不能转换Map，Set，Promise等新的全局对象，这时候就需要使用polyfill去模拟这些新特性</p>\n</blockquote>\n</li>\n</ul>\n<p>此时看到页面输出正常:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-0bd3c3d1769d22ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ES7正常\"></p>\n<h5 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h5><p>全局babel-polyfill<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-polyfill --save-dev</span><br></pre></td></tr></table></figure></p>\n<p> webpack.config.js修改如下 <strong>注意看注释</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">  <span class=\"comment\">// entry: './src/main.js', // 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包</span></span><br><span class=\"line\">  entry: [<span class=\"string\">'babel-polyfill'</span>, <span class=\"string\">'./src/main.js'</span>], <span class=\"comment\">// 项目的入口文件，webpack会从main.js开始，把所有依赖的js都加载打包 参考 https://www.jianshu.com/p/3b27dfc6785c</span></span><br></pre></td></tr></table></figure></p>\n<p>此时重新跑项目npm run dev 结果方案一</p>\n<blockquote>\n<p>es6与es7转译部分参考文章<br><a href=\"https://www.jianshu.com/p/3b27dfc6785c\" target=\"_blank\" rel=\"noopener\">babel-polyfill的几种使用方式\n</a><a href=\"https://www.jianshu.com/p/7a7f7abcddb5\" target=\"_blank\" rel=\"noopener\">babel的使用</a></p>\n</blockquote>\n<h3 id=\"文章最后\"><a href=\"#文章最后\" class=\"headerlink\" title=\"文章最后\"></a>文章最后</h3><blockquote>\n<p>项目搭建，缺啥补啥！！ 项目完整地址查看@王一诺<a href=\"[https://github.com/wLove-c/webpack4-vue2](https://github.com/wLove-c/webpack4-vue2\">wlove_c/webpack4.0+vue2.0</a><br>)</p>\n</blockquote>\n"},{"title":"js通过开始时间和结束时间计算出中间的所有日期","_content":"\n@[TOC](js通过开始时间和结束时间计算出中间的所有日期)\n\n### 写在前面\n**实际开发过程中，我们有许许多多的产品都设计到了时间，也有时候需要自己转化时间格式，这里推荐一个日期时间处理类库[momentjs](http://momentjs.cn/)，但很多时候，我们仅仅是转化个别时间，还没必要安装这么一个依赖；这篇文章将在未来持续更新，搜罗各种关于时间转化的方法**\n\n-----\n\n### 一 已知开始时间和结束时间  计算出中间的所有日期\n ```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getAllDate = (start, end) => {\n  let dateArr = []\n  let startArr = start.split('-')\n  let endArr = end.split('-')\n  let db = new Date()\n  db.setUTCFullYear(startArr[0], startArr[1] - 1, startArr[2])\n  let de = new Date()\n  de.setUTCFullYear(endArr[0], endArr[1] - 1, endArr[2])\n  let unixDb = db.getTime()\n  let unixDe = de.getTime()\n  let stamp\n  const oneDay = 24 * 60 * 60 * 1000;\n  for (stamp = unixDb; stamp <= unixDe;) {\n    dateArr.push(format(new Date(parseInt(stamp))))\n    stamp = stamp + oneDay\n  }\n  return dateArr\n}\n\n...\n// 使用\nconsole.log(getAllDate('2018-12-12', '2019-3-3'))\n\n```\n结果如下:\n![console.log(getAllDate('2018-12-12', '2019-3-3'))\n](https://upload-images.jianshu.io/upload_images/11447772-bc003c9bfdedb470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 二 最近七天 一个月 三个月 一年\n   **最近七天:**\n```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\n\nexport const getWeekDate = () => {\n  let myDate = new Date()\n  // 获取前一周时间\n  const oneDay = 24 * 60 * 60 * 1000;\n  let oneweekdate = new Date(myDate - 7 * oneDay)\n  let lastWeek = []\n  lastWeek.push(format(oneweekdate))\n  lastWeek.push(format(myDate))\n  return lastWeek\n}\n\n    ...\n // 使用\nconsole.log(getWeekDate())\n```\n控制台输出结果:\n![console.log(getWeekDate())](https://upload-images.jianshu.io/upload_images/11447772-c7b2d92c2f82387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**最近一个月:**\n```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getMonthDate = () => {\n  let nowDate = new Date()\n  let nowDateChange = new Date()\n  let lastMonth = []\n  // 获取前一月时间\n  nowDateChange.setMonth(nowDateChange.getMonth() - 1)\n  lastMonth.push(format(nowDateChange))\n  lastMonth.push(format(nowDate))\n  return lastMonth\n}\n    ...\n// 使用\n console.log(getMonthDate())\n```\n输出如下:\n![console.log(getMonthDate())](https://upload-images.jianshu.io/upload_images/11447772-2625f339bfd85b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**最近三个月**\n```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getThreeMonthDate = () => {\n  let nowDate = new Date()\n  let nowDateChange = new Date()\n  let threeMonth = []\n  // 获取前三月时间\n  nowDateChange.setMonth(nowDateChange.getMonth() - 3)\n  threeMonth.push(format(nowDateChange))\n  threeMonth.push(format(nowDate))\n  return threeMonth\n}\n    ...\n// 使用\nconsole.log(getThreeMonthDate())\n```\n输出如下:\n![console.log(getThreeMonthDate())](https://upload-images.jianshu.io/upload_images/11447772-c6c3b35602c1204b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**一年**\n```\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getYearDate = () => {\n  let nowDate = new Date()\n  let nowDateChange = new Date()\n  let lastYear = []\n  // 获取前一年时间\n  nowDateChange.setFullYear(nowDateChange.getFullYear()- 1)\n  lastYear.push(format(nowDateChange))\n  lastYear.push(format(nowDate))\n  return lastYear\n}\n\n    ...\n // 使用\nconsole.log(getYearDate())\n```\n输出如下:\n![console.log(getYearDate())](https://upload-images.jianshu.io/upload_images/11447772-18e43bb863ef2d93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 关于JavaScript Date 对象的方法详情请转@[W3 school](http://www.w3school.com.cn/jsref/jsref_obj_date.asp)\n\n> 更多文章请看我的博客@[王一诺](https://wlove-c.github.io/)  感谢阅读！\n","source":"_posts/coding-20190614.md","raw":"---\ntitle: js通过开始时间和结束时间计算出中间的所有日期\ntags: javaScript\ncategories: 编程\n---\n\n@[TOC](js通过开始时间和结束时间计算出中间的所有日期)\n\n### 写在前面\n**实际开发过程中，我们有许许多多的产品都设计到了时间，也有时候需要自己转化时间格式，这里推荐一个日期时间处理类库[momentjs](http://momentjs.cn/)，但很多时候，我们仅仅是转化个别时间，还没必要安装这么一个依赖；这篇文章将在未来持续更新，搜罗各种关于时间转化的方法**\n\n-----\n\n### 一 已知开始时间和结束时间  计算出中间的所有日期\n ```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getAllDate = (start, end) => {\n  let dateArr = []\n  let startArr = start.split('-')\n  let endArr = end.split('-')\n  let db = new Date()\n  db.setUTCFullYear(startArr[0], startArr[1] - 1, startArr[2])\n  let de = new Date()\n  de.setUTCFullYear(endArr[0], endArr[1] - 1, endArr[2])\n  let unixDb = db.getTime()\n  let unixDe = de.getTime()\n  let stamp\n  const oneDay = 24 * 60 * 60 * 1000;\n  for (stamp = unixDb; stamp <= unixDe;) {\n    dateArr.push(format(new Date(parseInt(stamp))))\n    stamp = stamp + oneDay\n  }\n  return dateArr\n}\n\n...\n// 使用\nconsole.log(getAllDate('2018-12-12', '2019-3-3'))\n\n```\n结果如下:\n![console.log(getAllDate('2018-12-12', '2019-3-3'))\n](https://upload-images.jianshu.io/upload_images/11447772-bc003c9bfdedb470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 二 最近七天 一个月 三个月 一年\n   **最近七天:**\n```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\n\nexport const getWeekDate = () => {\n  let myDate = new Date()\n  // 获取前一周时间\n  const oneDay = 24 * 60 * 60 * 1000;\n  let oneweekdate = new Date(myDate - 7 * oneDay)\n  let lastWeek = []\n  lastWeek.push(format(oneweekdate))\n  lastWeek.push(format(myDate))\n  return lastWeek\n}\n\n    ...\n // 使用\nconsole.log(getWeekDate())\n```\n控制台输出结果:\n![console.log(getWeekDate())](https://upload-images.jianshu.io/upload_images/11447772-c7b2d92c2f82387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**最近一个月:**\n```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getMonthDate = () => {\n  let nowDate = new Date()\n  let nowDateChange = new Date()\n  let lastMonth = []\n  // 获取前一月时间\n  nowDateChange.setMonth(nowDateChange.getMonth() - 1)\n  lastMonth.push(format(nowDateChange))\n  lastMonth.push(format(nowDate))\n  return lastMonth\n}\n    ...\n// 使用\n console.log(getMonthDate())\n```\n输出如下:\n![console.log(getMonthDate())](https://upload-images.jianshu.io/upload_images/11447772-2625f339bfd85b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**最近三个月**\n```javaScript\n// 中国标准时间format yyyy-mm-dd\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getThreeMonthDate = () => {\n  let nowDate = new Date()\n  let nowDateChange = new Date()\n  let threeMonth = []\n  // 获取前三月时间\n  nowDateChange.setMonth(nowDateChange.getMonth() - 3)\n  threeMonth.push(format(nowDateChange))\n  threeMonth.push(format(nowDate))\n  return threeMonth\n}\n    ...\n// 使用\nconsole.log(getThreeMonthDate())\n```\n输出如下:\n![console.log(getThreeMonthDate())](https://upload-images.jianshu.io/upload_images/11447772-c6c3b35602c1204b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**一年**\n```\nconst format = (time) => {\n  let ymd = ''\n  let mouth = (time.getMonth() + 1) >= 10 ? (time.getMonth() + 1) : ('0' + (time.getMonth() + 1))\n  let day = time.getDate() >= 10 ? time.getDate() : ('0' + time.getDate())\n  ymd += time.getFullYear() + '-' // 获取年份。\n  ymd += mouth + '-' // 获取月份。\n  ymd += day // 获取日。\n  return ymd // 返回日期。\n}\n\nexport const getYearDate = () => {\n  let nowDate = new Date()\n  let nowDateChange = new Date()\n  let lastYear = []\n  // 获取前一年时间\n  nowDateChange.setFullYear(nowDateChange.getFullYear()- 1)\n  lastYear.push(format(nowDateChange))\n  lastYear.push(format(nowDate))\n  return lastYear\n}\n\n    ...\n // 使用\nconsole.log(getYearDate())\n```\n输出如下:\n![console.log(getYearDate())](https://upload-images.jianshu.io/upload_images/11447772-18e43bb863ef2d93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 关于JavaScript Date 对象的方法详情请转@[W3 school](http://www.w3school.com.cn/jsref/jsref_obj_date.asp)\n\n> 更多文章请看我的博客@[王一诺](https://wlove-c.github.io/)  感谢阅读！\n","slug":"coding-20190614","published":1,"date":"2020-05-18T06:08:34.682Z","updated":"2020-05-18T06:08:34.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qif9000h0ohygy8me5gb","content":"<p>@<a href=\"js通过开始时间和结束时间计算出中间的所有日期\">TOC</a></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p><strong>实际开发过程中，我们有许许多多的产品都设计到了时间，也有时候需要自己转化时间格式，这里推荐一个日期时间处理类库<a href=\"http://momentjs.cn/\" target=\"_blank\" rel=\"noopener\">momentjs</a>，但很多时候，我们仅仅是转化个别时间，还没必要安装这么一个依赖；这篇文章将在未来持续更新，搜罗各种关于时间转化的方法</strong></p>\n<hr>\n<h3 id=\"一-已知开始时间和结束时间-计算出中间的所有日期\"><a href=\"#一-已知开始时间和结束时间-计算出中间的所有日期\" class=\"headerlink\" title=\"一 已知开始时间和结束时间  计算出中间的所有日期\"></a>一 已知开始时间和结束时间  计算出中间的所有日期</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getAllDate = <span class=\"function\">(<span class=\"params\">start, end</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dateArr = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startArr = start.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> endArr = end.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> db = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  db.setUTCFullYear(startArr[<span class=\"number\">0</span>], startArr[<span class=\"number\">1</span>] - <span class=\"number\">1</span>, startArr[<span class=\"number\">2</span>])</span><br><span class=\"line\">  <span class=\"keyword\">let</span> de = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  de.setUTCFullYear(endArr[<span class=\"number\">0</span>], endArr[<span class=\"number\">1</span>] - <span class=\"number\">1</span>, endArr[<span class=\"number\">2</span>])</span><br><span class=\"line\">  <span class=\"keyword\">let</span> unixDb = db.getTime()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> unixDe = de.getTime()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stamp</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oneDay = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (stamp = unixDb; stamp &lt;= unixDe;) &#123;</span><br><span class=\"line\">    dateArr.push(format(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">parseInt</span>(stamp))))</span><br><span class=\"line\">    stamp = stamp + oneDay</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dateArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getAllDate(<span class=\"string\">'2018-12-12'</span>, <span class=\"string\">'2019-3-3'</span>))</span><br></pre></td></tr></table></figure>\n<p>结果如下:<br><img src=\"https://upload-images.jianshu.io/upload_images/11447772-bc003c9bfdedb470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getAllDate(&#39;2018-12-12&#39;, &#39;2019-3-3&#39;))\n\"></p>\n<h3 id=\"二-最近七天-一个月-三个月-一年\"><a href=\"#二-最近七天-一个月-三个月-一年\" class=\"headerlink\" title=\"二 最近七天 一个月 三个月 一年\"></a>二 最近七天 一个月 三个月 一年</h3><p>   <strong>最近七天:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getWeekDate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 获取前一周时间</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> oneDay = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> oneweekdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(myDate - <span class=\"number\">7</span> * oneDay)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastWeek = []</span><br><span class=\"line\">  lastWeek.push(format(oneweekdate))</span><br><span class=\"line\">  lastWeek.push(format(myDate))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastWeek</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> <span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getWeekDate())</span><br></pre></td></tr></table></figure></p>\n<p>控制台输出结果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-c7b2d92c2f82387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getWeekDate())\"></p>\n<p><strong>最近一个月:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getMonthDate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDateChange = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastMonth = []</span><br><span class=\"line\">  <span class=\"comment\">// 获取前一月时间</span></span><br><span class=\"line\">  nowDateChange.setMonth(nowDateChange.getMonth() - <span class=\"number\">1</span>)</span><br><span class=\"line\">  lastMonth.push(format(nowDateChange))</span><br><span class=\"line\">  lastMonth.push(format(nowDate))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastMonth</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(getMonthDate())</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-2625f339bfd85b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getMonthDate())\"><br><strong>最近三个月</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getThreeMonthDate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDateChange = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> threeMonth = []</span><br><span class=\"line\">  <span class=\"comment\">// 获取前三月时间</span></span><br><span class=\"line\">  nowDateChange.setMonth(nowDateChange.getMonth() - <span class=\"number\">3</span>)</span><br><span class=\"line\">  threeMonth.push(format(nowDateChange))</span><br><span class=\"line\">  threeMonth.push(format(nowDate))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> threeMonth</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getThreeMonthDate())</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-c6c3b35602c1204b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getThreeMonthDate())\"></p>\n<p><strong>一年</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const format = (time) =&gt; &#123;</span><br><span class=\"line\">  let ymd = &apos;&apos;</span><br><span class=\"line\">  let mouth = (time.getMonth() + 1) &gt;= 10 ? (time.getMonth() + 1) : (&apos;0&apos; + (time.getMonth() + 1))</span><br><span class=\"line\">  let day = time.getDate() &gt;= 10 ? time.getDate() : (&apos;0&apos; + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + &apos;-&apos; // 获取年份。</span><br><span class=\"line\">  ymd += mouth + &apos;-&apos; // 获取月份。</span><br><span class=\"line\">  ymd += day // 获取日。</span><br><span class=\"line\">  return ymd // 返回日期。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const getYearDate = () =&gt; &#123;</span><br><span class=\"line\">  let nowDate = new Date()</span><br><span class=\"line\">  let nowDateChange = new Date()</span><br><span class=\"line\">  let lastYear = []</span><br><span class=\"line\">  // 获取前一年时间</span><br><span class=\"line\">  nowDateChange.setFullYear(nowDateChange.getFullYear()- 1)</span><br><span class=\"line\">  lastYear.push(format(nowDateChange))</span><br><span class=\"line\">  lastYear.push(format(nowDate))</span><br><span class=\"line\">  return lastYear</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> // 使用</span><br><span class=\"line\">console.log(getYearDate())</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-18e43bb863ef2d93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getYearDate())\"></p>\n<blockquote>\n<p>关于JavaScript Date 对象的方法详情请转@<a href=\"http://www.w3school.com.cn/jsref/jsref_obj_date.asp\" target=\"_blank\" rel=\"noopener\">W3 school</a></p>\n</blockquote>\n<blockquote>\n<p>更多文章请看我的博客@<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">王一诺</a>  感谢阅读！</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"js通过开始时间和结束时间计算出中间的所有日期\">TOC</a></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p><strong>实际开发过程中，我们有许许多多的产品都设计到了时间，也有时候需要自己转化时间格式，这里推荐一个日期时间处理类库<a href=\"http://momentjs.cn/\" target=\"_blank\" rel=\"noopener\">momentjs</a>，但很多时候，我们仅仅是转化个别时间，还没必要安装这么一个依赖；这篇文章将在未来持续更新，搜罗各种关于时间转化的方法</strong></p>\n<hr>\n<h3 id=\"一-已知开始时间和结束时间-计算出中间的所有日期\"><a href=\"#一-已知开始时间和结束时间-计算出中间的所有日期\" class=\"headerlink\" title=\"一 已知开始时间和结束时间  计算出中间的所有日期\"></a>一 已知开始时间和结束时间  计算出中间的所有日期</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getAllDate = <span class=\"function\">(<span class=\"params\">start, end</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dateArr = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startArr = start.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> endArr = end.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> db = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  db.setUTCFullYear(startArr[<span class=\"number\">0</span>], startArr[<span class=\"number\">1</span>] - <span class=\"number\">1</span>, startArr[<span class=\"number\">2</span>])</span><br><span class=\"line\">  <span class=\"keyword\">let</span> de = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  de.setUTCFullYear(endArr[<span class=\"number\">0</span>], endArr[<span class=\"number\">1</span>] - <span class=\"number\">1</span>, endArr[<span class=\"number\">2</span>])</span><br><span class=\"line\">  <span class=\"keyword\">let</span> unixDb = db.getTime()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> unixDe = de.getTime()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stamp</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oneDay = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (stamp = unixDb; stamp &lt;= unixDe;) &#123;</span><br><span class=\"line\">    dateArr.push(format(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">parseInt</span>(stamp))))</span><br><span class=\"line\">    stamp = stamp + oneDay</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dateArr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getAllDate(<span class=\"string\">'2018-12-12'</span>, <span class=\"string\">'2019-3-3'</span>))</span><br></pre></td></tr></table></figure>\n<p>结果如下:<br><img src=\"https://upload-images.jianshu.io/upload_images/11447772-bc003c9bfdedb470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getAllDate(&#39;2018-12-12&#39;, &#39;2019-3-3&#39;))\n\"></p>\n<h3 id=\"二-最近七天-一个月-三个月-一年\"><a href=\"#二-最近七天-一个月-三个月-一年\" class=\"headerlink\" title=\"二 最近七天 一个月 三个月 一年\"></a>二 最近七天 一个月 三个月 一年</h3><p>   <strong>最近七天:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getWeekDate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 获取前一周时间</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> oneDay = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> oneweekdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(myDate - <span class=\"number\">7</span> * oneDay)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastWeek = []</span><br><span class=\"line\">  lastWeek.push(format(oneweekdate))</span><br><span class=\"line\">  lastWeek.push(format(myDate))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastWeek</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> <span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getWeekDate())</span><br></pre></td></tr></table></figure></p>\n<p>控制台输出结果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-c7b2d92c2f82387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getWeekDate())\"></p>\n<p><strong>最近一个月:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getMonthDate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDateChange = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastMonth = []</span><br><span class=\"line\">  <span class=\"comment\">// 获取前一月时间</span></span><br><span class=\"line\">  nowDateChange.setMonth(nowDateChange.getMonth() - <span class=\"number\">1</span>)</span><br><span class=\"line\">  lastMonth.push(format(nowDateChange))</span><br><span class=\"line\">  lastMonth.push(format(nowDate))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lastMonth</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(getMonthDate())</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-2625f339bfd85b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getMonthDate())\"><br><strong>最近三个月</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 中国标准时间format yyyy-mm-dd</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> format = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ymd = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mouth = (time.getMonth() + <span class=\"number\">1</span>) &gt;= <span class=\"number\">10</span> ? (time.getMonth() + <span class=\"number\">1</span>) : (<span class=\"string\">'0'</span> + (time.getMonth() + <span class=\"number\">1</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> day = time.getDate() &gt;= <span class=\"number\">10</span> ? time.getDate() : (<span class=\"string\">'0'</span> + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取年份。</span></span><br><span class=\"line\">  ymd += mouth + <span class=\"string\">'-'</span> <span class=\"comment\">// 获取月份。</span></span><br><span class=\"line\">  ymd += day <span class=\"comment\">// 获取日。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ymd <span class=\"comment\">// 返回日期。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getThreeMonthDate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nowDateChange = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> threeMonth = []</span><br><span class=\"line\">  <span class=\"comment\">// 获取前三月时间</span></span><br><span class=\"line\">  nowDateChange.setMonth(nowDateChange.getMonth() - <span class=\"number\">3</span>)</span><br><span class=\"line\">  threeMonth.push(format(nowDateChange))</span><br><span class=\"line\">  threeMonth.push(format(nowDate))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> threeMonth</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getThreeMonthDate())</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-c6c3b35602c1204b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getThreeMonthDate())\"></p>\n<p><strong>一年</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const format = (time) =&gt; &#123;</span><br><span class=\"line\">  let ymd = &apos;&apos;</span><br><span class=\"line\">  let mouth = (time.getMonth() + 1) &gt;= 10 ? (time.getMonth() + 1) : (&apos;0&apos; + (time.getMonth() + 1))</span><br><span class=\"line\">  let day = time.getDate() &gt;= 10 ? time.getDate() : (&apos;0&apos; + time.getDate())</span><br><span class=\"line\">  ymd += time.getFullYear() + &apos;-&apos; // 获取年份。</span><br><span class=\"line\">  ymd += mouth + &apos;-&apos; // 获取月份。</span><br><span class=\"line\">  ymd += day // 获取日。</span><br><span class=\"line\">  return ymd // 返回日期。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export const getYearDate = () =&gt; &#123;</span><br><span class=\"line\">  let nowDate = new Date()</span><br><span class=\"line\">  let nowDateChange = new Date()</span><br><span class=\"line\">  let lastYear = []</span><br><span class=\"line\">  // 获取前一年时间</span><br><span class=\"line\">  nowDateChange.setFullYear(nowDateChange.getFullYear()- 1)</span><br><span class=\"line\">  lastYear.push(format(nowDateChange))</span><br><span class=\"line\">  lastYear.push(format(nowDate))</span><br><span class=\"line\">  return lastYear</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> // 使用</span><br><span class=\"line\">console.log(getYearDate())</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-18e43bb863ef2d93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"console.log(getYearDate())\"></p>\n<blockquote>\n<p>关于JavaScript Date 对象的方法详情请转@<a href=\"http://www.w3school.com.cn/jsref/jsref_obj_date.asp\" target=\"_blank\" rel=\"noopener\">W3 school</a></p>\n</blockquote>\n<blockquote>\n<p>更多文章请看我的博客@<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">王一诺</a>  感谢阅读！</p>\n</blockquote>\n"},{"title":"js基础数组Array的一些特性及方法","_content":"\n\n@[toc](js基础数组Array的一些特性及方法)\n> 前言: 工作业务数据乱，数据转换用得繁，对接交流竟无语，全靠数组方法换；\n\n## 数据的了解\n\n### js数据类型\n* 在js基础中，我都们知道数据类型有两大类:原始类型(基本类型)、引用类型\n\n\n### 基本类型\njs有5 种原始类型，即 Undefined、Null、Boolean、Number 和 String。其中Undefined和Null也称作**特殊类型**\n\n```javascript\nconsole.log(typeof undefined) // undefined\nconsole.log(typeof null)   // object\nconsole.log(typeof true)  // boolean\nconsole.log(typeof 1)     // number\nconsole.log(typeof '1')   // string\n\n```\n**总结**:基本类型，笔者就不作过多介绍具体详情可以查阅[w3school](http://www.w3school.com.cn/js/pro_js_primitivetypes.asp)，这里解释一下为何typeof null得出来的是object类型而不是null，因为null是一个只有一个值的特殊类型，它被认为是对象的占位符，表示一个空对象引用。\n\n* 在js中null == undefined 得到是真(true)，尽管这两个值相等，但它们的含义不同。 undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象（在讨论 typeof 运算符时，简单地介绍过这一点）。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。\n\n### 引用类型\njs中 基本类型的值基本是不可变的，但引用类型的值是动态可变的；基本类型的变量是存放在栈内存中，而引用类型的值是同时保存在栈内存和堆内存中的对象；\n* 引用类型一般指的是对象和方法;\n* 引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址\n\n**举例说明:**\n```javascript\n let arr = [1,2,3,4,5,6]\n  let arr1 = arr;\n  arr1.push(1)\n  console.log(arr,arr1)\n```\n如上代码：按照我们常规的想法是 arr =  [1,2,3,4,5,6]，arr1 = [1,2,3,4,5,6,1]的；\n\n但实际输出如下:\n![实际输出](https://upload-images.jianshu.io/upload_images/11447772-d32a6fa877fa7dfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n解释: 上面对引用类型的定义**引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址**有讲到指针的这个词，实际上上面代码的操作 let arr1 = arr;并不是把arr重新拷贝了一份给arr1,而是把arr存储在堆内存的存储地址给了arr1, 对arr1的修改，会对该地址指向的堆内存的数据进行修改，而arr和arr1指向堆内存的地址是相同的，所以打印结果一致；并且都改变了；\n\n上述换成Object对象依然是一致的，不相信的同学可以私下试试~\n\n## 数组的方法\n从[w3school](http://www.w3school.com.cn/jsref/jsref_obj_array.asp)中我们可以知道数组有许多的方法，并且有些是我们经常用到且混淆不清的，接下来我们将对数组的方法进行详解；\n\n### 1. Array.concat()\nArray.concat() 的作用是连接两个或更多的数组，并返回结果。\n使用\n```javascript\n\n\tlet\tarrNum = [1,2,3,4,5,6]\n\tlet\tarrStr = ['1','2','3','4','5','6']\n\tlet\tarrObj = [{a:1},{b:'2'}]\n \tlet arrAll =  arrNum.concat(arrStr).concat(arrObj)\n\tconsole.log(arrAll)\n\n```\n输出结果如下:\n![Array.concat()](https://upload-images.jianshu.io/upload_images/11447772-7e9d6ba651065b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n此时因为concat()返回的是一个新的实例对象，对原数组操作(arrNum、arrStr)并不会影响到arrAll的值变化，**但假如对arrObj进行改变,由于arrObj里面的对象属于引用类型，arrAll相应的值的地址指针依然是同一个堆内存，假如对arrObj进行改变，arrAll也会相应改变；而arrNum、arrStr里面的值是基本类型，则不影响**；\n\n### 2. Array.join()\nArray.join() 把数组的所有元素放入一个字符串并返回。元素通过指定的分隔符进行分隔。\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.join('|'))\n  console.log(arrStr.join(','))\n  console.log(arrObj.join('-'))\n  console.log(arrArr.join('='))\n```\n![Array.join()](https://upload-images.jianshu.io/upload_images/11447772-c7c1b9eaa1684919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 返回的字符串均没问题，但假如数组里面是object，则返回[object Object] 字符串；\n\n### 3. Array.pop()\nArray.pop() 向数组的末尾添加一个或更多元素，并返回新的长度。**注意！！！文档上没写明会改变原数组; 但实际上会改变**\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.pop())\n  console.log(arrStr.pop())\n  console.log(arrObj.pop())\n  console.log(arrArr.pop())\n  console.log(arrObj,arrArr)\n```\n输出结果:\n![Array.pop()](https://upload-images.jianshu.io/upload_images/11447772-e1f62d561c5f05cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 4. Array.push()\n Array.push() 向数组的末尾添加一个或更多元素，并返回新的长度。\n\n本来觉得**用的最多，不想作介绍了**但为了加以证明引用类型引用是的存储地址，修改原数组会导致引用相应地址的值也改变；\n代码如下:\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  let  arrAll = []\n  console.log(arrAll.push(arrNum))\n  console.log(arrAll.push(arrStr))\n  console.log(arrAll.push(arrObj))\n  console.log(arrAll.push(arrArr))\n  console.log('改变前===',arrAll)\n  arrNum[0] = 10000\n  arrStr[0] = 10000\n  arrObj[0] = 10000\n  arrArr[0] = 10000\n  console.log('改变后===',arrAll)\n```\n![Array.push()](https://upload-images.jianshu.io/upload_images/11447772-a30f2def5468e0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n总结:再次证明引用类型的特点；\n\n### 5. Array.reverse()\nArray.reverse() 颠倒数组中元素的顺序。\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.reverse())\n  console.log(arrStr.reverse())\n  console.log(arrObj.reverse())\n  console.log(arrArr.reverse())\n```\n常规使用，毫无问题\n![Array.reverse() ](https://upload-images.jianshu.io/upload_images/11447772-4ab849432cb505fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 6. Array.shift()\n Array.shift() 删除并返回数组的第一个元素,具体表现和上面的 3. Array.pop() 完全类似，同样会改变原数组，不作过多介绍；\n\n### 7. Array.unshift()\nArray.unshift()向数组的开头添加一个或更多元素，并返回新的长度。\n\n用法:\n```javascript\narrayObject.unshift(val1,val2,....,valn)\n```\n参数解释:\n* val1 必需。向数组添加的第一个元素。\n* val2 可选。向数组添加的第二个元素。\n* valn 可选。向数组添加的第n个元素。\n\n**注意**：unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。并且 **unshift() 方法不创建新的创建，而是直接修改原有的数组。**\n使用如下:\n```javascript\n\tlet\tarrNum = [1,2,3,4,5,6]\n\tlet\tarrStr = ['1','2','3','4','5','6']\n\tlet\tarrObj = [{a:1},{b:'2'}]\n\tlet\tarrArr = [[1,2],['1','2']]\n\tconsole.log(arrNum.unshift(1,2,3,4,5,6))\n\tconsole.log(arrStr.unshift('1','2','3','4','5','6'))\n\tconsole.log(arrObj.unshift({a:1},{b:'2'}))\n\tconsole.log(arrArr.unshift([1,2],['1','2']))\n\tconsole.log(arrNum,arrStr,arrObj,arrArr)\n```\n\n输出:\n![Array.unshift()](https://upload-images.jianshu.io/upload_images/11447772-b32872e6a9c00302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 8. Array.slice()\nArray.slice() 方法可从已有的数组中返回选定的元素。\n\n用法:\n```javascript\narrayObject.slice(start,end)\n```\n参数解释:\n* **start** ： 必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n* **end** ： 可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。\n* **返回值** ：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。\n使用\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.slice(0,1))\n  console.log(arrStr.slice(0,1))\n  console.log(arrObj.slice(0,1))\n  console.log(arrArr.slice(0,1))\n  console.log(arrNum,arrStr,arrObj,arrArr)\n```\n输出如下：\n![Array.slice()](https://upload-images.jianshu.io/upload_images/11447772-d1d7ebaf8674671f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意:** 该方法并不会修改原数组，而是返回一个子数组\n\n### 9. Array.splice()\nArray.splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。\n\n用法：\n```javascript\n\narrayObject.splice(index,delLong,item1,.....,itemN)\n\n```\n参数解释:\n* **index** ： 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\n* **delLong** ：必需。要删除的项目数量。如果设置为 0，则不会删除项目。\n* **item1, ..., itemN** ：可选。向数组添加的新项目。\n\n**注意：** splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。\n\n如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。\n\n使用:\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.splice(-1,1,10000))\n  console.log(arrStr.splice(0,0,'10000'))\n  console.log(arrObj.splice(0,1))\n  console.log(arrArr.splice(0,1))\n  console.log(arrNum,arrStr,arrObj,arrArr)\n\n```\n结果如下:\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-eaa4505b10375907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意:** 该方法会修改原数组，而是返回一个子数组。如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。如果未删除，则返回空数组；\n\n总结: slice()和splice()容易混淆，不过这样记就好:**单词长的参数也长，参数长的功能大，可加可减可改变**\n\n### 9. Array.sort()\nArray.sort() 方法用于对数组的元素进行排序。\n\n用法：\n```javascript\narrayObject.sort(sortby)\n\n```\n参数解释:\n* **sortby** ： 可选。规定排序顺序。必须是函数。\n\n使用:\n```javascript\nlet\tarrNum = [6,2,1,3,4,5]\n  let\tarrStr = ['6','2','1','3','4','5']\n  let\tarrObj = [{b:'2'},{a:1}]\n  let\tarrArr = [['2','1'],[2,1]]\n  console.log(arrNum.sort())\n  console.log(arrStr.sort())\n  console.log(arrObj.sort())\n  console.log(arrArr.sort())\n  console.log(arrNum,arrStr,arrObj,arrArr)\n\tvar arr = [1,2,4,3,2,1]\n\n\tconsole.log(arr.sort(function (m,n) {\n    if (m < n) return -1\n   \tif (m > n) return 1\n    if (m == n)return 0\n  }))\n```\n结果如下：\n![Array.sort()](https://upload-images.jianshu.io/upload_images/11447772-3eba223c168616ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**总结**：实际上上面代码写的方法就是sort()默认的方法；方法可以自定义；\n\n### 最后数组方法的扩展\n从字面认知:every是每一个都，some是都有一些就~~\n即:\n1. every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；\n2. some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；\n\n#### every()\n\n```javascript\n// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；\narray.every(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n##### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.every((item,index,array)=>{\n console.log(item) // 10\n console.log(index) // 0\n console.log(array) //[10,20,30,40,50,22,26]\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.every(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // false\n\n```\n\n#### some()\n\n```javascript\n// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；\narray.some(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n##### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.some((item,index,array)=>{\n\n  console.log(item) // 10 20 30\n  console.log(index) // 0 1 2\n  console.log(array) //[10,20,30,40,50,22,26]\n\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.some(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // true\n\n```\n> 以上就是js基础中 数组常用的方法，特别要注意的是splice和slice容易混淆，其他的话，用过几次就基本没有问题了，此次代码已经上传到github，有兴趣可以去下载实现一波喔@[王一诺wLove-c/JavaScript-demo](https://github.com/wLove-c/JavaScript-demo)，如果对你有帮助，请点个赞吧；\n\n> 更多内容请转作者博客@[王一诺的博客](https://wlove-c.github.io/)，多多交流~\n\n","source":"_posts/coding-20190629.md","raw":"---\ntitle: js基础数组Array的一些特性及方法\ntags: javaScript\ncategories: 编程\n---\n\n\n@[toc](js基础数组Array的一些特性及方法)\n> 前言: 工作业务数据乱，数据转换用得繁，对接交流竟无语，全靠数组方法换；\n\n## 数据的了解\n\n### js数据类型\n* 在js基础中，我都们知道数据类型有两大类:原始类型(基本类型)、引用类型\n\n\n### 基本类型\njs有5 种原始类型，即 Undefined、Null、Boolean、Number 和 String。其中Undefined和Null也称作**特殊类型**\n\n```javascript\nconsole.log(typeof undefined) // undefined\nconsole.log(typeof null)   // object\nconsole.log(typeof true)  // boolean\nconsole.log(typeof 1)     // number\nconsole.log(typeof '1')   // string\n\n```\n**总结**:基本类型，笔者就不作过多介绍具体详情可以查阅[w3school](http://www.w3school.com.cn/js/pro_js_primitivetypes.asp)，这里解释一下为何typeof null得出来的是object类型而不是null，因为null是一个只有一个值的特殊类型，它被认为是对象的占位符，表示一个空对象引用。\n\n* 在js中null == undefined 得到是真(true)，尽管这两个值相等，但它们的含义不同。 undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象（在讨论 typeof 运算符时，简单地介绍过这一点）。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。\n\n### 引用类型\njs中 基本类型的值基本是不可变的，但引用类型的值是动态可变的；基本类型的变量是存放在栈内存中，而引用类型的值是同时保存在栈内存和堆内存中的对象；\n* 引用类型一般指的是对象和方法;\n* 引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址\n\n**举例说明:**\n```javascript\n let arr = [1,2,3,4,5,6]\n  let arr1 = arr;\n  arr1.push(1)\n  console.log(arr,arr1)\n```\n如上代码：按照我们常规的想法是 arr =  [1,2,3,4,5,6]，arr1 = [1,2,3,4,5,6,1]的；\n\n但实际输出如下:\n![实际输出](https://upload-images.jianshu.io/upload_images/11447772-d32a6fa877fa7dfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n解释: 上面对引用类型的定义**引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址**有讲到指针的这个词，实际上上面代码的操作 let arr1 = arr;并不是把arr重新拷贝了一份给arr1,而是把arr存储在堆内存的存储地址给了arr1, 对arr1的修改，会对该地址指向的堆内存的数据进行修改，而arr和arr1指向堆内存的地址是相同的，所以打印结果一致；并且都改变了；\n\n上述换成Object对象依然是一致的，不相信的同学可以私下试试~\n\n## 数组的方法\n从[w3school](http://www.w3school.com.cn/jsref/jsref_obj_array.asp)中我们可以知道数组有许多的方法，并且有些是我们经常用到且混淆不清的，接下来我们将对数组的方法进行详解；\n\n### 1. Array.concat()\nArray.concat() 的作用是连接两个或更多的数组，并返回结果。\n使用\n```javascript\n\n\tlet\tarrNum = [1,2,3,4,5,6]\n\tlet\tarrStr = ['1','2','3','4','5','6']\n\tlet\tarrObj = [{a:1},{b:'2'}]\n \tlet arrAll =  arrNum.concat(arrStr).concat(arrObj)\n\tconsole.log(arrAll)\n\n```\n输出结果如下:\n![Array.concat()](https://upload-images.jianshu.io/upload_images/11447772-7e9d6ba651065b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n此时因为concat()返回的是一个新的实例对象，对原数组操作(arrNum、arrStr)并不会影响到arrAll的值变化，**但假如对arrObj进行改变,由于arrObj里面的对象属于引用类型，arrAll相应的值的地址指针依然是同一个堆内存，假如对arrObj进行改变，arrAll也会相应改变；而arrNum、arrStr里面的值是基本类型，则不影响**；\n\n### 2. Array.join()\nArray.join() 把数组的所有元素放入一个字符串并返回。元素通过指定的分隔符进行分隔。\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.join('|'))\n  console.log(arrStr.join(','))\n  console.log(arrObj.join('-'))\n  console.log(arrArr.join('='))\n```\n![Array.join()](https://upload-images.jianshu.io/upload_images/11447772-c7c1b9eaa1684919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 返回的字符串均没问题，但假如数组里面是object，则返回[object Object] 字符串；\n\n### 3. Array.pop()\nArray.pop() 向数组的末尾添加一个或更多元素，并返回新的长度。**注意！！！文档上没写明会改变原数组; 但实际上会改变**\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.pop())\n  console.log(arrStr.pop())\n  console.log(arrObj.pop())\n  console.log(arrArr.pop())\n  console.log(arrObj,arrArr)\n```\n输出结果:\n![Array.pop()](https://upload-images.jianshu.io/upload_images/11447772-e1f62d561c5f05cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 4. Array.push()\n Array.push() 向数组的末尾添加一个或更多元素，并返回新的长度。\n\n本来觉得**用的最多，不想作介绍了**但为了加以证明引用类型引用是的存储地址，修改原数组会导致引用相应地址的值也改变；\n代码如下:\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  let  arrAll = []\n  console.log(arrAll.push(arrNum))\n  console.log(arrAll.push(arrStr))\n  console.log(arrAll.push(arrObj))\n  console.log(arrAll.push(arrArr))\n  console.log('改变前===',arrAll)\n  arrNum[0] = 10000\n  arrStr[0] = 10000\n  arrObj[0] = 10000\n  arrArr[0] = 10000\n  console.log('改变后===',arrAll)\n```\n![Array.push()](https://upload-images.jianshu.io/upload_images/11447772-a30f2def5468e0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n总结:再次证明引用类型的特点；\n\n### 5. Array.reverse()\nArray.reverse() 颠倒数组中元素的顺序。\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.reverse())\n  console.log(arrStr.reverse())\n  console.log(arrObj.reverse())\n  console.log(arrArr.reverse())\n```\n常规使用，毫无问题\n![Array.reverse() ](https://upload-images.jianshu.io/upload_images/11447772-4ab849432cb505fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 6. Array.shift()\n Array.shift() 删除并返回数组的第一个元素,具体表现和上面的 3. Array.pop() 完全类似，同样会改变原数组，不作过多介绍；\n\n### 7. Array.unshift()\nArray.unshift()向数组的开头添加一个或更多元素，并返回新的长度。\n\n用法:\n```javascript\narrayObject.unshift(val1,val2,....,valn)\n```\n参数解释:\n* val1 必需。向数组添加的第一个元素。\n* val2 可选。向数组添加的第二个元素。\n* valn 可选。向数组添加的第n个元素。\n\n**注意**：unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。并且 **unshift() 方法不创建新的创建，而是直接修改原有的数组。**\n使用如下:\n```javascript\n\tlet\tarrNum = [1,2,3,4,5,6]\n\tlet\tarrStr = ['1','2','3','4','5','6']\n\tlet\tarrObj = [{a:1},{b:'2'}]\n\tlet\tarrArr = [[1,2],['1','2']]\n\tconsole.log(arrNum.unshift(1,2,3,4,5,6))\n\tconsole.log(arrStr.unshift('1','2','3','4','5','6'))\n\tconsole.log(arrObj.unshift({a:1},{b:'2'}))\n\tconsole.log(arrArr.unshift([1,2],['1','2']))\n\tconsole.log(arrNum,arrStr,arrObj,arrArr)\n```\n\n输出:\n![Array.unshift()](https://upload-images.jianshu.io/upload_images/11447772-b32872e6a9c00302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 8. Array.slice()\nArray.slice() 方法可从已有的数组中返回选定的元素。\n\n用法:\n```javascript\narrayObject.slice(start,end)\n```\n参数解释:\n* **start** ： 必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n* **end** ： 可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。\n* **返回值** ：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。\n使用\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.slice(0,1))\n  console.log(arrStr.slice(0,1))\n  console.log(arrObj.slice(0,1))\n  console.log(arrArr.slice(0,1))\n  console.log(arrNum,arrStr,arrObj,arrArr)\n```\n输出如下：\n![Array.slice()](https://upload-images.jianshu.io/upload_images/11447772-d1d7ebaf8674671f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意:** 该方法并不会修改原数组，而是返回一个子数组\n\n### 9. Array.splice()\nArray.splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。\n\n用法：\n```javascript\n\narrayObject.splice(index,delLong,item1,.....,itemN)\n\n```\n参数解释:\n* **index** ： 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\n* **delLong** ：必需。要删除的项目数量。如果设置为 0，则不会删除项目。\n* **item1, ..., itemN** ：可选。向数组添加的新项目。\n\n**注意：** splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。\n\n如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。\n\n使用:\n```javascript\n  let\tarrNum = [1,2,3,4,5,6]\n  let\tarrStr = ['1','2','3','4','5','6']\n  let\tarrObj = [{a:1},{b:'2'}]\n  let\tarrArr = [[1,2],['1','2']]\n  console.log(arrNum.splice(-1,1,10000))\n  console.log(arrStr.splice(0,0,'10000'))\n  console.log(arrObj.splice(0,1))\n  console.log(arrArr.splice(0,1))\n  console.log(arrNum,arrStr,arrObj,arrArr)\n\n```\n结果如下:\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-eaa4505b10375907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意:** 该方法会修改原数组，而是返回一个子数组。如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。如果未删除，则返回空数组；\n\n总结: slice()和splice()容易混淆，不过这样记就好:**单词长的参数也长，参数长的功能大，可加可减可改变**\n\n### 9. Array.sort()\nArray.sort() 方法用于对数组的元素进行排序。\n\n用法：\n```javascript\narrayObject.sort(sortby)\n\n```\n参数解释:\n* **sortby** ： 可选。规定排序顺序。必须是函数。\n\n使用:\n```javascript\nlet\tarrNum = [6,2,1,3,4,5]\n  let\tarrStr = ['6','2','1','3','4','5']\n  let\tarrObj = [{b:'2'},{a:1}]\n  let\tarrArr = [['2','1'],[2,1]]\n  console.log(arrNum.sort())\n  console.log(arrStr.sort())\n  console.log(arrObj.sort())\n  console.log(arrArr.sort())\n  console.log(arrNum,arrStr,arrObj,arrArr)\n\tvar arr = [1,2,4,3,2,1]\n\n\tconsole.log(arr.sort(function (m,n) {\n    if (m < n) return -1\n   \tif (m > n) return 1\n    if (m == n)return 0\n  }))\n```\n结果如下：\n![Array.sort()](https://upload-images.jianshu.io/upload_images/11447772-3eba223c168616ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**总结**：实际上上面代码写的方法就是sort()默认的方法；方法可以自定义；\n\n### 最后数组方法的扩展\n从字面认知:every是每一个都，some是都有一些就~~\n即:\n1. every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；\n2. some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；\n\n#### every()\n\n```javascript\n// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；\narray.every(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n##### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.every((item,index,array)=>{\n console.log(item) // 10\n console.log(index) // 0\n console.log(array) //[10,20,30,40,50,22,26]\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.every(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // false\n\n```\n\n#### some()\n\n```javascript\n// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；\narray.some(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n##### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.some((item,index,array)=>{\n\n  console.log(item) // 10 20 30\n  console.log(index) // 0 1 2\n  console.log(array) //[10,20,30,40,50,22,26]\n\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.some(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // true\n\n```\n> 以上就是js基础中 数组常用的方法，特别要注意的是splice和slice容易混淆，其他的话，用过几次就基本没有问题了，此次代码已经上传到github，有兴趣可以去下载实现一波喔@[王一诺wLove-c/JavaScript-demo](https://github.com/wLove-c/JavaScript-demo)，如果对你有帮助，请点个赞吧；\n\n> 更多内容请转作者博客@[王一诺的博客](https://wlove-c.github.io/)，多多交流~\n\n","slug":"coding-20190629","published":1,"date":"2020-05-18T06:08:34.682Z","updated":"2020-05-18T06:08:34.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qifb000l0ohy1ce0o276","content":"<p>@<a href=\"js基础数组Array的一些特性及方法\">toc</a></p>\n<blockquote>\n<p>前言: 工作业务数据乱，数据转换用得繁，对接交流竟无语，全靠数组方法换；</p>\n</blockquote>\n<h2 id=\"数据的了解\"><a href=\"#数据的了解\" class=\"headerlink\" title=\"数据的了解\"></a>数据的了解</h2><h3 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h3><ul>\n<li>在js基础中，我都们知道数据类型有两大类:原始类型(基本类型)、引用类型</li>\n</ul>\n<h3 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h3><p>js有5 种原始类型，即 Undefined、Null、Boolean、Number 和 String。其中Undefined和Null也称作<strong>特殊类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)   <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>)  <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">1</span>)     <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">'1'</span>)   <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>:基本类型，笔者就不作过多介绍具体详情可以查阅<a href=\"http://www.w3school.com.cn/js/pro_js_primitivetypes.asp\" target=\"_blank\" rel=\"noopener\">w3school</a>，这里解释一下为何typeof null得出来的是object类型而不是null，因为null是一个只有一个值的特殊类型，它被认为是对象的占位符，表示一个空对象引用。</p>\n<ul>\n<li>在js中null == undefined 得到是真(true)，尽管这两个值相等，但它们的含义不同。 undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象（在讨论 typeof 运算符时，简单地介绍过这一点）。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。</li>\n</ul>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>js中 基本类型的值基本是不可变的，但引用类型的值是动态可变的；基本类型的变量是存放在栈内存中，而引用类型的值是同时保存在栈内存和堆内存中的对象；</p>\n<ul>\n<li>引用类型一般指的是对象和方法;</li>\n<li>引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址</li>\n</ul>\n<p><strong>举例说明:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr1 = arr;</span><br><span class=\"line\"> arr1.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr,arr1)</span><br></pre></td></tr></table></figure></p>\n<p>如上代码：按照我们常规的想法是 arr =  [1,2,3,4,5,6]，arr1 = [1,2,3,4,5,6,1]的；</p>\n<p>但实际输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d32a6fa877fa7dfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"实际输出\"></p>\n<p>解释: 上面对引用类型的定义<strong>引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址</strong>有讲到指针的这个词，实际上上面代码的操作 let arr1 = arr;并不是把arr重新拷贝了一份给arr1,而是把arr存储在堆内存的存储地址给了arr1, 对arr1的修改，会对该地址指向的堆内存的数据进行修改，而arr和arr1指向堆内存的地址是相同的，所以打印结果一致；并且都改变了；</p>\n<p>上述换成Object对象依然是一致的，不相信的同学可以私下试试~</p>\n<h2 id=\"数组的方法\"><a href=\"#数组的方法\" class=\"headerlink\" title=\"数组的方法\"></a>数组的方法</h2><p>从<a href=\"http://www.w3school.com.cn/jsref/jsref_obj_array.asp\" target=\"_blank\" rel=\"noopener\">w3school</a>中我们可以知道数组有许多的方法，并且有些是我们经常用到且混淆不清的，接下来我们将对数组的方法进行详解；</p>\n<h3 id=\"1-Array-concat\"><a href=\"#1-Array-concat\" class=\"headerlink\" title=\"1. Array.concat()\"></a>1. Array.concat()</h3><p>Array.concat() 的作用是连接两个或更多的数组，并返回结果。<br>使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> arrAll =  arrNum.concat(arrStr).concat(arrObj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-7e9d6ba651065b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.concat()\"></p>\n<p>此时因为concat()返回的是一个新的实例对象，对原数组操作(arrNum、arrStr)并不会影响到arrAll的值变化，<strong>但假如对arrObj进行改变,由于arrObj里面的对象属于引用类型，arrAll相应的值的地址指针依然是同一个堆内存，假如对arrObj进行改变，arrAll也会相应改变；而arrNum、arrStr里面的值是基本类型，则不影响</strong>；</p>\n<h3 id=\"2-Array-join\"><a href=\"#2-Array-join\" class=\"headerlink\" title=\"2. Array.join()\"></a>2. Array.join()</h3><p>Array.join() 把数组的所有元素放入一个字符串并返回。元素通过指定的分隔符进行分隔。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.join(<span class=\"string\">'|'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.join(<span class=\"string\">','</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.join(<span class=\"string\">'-'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.join(<span class=\"string\">'='</span>))</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-c7c1b9eaa1684919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.join()\"></p>\n<ul>\n<li>返回的字符串均没问题，但假如数组里面是object，则返回[object Object] 字符串；</li>\n</ul>\n<h3 id=\"3-Array-pop\"><a href=\"#3-Array-pop\" class=\"headerlink\" title=\"3. Array.pop()\"></a>3. Array.pop()</h3><p>Array.pop() 向数组的末尾添加一个或更多元素，并返回新的长度。<strong>注意！！！文档上没写明会改变原数组; 但实际上会改变</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj,arrArr)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-e1f62d561c5f05cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.pop()\"></p>\n<h3 id=\"4-Array-push\"><a href=\"#4-Array-push\" class=\"headerlink\" title=\"4. Array.push()\"></a>4. Array.push()</h3><p> Array.push() 向数组的末尾添加一个或更多元素，并返回新的长度。</p>\n<p>本来觉得<strong>用的最多，不想作介绍了</strong>但为了加以证明引用类型引用是的存储地址，修改原数组会导致引用相应地址的值也改变；<br>代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span>  arrAll = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrNum))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrStr))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrObj))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrArr))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'改变前==='</span>,arrAll)</span><br><span class=\"line\">arrNum[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\">arrStr[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\">arrObj[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\">arrArr[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'改变后==='</span>,arrAll)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-a30f2def5468e0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.push()\"></p>\n<p>总结:再次证明引用类型的特点；</p>\n<h3 id=\"5-Array-reverse\"><a href=\"#5-Array-reverse\" class=\"headerlink\" title=\"5. Array.reverse()\"></a>5. Array.reverse()</h3><p>Array.reverse() 颠倒数组中元素的顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.reverse())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.reverse())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.reverse())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.reverse())</span><br></pre></td></tr></table></figure></p>\n<p>常规使用，毫无问题<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-4ab849432cb505fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.reverse() \"></p>\n<h3 id=\"6-Array-shift\"><a href=\"#6-Array-shift\" class=\"headerlink\" title=\"6. Array.shift()\"></a>6. Array.shift()</h3><p> Array.shift() 删除并返回数组的第一个元素,具体表现和上面的 3. Array.pop() 完全类似，同样会改变原数组，不作过多介绍；</p>\n<h3 id=\"7-Array-unshift\"><a href=\"#7-Array-unshift\" class=\"headerlink\" title=\"7. Array.unshift()\"></a>7. Array.unshift()</h3><p>Array.unshift()向数组的开头添加一个或更多元素，并返回新的长度。</p>\n<p>用法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.unshift(val1,val2,....,valn)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li>val1 必需。向数组添加的第一个元素。</li>\n<li>val2 可选。向数组添加的第二个元素。</li>\n<li>valn 可选。向数组添加的第n个元素。</li>\n</ul>\n<p><strong>注意</strong>：unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。并且 <strong>unshift() 方法不创建新的创建，而是直接修改原有的数组。</strong><br>使用如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.unshift(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.unshift(<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.unshift(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.unshift([<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b32872e6a9c00302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.unshift()\"></p>\n<h3 id=\"8-Array-slice\"><a href=\"#8-Array-slice\" class=\"headerlink\" title=\"8. Array.slice()\"></a>8. Array.slice()</h3><p>Array.slice() 方法可从已有的数组中返回选定的元素。</p>\n<p>用法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.slice(start,end)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li><strong>start</strong> ： 必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</li>\n<li><strong>end</strong> ： 可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li>\n<li><strong>返回值</strong> ：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。<br>使用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输出如下：<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d1d7ebaf8674671f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.slice()\"></p>\n<p><strong>注意:</strong> 该方法并不会修改原数组，而是返回一个子数组</p>\n<h3 id=\"9-Array-splice\"><a href=\"#9-Array-splice\" class=\"headerlink\" title=\"9. Array.splice()\"></a>9. Array.splice()</h3><p>Array.splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。</p>\n<p>用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">arrayObject.splice(index,delLong,item1,.....,itemN)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li><strong>index</strong> ： 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li>\n<li><strong>delLong</strong> ：必需。要删除的项目数量。如果设置为 0，则不会删除项目。</li>\n<li><strong>item1, …, itemN</strong> ：可选。向数组添加的新项目。</li>\n</ul>\n<p><strong>注意：</strong> splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。</p>\n<p>如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。</p>\n<p>使用:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.splice(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">10000</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">'10000'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br></pre></td></tr></table></figure></p>\n<p>结果如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-eaa4505b10375907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>注意:</strong> 该方法会修改原数组，而是返回一个子数组。如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。如果未删除，则返回空数组；</p>\n<p>总结: slice()和splice()容易混淆，不过这样记就好:<strong>单词长的参数也长，参数长的功能大，可加可减可改变</strong></p>\n<h3 id=\"9-Array-sort\"><a href=\"#9-Array-sort\" class=\"headerlink\" title=\"9. Array.sort()\"></a>9. Array.sort()</h3><p>Array.sort() 方法用于对数组的元素进行排序。</p>\n<p>用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.sort(sortby)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li><strong>sortby</strong> ： 可选。规定排序顺序。必须是函数。</li>\n</ul>\n<p>使用:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'6'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'1'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;]</span><br><span class=\"line\">  <span class=\"keyword\">let</span>\tarrArr = [[<span class=\"string\">'2'</span>,<span class=\"string\">'1'</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrNum.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrStr.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrObj.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrArr.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m,n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m &lt; n) <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (m &gt; n) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == n)<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;))</span><br></pre></td></tr></table></figure></p>\n<p>结果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-3eba223c168616ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.sort()\"></p>\n<p><strong>总结</strong>：实际上上面代码写的方法就是sort()默认的方法；方法可以自定义；</p>\n<h3 id=\"最后数组方法的扩展\"><a href=\"#最后数组方法的扩展\" class=\"headerlink\" title=\"最后数组方法的扩展\"></a>最后数组方法的扩展</h3><p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p>\n<ol>\n<li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li>\n<li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li>\n</ol>\n<h4 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span></span><br><span class=\"line\">array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.every(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.every(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span></span><br><span class=\"line\">array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子:\"></a>例子:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.some(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10 20 30</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0 1 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.some(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上就是js基础中 数组常用的方法，特别要注意的是splice和slice容易混淆，其他的话，用过几次就基本没有问题了，此次代码已经上传到github，有兴趣可以去下载实现一波喔@<a href=\"https://github.com/wLove-c/JavaScript-demo\" target=\"_blank\" rel=\"noopener\">王一诺wLove-c/JavaScript-demo</a>，如果对你有帮助，请点个赞吧；</p>\n</blockquote>\n<blockquote>\n<p>更多内容请转作者博客@<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">王一诺的博客</a>，多多交流~</p>\n</blockquote>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"js基础数组Array的一些特性及方法\">toc</a></p>\n<blockquote>\n<p>前言: 工作业务数据乱，数据转换用得繁，对接交流竟无语，全靠数组方法换；</p>\n</blockquote>\n<h2 id=\"数据的了解\"><a href=\"#数据的了解\" class=\"headerlink\" title=\"数据的了解\"></a>数据的了解</h2><h3 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h3><ul>\n<li>在js基础中，我都们知道数据类型有两大类:原始类型(基本类型)、引用类型</li>\n</ul>\n<h3 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h3><p>js有5 种原始类型，即 Undefined、Null、Boolean、Number 和 String。其中Undefined和Null也称作<strong>特殊类型</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)   <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>)  <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">1</span>)     <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">'1'</span>)   <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>:基本类型，笔者就不作过多介绍具体详情可以查阅<a href=\"http://www.w3school.com.cn/js/pro_js_primitivetypes.asp\" target=\"_blank\" rel=\"noopener\">w3school</a>，这里解释一下为何typeof null得出来的是object类型而不是null，因为null是一个只有一个值的特殊类型，它被认为是对象的占位符，表示一个空对象引用。</p>\n<ul>\n<li>在js中null == undefined 得到是真(true)，尽管这两个值相等，但它们的含义不同。 undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象（在讨论 typeof 运算符时，简单地介绍过这一点）。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。</li>\n</ul>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>js中 基本类型的值基本是不可变的，但引用类型的值是动态可变的；基本类型的变量是存放在栈内存中，而引用类型的值是同时保存在栈内存和堆内存中的对象；</p>\n<ul>\n<li>引用类型一般指的是对象和方法;</li>\n<li>引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址</li>\n</ul>\n<p><strong>举例说明:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr1 = arr;</span><br><span class=\"line\"> arr1.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(arr,arr1)</span><br></pre></td></tr></table></figure></p>\n<p>如上代码：按照我们常规的想法是 arr =  [1,2,3,4,5,6]，arr1 = [1,2,3,4,5,6,1]的；</p>\n<p>但实际输出如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d32a6fa877fa7dfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"实际输出\"></p>\n<p>解释: 上面对引用类型的定义<strong>引用类型其实是在栈内存中存储了一个指针，这个指针指向堆内存中相应的存储地址</strong>有讲到指针的这个词，实际上上面代码的操作 let arr1 = arr;并不是把arr重新拷贝了一份给arr1,而是把arr存储在堆内存的存储地址给了arr1, 对arr1的修改，会对该地址指向的堆内存的数据进行修改，而arr和arr1指向堆内存的地址是相同的，所以打印结果一致；并且都改变了；</p>\n<p>上述换成Object对象依然是一致的，不相信的同学可以私下试试~</p>\n<h2 id=\"数组的方法\"><a href=\"#数组的方法\" class=\"headerlink\" title=\"数组的方法\"></a>数组的方法</h2><p>从<a href=\"http://www.w3school.com.cn/jsref/jsref_obj_array.asp\" target=\"_blank\" rel=\"noopener\">w3school</a>中我们可以知道数组有许多的方法，并且有些是我们经常用到且混淆不清的，接下来我们将对数组的方法进行详解；</p>\n<h3 id=\"1-Array-concat\"><a href=\"#1-Array-concat\" class=\"headerlink\" title=\"1. Array.concat()\"></a>1. Array.concat()</h3><p>Array.concat() 的作用是连接两个或更多的数组，并返回结果。<br>使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> arrAll =  arrNum.concat(arrStr).concat(arrObj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-7e9d6ba651065b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.concat()\"></p>\n<p>此时因为concat()返回的是一个新的实例对象，对原数组操作(arrNum、arrStr)并不会影响到arrAll的值变化，<strong>但假如对arrObj进行改变,由于arrObj里面的对象属于引用类型，arrAll相应的值的地址指针依然是同一个堆内存，假如对arrObj进行改变，arrAll也会相应改变；而arrNum、arrStr里面的值是基本类型，则不影响</strong>；</p>\n<h3 id=\"2-Array-join\"><a href=\"#2-Array-join\" class=\"headerlink\" title=\"2. Array.join()\"></a>2. Array.join()</h3><p>Array.join() 把数组的所有元素放入一个字符串并返回。元素通过指定的分隔符进行分隔。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.join(<span class=\"string\">'|'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.join(<span class=\"string\">','</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.join(<span class=\"string\">'-'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.join(<span class=\"string\">'='</span>))</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-c7c1b9eaa1684919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.join()\"></p>\n<ul>\n<li>返回的字符串均没问题，但假如数组里面是object，则返回[object Object] 字符串；</li>\n</ul>\n<h3 id=\"3-Array-pop\"><a href=\"#3-Array-pop\" class=\"headerlink\" title=\"3. Array.pop()\"></a>3. Array.pop()</h3><p>Array.pop() 向数组的末尾添加一个或更多元素，并返回新的长度。<strong>注意！！！文档上没写明会改变原数组; 但实际上会改变</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.pop())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj,arrArr)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-e1f62d561c5f05cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.pop()\"></p>\n<h3 id=\"4-Array-push\"><a href=\"#4-Array-push\" class=\"headerlink\" title=\"4. Array.push()\"></a>4. Array.push()</h3><p> Array.push() 向数组的末尾添加一个或更多元素，并返回新的长度。</p>\n<p>本来觉得<strong>用的最多，不想作介绍了</strong>但为了加以证明引用类型引用是的存储地址，修改原数组会导致引用相应地址的值也改变；<br>代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"keyword\">let</span>  arrAll = []</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrNum))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrStr))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrObj))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrAll.push(arrArr))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'改变前==='</span>,arrAll)</span><br><span class=\"line\">arrNum[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\">arrStr[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\">arrObj[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\">arrArr[<span class=\"number\">0</span>] = <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'改变后==='</span>,arrAll)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-a30f2def5468e0c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.push()\"></p>\n<p>总结:再次证明引用类型的特点；</p>\n<h3 id=\"5-Array-reverse\"><a href=\"#5-Array-reverse\" class=\"headerlink\" title=\"5. Array.reverse()\"></a>5. Array.reverse()</h3><p>Array.reverse() 颠倒数组中元素的顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.reverse())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.reverse())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.reverse())</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.reverse())</span><br></pre></td></tr></table></figure></p>\n<p>常规使用，毫无问题<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-4ab849432cb505fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.reverse() \"></p>\n<h3 id=\"6-Array-shift\"><a href=\"#6-Array-shift\" class=\"headerlink\" title=\"6. Array.shift()\"></a>6. Array.shift()</h3><p> Array.shift() 删除并返回数组的第一个元素,具体表现和上面的 3. Array.pop() 完全类似，同样会改变原数组，不作过多介绍；</p>\n<h3 id=\"7-Array-unshift\"><a href=\"#7-Array-unshift\" class=\"headerlink\" title=\"7. Array.unshift()\"></a>7. Array.unshift()</h3><p>Array.unshift()向数组的开头添加一个或更多元素，并返回新的长度。</p>\n<p>用法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.unshift(val1,val2,....,valn)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li>val1 必需。向数组添加的第一个元素。</li>\n<li>val2 可选。向数组添加的第二个元素。</li>\n<li>valn 可选。向数组添加的第n个元素。</li>\n</ul>\n<p><strong>注意</strong>：unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。并且 <strong>unshift() 方法不创建新的创建，而是直接修改原有的数组。</strong><br>使用如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.unshift(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.unshift(<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.unshift(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.unshift([<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b32872e6a9c00302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.unshift()\"></p>\n<h3 id=\"8-Array-slice\"><a href=\"#8-Array-slice\" class=\"headerlink\" title=\"8. Array.slice()\"></a>8. Array.slice()</h3><p>Array.slice() 方法可从已有的数组中返回选定的元素。</p>\n<p>用法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.slice(start,end)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li><strong>start</strong> ： 必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</li>\n<li><strong>end</strong> ： 可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li>\n<li><strong>返回值</strong> ：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。<br>使用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输出如下：<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d1d7ebaf8674671f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.slice()\"></p>\n<p><strong>注意:</strong> 该方法并不会修改原数组，而是返回一个子数组</p>\n<h3 id=\"9-Array-splice\"><a href=\"#9-Array-splice\" class=\"headerlink\" title=\"9. Array.splice()\"></a>9. Array.splice()</h3><p>Array.splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。</p>\n<p>用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">arrayObject.splice(index,delLong,item1,.....,itemN)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li><strong>index</strong> ： 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li>\n<li><strong>delLong</strong> ：必需。要删除的项目数量。如果设置为 0，则不会删除项目。</li>\n<li><strong>item1, …, itemN</strong> ：可选。向数组添加的新项目。</li>\n</ul>\n<p><strong>注意：</strong> splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。</p>\n<p>如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。</p>\n<p>使用:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>,<span class=\"string\">'6'</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">let</span>\tarrArr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>]]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum.splice(<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">10000</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrStr.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">'10000'</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrObj.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrArr.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br></pre></td></tr></table></figure></p>\n<p>结果如下:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-eaa4505b10375907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>注意:</strong> 该方法会修改原数组，而是返回一个子数组。如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。如果未删除，则返回空数组；</p>\n<p>总结: slice()和splice()容易混淆，不过这样记就好:<strong>单词长的参数也长，参数长的功能大，可加可减可改变</strong></p>\n<h3 id=\"9-Array-sort\"><a href=\"#9-Array-sort\" class=\"headerlink\" title=\"9. Array.sort()\"></a>9. Array.sort()</h3><p>Array.sort() 方法用于对数组的元素进行排序。</p>\n<p>用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayObject.sort(sortby)</span><br></pre></td></tr></table></figure></p>\n<p>参数解释:</p>\n<ul>\n<li><strong>sortby</strong> ： 可选。规定排序顺序。必须是函数。</li>\n</ul>\n<p>使用:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>\tarrNum = [<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span>\tarrStr = [<span class=\"string\">'6'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'1'</span>,<span class=\"string\">'3'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'5'</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span>\tarrObj = [&#123;<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;,&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;]</span><br><span class=\"line\">  <span class=\"keyword\">let</span>\tarrArr = [[<span class=\"string\">'2'</span>,<span class=\"string\">'1'</span>],[<span class=\"number\">2</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrNum.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrStr.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrObj.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrArr.sort())</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arrNum,arrStr,arrObj,arrArr)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m,n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m &lt; n) <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">   \t<span class=\"keyword\">if</span> (m &gt; n) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == n)<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;))</span><br></pre></td></tr></table></figure></p>\n<p>结果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-3eba223c168616ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Array.sort()\"></p>\n<p><strong>总结</strong>：实际上上面代码写的方法就是sort()默认的方法；方法可以自定义；</p>\n<h3 id=\"最后数组方法的扩展\"><a href=\"#最后数组方法的扩展\" class=\"headerlink\" title=\"最后数组方法的扩展\"></a>最后数组方法的扩展</h3><p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p>\n<ol>\n<li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li>\n<li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li>\n</ol>\n<h4 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span></span><br><span class=\"line\">array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.every(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.every(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span></span><br><span class=\"line\">array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子:\"></a>例子:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.some(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10 20 30</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0 1 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.some(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上就是js基础中 数组常用的方法，特别要注意的是splice和slice容易混淆，其他的话，用过几次就基本没有问题了，此次代码已经上传到github，有兴趣可以去下载实现一波喔@<a href=\"https://github.com/wLove-c/JavaScript-demo\" target=\"_blank\" rel=\"noopener\">王一诺wLove-c/JavaScript-demo</a>，如果对你有帮助，请点个赞吧；</p>\n</blockquote>\n<blockquote>\n<p>更多内容请转作者博客@<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">王一诺的博客</a>，多多交流~</p>\n</blockquote>\n"},{"title":"css实现超出几行省略并...","_content":"\n\n\n@[TOC](css实现超出几行省略并...)\n\n\n![杀生丸](https://user-gold-cdn.xitu.io/2019/9/16/16d38ce4d49c371b?w=7157&h=1717&f=jpeg&s=510219)\n\n- 单行\n```css\nword-break: break-all;\noverflow:hidden; // 超出的文本隐藏\ntext-overflow:ellipsis; // 溢出用省略号显示\nwhite-space:nowrap; // 溢出不换行\n```\n\n- 两行或多行\n```css\nword-break: break-all;\noverflow:hidden; // 超出的文本隐藏\ntext-overflow:ellipsis;\ndisplay:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。\n -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）\n-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。\n```\n> 如果用上了autoprefixer的话，由于它自动补全css前缀，或者删除过时的前缀，导致-webkit-box-orient:vertical; 失效；这时候需要改成如下；\n\n```css\nword-break: break-all;\noverflow:hidden; // 超出的文本隐藏\ntext-overflow:ellipsis;\ndisplay:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。\n /* autoprefixer: off */\n -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）\n/* autoprefixer: on */\n-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。\n```\n>  如果用上了autoprefixer的话，也可以在使用autoprefixer的时候进行配置如下:\n\n```javascript\n// webpack.config.js\n\npostcss([ autoprefixer({ remove: false }) ]); // 关闭autoprefixer的删除前缀功能；\n\n\n```\n更多关于的配置请转[autoprefixer](https://www.npmjs.com/package/autoprefixer)\n\n\n作者博客:[Eno](https://wlove-c.github.io/)\n\n","source":"_posts/coding-20190916.md","raw":"---\ntitle: css实现超出几行省略并...\ntags: CSS\ncategories: 编程\n---\n\n\n\n@[TOC](css实现超出几行省略并...)\n\n\n![杀生丸](https://user-gold-cdn.xitu.io/2019/9/16/16d38ce4d49c371b?w=7157&h=1717&f=jpeg&s=510219)\n\n- 单行\n```css\nword-break: break-all;\noverflow:hidden; // 超出的文本隐藏\ntext-overflow:ellipsis; // 溢出用省略号显示\nwhite-space:nowrap; // 溢出不换行\n```\n\n- 两行或多行\n```css\nword-break: break-all;\noverflow:hidden; // 超出的文本隐藏\ntext-overflow:ellipsis;\ndisplay:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。\n -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）\n-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。\n```\n> 如果用上了autoprefixer的话，由于它自动补全css前缀，或者删除过时的前缀，导致-webkit-box-orient:vertical; 失效；这时候需要改成如下；\n\n```css\nword-break: break-all;\noverflow:hidden; // 超出的文本隐藏\ntext-overflow:ellipsis;\ndisplay:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。\n /* autoprefixer: off */\n -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）\n/* autoprefixer: on */\n-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。\n```\n>  如果用上了autoprefixer的话，也可以在使用autoprefixer的时候进行配置如下:\n\n```javascript\n// webpack.config.js\n\npostcss([ autoprefixer({ remove: false }) ]); // 关闭autoprefixer的删除前缀功能；\n\n\n```\n更多关于的配置请转[autoprefixer](https://www.npmjs.com/package/autoprefixer)\n\n\n作者博客:[Eno](https://wlove-c.github.io/)\n\n","slug":"coding-20190916","published":1,"date":"2020-05-18T06:08:34.682Z","updated":"2020-05-18T06:08:34.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qifc000o0ohyopqb2k0q","content":"<p>@<a href=\"css实现超出几行省略并...\">TOC</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/9/16/16d38ce4d49c371b?w=7157&amp;h=1717&amp;f=jpeg&amp;s=510219\" alt=\"杀生丸\"></p>\n<ul>\n<li><p>单行</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>;</span><br><span class=\"line\">overflow:hidden; // 超出的文本隐藏</span><br><span class=\"line\">text-overflow:ellipsis; // 溢出用省略号显示</span><br><span class=\"line\">white-space:nowrap; // 溢出不换行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两行或多行</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>;</span><br><span class=\"line\">overflow:hidden; // 超出的文本隐藏</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</span><br><span class=\"line\">display:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。</span><br><span class=\"line\"> -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）</span><br><span class=\"line\">-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>如果用上了autoprefixer的话，由于它自动补全css前缀，或者删除过时的前缀，导致-webkit-box-orient:vertical; 失效；这时候需要改成如下；</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>;</span><br><span class=\"line\">overflow:hidden; // 超出的文本隐藏</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</span><br><span class=\"line\">display:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。</span><br><span class=\"line\"> <span class=\"comment\">/* autoprefixer: off */</span></span><br><span class=\"line\"> -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）</span><br><span class=\"line\"><span class=\"comment\">/* autoprefixer: on */</span></span><br><span class=\"line\">-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 如果用上了autoprefixer的话，也可以在使用autoprefixer的时候进行配置如下:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">postcss([ autoprefixer(&#123; <span class=\"attr\">remove</span>: <span class=\"literal\">false</span> &#125;) ]); <span class=\"comment\">// 关闭autoprefixer的删除前缀功能；</span></span><br></pre></td></tr></table></figure>\n<p>更多关于的配置请转<a href=\"https://www.npmjs.com/package/autoprefixer\" target=\"_blank\" rel=\"noopener\">autoprefixer</a></p>\n<p>作者博客:<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">Eno</a></p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"css实现超出几行省略并...\">TOC</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://user-gold-cdn.xitu.io/2019/9/16/16d38ce4d49c371b?w=7157&amp;h=1717&amp;f=jpeg&amp;s=510219\" alt=\"杀生丸\"></p>\n<ul>\n<li><p>单行</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>;</span><br><span class=\"line\">overflow:hidden; // 超出的文本隐藏</span><br><span class=\"line\">text-overflow:ellipsis; // 溢出用省略号显示</span><br><span class=\"line\">white-space:nowrap; // 溢出不换行</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两行或多行</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>;</span><br><span class=\"line\">overflow:hidden; // 超出的文本隐藏</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</span><br><span class=\"line\">display:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。</span><br><span class=\"line\"> -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）</span><br><span class=\"line\">-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>如果用上了autoprefixer的话，由于它自动补全css前缀，或者删除过时的前缀，导致-webkit-box-orient:vertical; 失效；这时候需要改成如下；</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">word-break</span>: <span class=\"selector-tag\">break-all</span>;</span><br><span class=\"line\">overflow:hidden; // 超出的文本隐藏</span><br><span class=\"line\"><span class=\"selector-tag\">text-overflow</span><span class=\"selector-pseudo\">:ellipsis</span>;</span><br><span class=\"line\">display:-webkit-box; // 将对象作为弹性伸缩盒子模型显示。</span><br><span class=\"line\"> <span class=\"comment\">/* autoprefixer: off */</span></span><br><span class=\"line\"> -webkit-box-orient:vertical;  //从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式）</span><br><span class=\"line\"><span class=\"comment\">/* autoprefixer: on */</span></span><br><span class=\"line\">-webkit-line-clamp:2; // 结合上面两个属性，表示显示的行数。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 如果用上了autoprefixer的话，也可以在使用autoprefixer的时候进行配置如下:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">postcss([ autoprefixer(&#123; <span class=\"attr\">remove</span>: <span class=\"literal\">false</span> &#125;) ]); <span class=\"comment\">// 关闭autoprefixer的删除前缀功能；</span></span><br></pre></td></tr></table></figure>\n<p>更多关于的配置请转<a href=\"https://www.npmjs.com/package/autoprefixer\" target=\"_blank\" rel=\"noopener\">autoprefixer</a></p>\n<p>作者博客:<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">Eno</a></p>\n"},{"title":"vue前端代码规范","_content":"\n使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；\n持续更新\n<section class=\"post-content\">\n            <p><strong>一、JavaScript命名规范</strong></p>\n\n<pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义\n</code></pre>\n\n<p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p>\n\n<p><strong>二、CSS命名规范</strong></p>\n\n<pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。\n2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名\n     .fs {\n            font: italic bold 12px/24px \"Microsoft YaHei\";\n    }\n3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：\n      .pub-shopIcon {\n                   width:12px;\n                   height:12px;\n                   float:left;\n                   position:relative;\n                   left:0;\n                   top:0;\n   \t\t\t}\n</code></pre>\n\n<p><strong>三、 Vue 目录结构</strong></p>\n\n<p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br>\n2.static用来放没有npm包的第三方插件，字体文件。 <br>\n3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br>\n<code>\n├── README.md              // 用到的插件和其他项目注意点在这里标明\n├── buil\u001a\u001ad\n│   ├── build.js\n│   ├── check-versions.js\n│   ├── logo.png\n│   ├── utils.js\n│   ├── vue-loader.conf.js\n│   ├── webpack.base.conf.js\n│   ├── webpack.dev.conf.js\n│   └── webpack.prod.conf.js\n├── config\n│   ├── dev.env.js\n│   ├── index.js\n│   └── prod.env.js\n├── index.html\n├── package.json\n├── src\n│   ├── App.vue\n│   ├── api               // 抽出的axios 接口请求配置\n│   ├── assets            //  图片和公用样式\n│   ├── components        //  公用组件\n│   ├── directives        //  vue 指令\n│   ├── filters           //  vue过滤器\n│   ├── main.js\n│   ├── router            //  路由\n│   ├── store\n│   ├── utils             // 工具\n│   └── views             // 业务页面\n└── static                // 没有npm包的第三方插件\n</code></p>\n        </section>\n","source":"_posts/coding-3.md","raw":"---\ntitle: vue前端代码规范\n---\n\n使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；\n持续更新\n<section class=\"post-content\">\n            <p><strong>一、JavaScript命名规范</strong></p>\n\n<pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义\n</code></pre>\n\n<p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p>\n\n<p><strong>二、CSS命名规范</strong></p>\n\n<pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。\n2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名\n     .fs {\n            font: italic bold 12px/24px \"Microsoft YaHei\";\n    }\n3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：\n      .pub-shopIcon {\n                   width:12px;\n                   height:12px;\n                   float:left;\n                   position:relative;\n                   left:0;\n                   top:0;\n   \t\t\t}\n</code></pre>\n\n<p><strong>三、 Vue 目录结构</strong></p>\n\n<p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br>\n2.static用来放没有npm包的第三方插件，字体文件。 <br>\n3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br>\n<code>\n├── README.md              // 用到的插件和其他项目注意点在这里标明\n├── buil\u001a\u001ad\n│   ├── build.js\n│   ├── check-versions.js\n│   ├── logo.png\n│   ├── utils.js\n│   ├── vue-loader.conf.js\n│   ├── webpack.base.conf.js\n│   ├── webpack.dev.conf.js\n│   └── webpack.prod.conf.js\n├── config\n│   ├── dev.env.js\n│   ├── index.js\n│   └── prod.env.js\n├── index.html\n├── package.json\n├── src\n│   ├── App.vue\n│   ├── api               // 抽出的axios 接口请求配置\n│   ├── assets            //  图片和公用样式\n│   ├── components        //  公用组件\n│   ├── directives        //  vue 指令\n│   ├── filters           //  vue过滤器\n│   ├── main.js\n│   ├── router            //  路由\n│   ├── store\n│   ├── utils             // 工具\n│   └── views             // 业务页面\n└── static                // 没有npm包的第三方插件\n</code></p>\n        </section>\n","slug":"coding-3","published":1,"date":"2020-05-18T06:08:34.683Z","updated":"2020-05-18T06:08:34.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qifd000s0ohyoqd4voti","content":"<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p>\n<section class=\"post-content\"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── buil\u001a\u001ad<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p>\n<section class=\"post-content\"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── buil\u001a\u001ad<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>\n"},{"title":"数组方法的扩展:array.every()和array.some()","_content":"\n从字面认知:every是每一个都，some是都有一些就~~\n即:\n1. every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；\n2. some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；\n\n## every()\n\n```javascript\n// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；\narray.every(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.every((item,index,array)=>{\n console.log(item) // 10\n console.log(index) // 0\n console.log(array) //[10,20,30,40,50,22,26]\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.every(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // false\n\n```\n\n## some()\n\n```javascript\n// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；\narray.some(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.some((item,index,array)=>{\n\n  console.log(item) // 10 20 30\n  console.log(index) // 0 1 2\n  console.log(array) //[10,20,30,40,50,22,26]\n\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.some(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // true\n\n```\n","source":"_posts/coding-4.md","raw":"---\ntitle: 数组方法的扩展:array.every()和array.some()\ntags: javaScript\ncategories: 编程\n---\n\n从字面认知:every是每一个都，some是都有一些就~~\n即:\n1. every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；\n2. some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；\n\n## every()\n\n```javascript\n// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；\narray.every(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.every((item,index,array)=>{\n console.log(item) // 10\n console.log(index) // 0\n console.log(array) //[10,20,30,40,50,22,26]\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.every(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // false\n\n```\n\n## some()\n\n```javascript\n// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；\narray.some(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.some((item,index,array)=>{\n\n  console.log(item) // 10 20 30\n  console.log(index) // 0 1 2\n  console.log(array) //[10,20,30,40,50,22,26]\n\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.some(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // true\n\n```\n","slug":"coding-4","published":1,"date":"2020-05-18T06:08:34.683Z","updated":"2020-05-18T06:08:34.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qife000v0ohyadhe6mg0","content":"<p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p>\n<ol>\n<li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li>\n<li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li>\n</ol>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span></span><br><span class=\"line\">array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.every(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.every(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span></span><br><span class=\"line\">array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.some(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10 20 30</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0 1 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.some(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p>\n<ol>\n<li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li>\n<li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li>\n</ol>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span></span><br><span class=\"line\">array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.every(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.every(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span></span><br><span class=\"line\">array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array）&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> item:当前元素的值；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> index:当前元素的索引；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 <span class=\"regexp\">//</span> array:当前元素的数组对象；</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">         &#125;</span>)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = [<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,<span class=\"number\">22</span>,<span class=\"number\">26</span>]</span><br><span class=\"line\"> <span class=\"comment\">// 所有都满足才会返回true,否则返回false;</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> result = age.some(<span class=\"function\">(<span class=\"params\">item,index,array</span>)=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// 10 20 30</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0 1 2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(array) <span class=\"comment\">//[10,20,30,40,50,22,26]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> item &gt; <span class=\"number\">22</span>;</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"comment\">// let result = age.some(function(item,index,array)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return item &gt; 22;</span></span><br><span class=\"line\"><span class=\"comment\">// \t&#125;)</span></span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(result) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"前端构建工具Gulp.js 知多少","_content":"\n\n@[TOC](前端构建工具Gulp.js知多少)\n### 写在前面\n> 前几天在更新webpack知识的时候，想起来三年前用过的前端构建工具gulp/grunt,遂写个笔记总结一下，出来混总是要还的，忘得七七八八了...\n\n阅读本文章之前，相信你已经对前端构建工具(webpack、gulp、grunt)有一定的认知和了解了，那么他们之间究竟有什么区别呢？\n### 什么是gulp？\ngulp文档上面有这么一句话$\\color{blue} {用自动化构建工具增强你的工作流程！} $ ，也就是说 gulp是一个自动化构建工具；\ngulp的一些功能如下(包括但不限于):\n![自动化构建工具gulp](https://upload-images.jianshu.io/upload_images/11447772-631953087e459269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### gulp或grunt和webpack的区别\n其实Webpack和另外两个并没有太多的可比性\n* Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。\n\n* Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。\n![Grunt和Gulp的工作流程](https://upload-images.jianshu.io/upload_images/11447772-d87610855f28fd9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。\n![Webpack的工作方式](https://upload-images.jianshu.io/upload_images/11447772-cdea13333a46b8f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**上述内容转自@zhangwang的[入门Webpack，看这篇就够了](https://www.jianshu.com/p/42e11515c10f)**\n\n### gulp起步\n傻瓜式起步照搬官网文档\n1.安装\n```\n// 全局安装\n$ npm install -g gulp\n或者\n$ npm install --global gulp\n\n// 作为项目的开发依赖（devDependencies）安装：\n$ npm install --save-dev gulp\n```\n2.在项目根目录下创建一个名为 gulpfile.js 的文件：\n```\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // 将你的默认的任务代码放在这\n});\n```\n3.运行 gulp：\n```\n$ gulp\n```\n默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。\n具体详情可以查看[gulpjs.com文档](https://www.gulpjs.com.cn/docs/)\n\n### 项目搭建\n新建一个项目gulp-test\n环境:\n```\n$ node -v // v9.1.0\n$ npm -v // 6.5.0\n```\n1.新建文件以下文件如下\n```\ngulp-test/\n          css/\n               index.scss\n           js/\n               helloworld.js\n           index.html\n           gulpfile.js\n```\n其中 **gulpfile.js** 是我们gulp的配置文件，启动gulp默认会找个这个文件并执行；\n2.接下来安装依赖\n```\n$ npm init\n```\n一直按回车Enter初始化package.json文件(小技巧: **npm iniy -y** 可以免去繁琐的enter步骤)\n此时我们的目录结构是这样了\n```\ngulp-test/\n          css/\n               index.scss\n           js/\n               helloworld.js\n           index.html\n           gulpfile.js\n           package.json\n```\n安装依赖\n```\nnpm i --save-dev gulp        // gulp自动化构建工具\nnpm i --save-dev gulp-uglify //js压缩\nnpm i --save-dev gulp-concat //文件合并\nnpm i --save-dev gulp-jshint //js语法检测\nnpm i --save-dev gulp-rename //文件重命名\nnpm i --save-dev gulp-sass //sass编译工具\nnpm i --save-dev gulp-minify-css //css压缩\nnpm i --save-dev del       //文件删除\n// 以下三选一\nnpm i --save-dev gulp-connect       // 自动刷新页面\nnpm i --save-dev  browser-sync       // 自动刷新页面\nnpm i --save-dev gulp-livereload       // 自动刷新页面\n```\n这里页面实时刷新只讲这个**gulp-connect** ，其他详情可以参照[Browsersync](http://www.browsersync.cn/docs/gulp/)和文章[gulp-livereload](http://www.ydcss.com/archives/702)\n\n安装完依赖后配置gulpfile.js如下:\n```javascript\n// 定义依赖项和插件\nconst gulp=require('gulp');\nconst  uglify=require('gulp-uglify'); //js压缩\nconst  concat=require('gulp-concat'); //文件合并\nconst jshint = require('gulp-jshint'); //js语法检测\nconst rename = require('gulp-rename'); // 重命名\nconst sass = require('gulp-sass'); // 编译scss\nconst  minifycss = require('gulp-minify-css'); // 压缩css\n// const livereload = require('gulp-livereload'); // 自动刷新页面\nconst  del = require('del'); //文件删除\nconst connect = require('gulp-connect'); // 自动刷新页面\n\ngulp.task('server', function() {\n  connect.server({\n    port: 8080, //指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面\n    root: './', //指定html文件起始的根目录\n    livereload: true //启动实时刷新功能（配合上边的connect.reload()方法同步使用）\n  });\n});\n\n// 定义名为 \"my-task\" 的任务压缩js\ngulp.task('my-task-js', function(){\n  gulp.src('./js/*.js')\n    .pipe(jshint())\n    .pipe(uglify())\n    .pipe(concat('all.js'))\n    .pipe(rename({suffix: '.min'}))\n    .pipe(gulp.dest('./dist/js'))\n    .pipe(connect.reload())\n});\n\n\n// 定义名为 \"my-task-css\" 的任务编译scss压缩css\ngulp.task('my-task-css', function() {\n  gulp.src('./css/*.scss')\n    .pipe(sass().on('error', sass.logError))\n    .pipe(concat('all.css'))\n    .pipe(rename({suffix: '.min'}))\n    .pipe(minifycss())\n    .pipe(connect.reload())\n    .pipe(gulp.dest('./dist/css'))\n\n});\n\ngulp.task('html', function(){\n  gulp.src('*.html')\n    .pipe(gulp.dest('dist/html'))\n    .pipe(connect.reload())\n})\n//执行压缩前，先删除以前压缩的文件\ngulp.task('clean', function() {\n  return del(['./dist/css/all.css', './dist/css/all.min.css', './dist/all.js','./dist/all.min.js', './dist/html'])\n});\n// 定义默认任务\n\ngulp.task('default',['clean'],function() {\n  gulp.start('my-task-js', 'my-task-css', 'watch', 'server' );\n});\n// 任务监听\ngulp.task('watch', function() {\n  // Watch.js files\n  gulp.watch('./js/*.js', ['my-task-js']);\n  // Watch .scss files\n  gulp.watch('./css/*.scss', ['my-task-css']);\n  // Watch .html files\n  gulp.watch('./*.html', ['html']);\n  // Watch any files in dist/, reload on change\n  // gulp.watch(['dist/!**']).on('change', livereload.changed);\n});\n\n```\n大概讲解一下gulpfile.js:\n```javascript\n// ...\n// 定义名为 \"my-task\" 的任务压缩js\ngulp.task('my-task-js', function(){\n  gulp.src('./js/*.js')\n    .pipe(jshint()) //js检测\n    .pipe(uglify()) //js压缩\n    .pipe(concat('all.js')) //合并为all.js\n    .pipe(rename({suffix: '.min'})) // 重命名为all.mim.js\n    .pipe(gulp.dest('./dist/js')) //输出到/dist/js目录\n    .pipe(connect.reload()) // 更新页面\n});\n// ...\n```\n**gulp.task**是gulp的api 定义一个使用 [Orchestrator](https://github.com/robrich/orchestrator) 实现的任务（task）\n如上我们定义了**my-task-js**，**my-task-css**，**html**，**clean**，**default**，**watch**，**server**等任务，其中:\n\n-----\n**my-task-js** 是将 符合所提供的匹配模式的js 进行检测(gulp-jshint)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/js目录下；\n\n-----\n**my-task-css** 是将 符合所提供的匹配模式的sass进行编译(gulp-sass)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/css目录下；\n\n-----\n**html**  是将 符合所提供的匹配模式的html进行监听，如果有变化则connect.reload()\n\n------\n**clean** 是如果任务重新启动时 删除旧文件；\n\n-----\n**default** gulp默认启动的任务\n\n-----\n**watch** gulp的api 监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。\n\n------\n**server** 依赖gulp-connect启动一个服务器\n```\ngulp.task('server', function() {\n  connect.server({\n    port: 8080, //指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面\n    root: './', //指定html文件起始的根目录\n    livereload: true //启动实时刷新功能（配合上边的connect.reload()方法同步使用）\n  });\n});\n```\n配置完gulpfile.js之后，我们给js和css及html加点东西:\n\n首先js/helloworld.js\n```\n// helloworld.js\nconsole.log('hello world')\n```\ncss/index.scss\n```\n// index.scss\n\n// 变量测试\n$fontColor:  #red;\n$backColor: aqua;\n// 嵌套类测试\ndiv {\n  p {\n    font-weight: bold;\n    font-size: 20px;\n    color: $fontColor;\n  }\n}\n\ndiv{\n  background: $backColor;\n}\n```\nindex.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>gulp-study</title>\n\t<link href=/dist/css/all.min.css rel=stylesheet>\n</head>\n<body>\n\t<div id=\"firstDiv\">\n\t\t<p>我是gulp</p>\n\t\t<p>hello world</p>\n\t</div>\n<p>我是p标签</p>\n<p>我是p标签</p>\n</body>\n<script src=\"/dist/js/all.min.js\"></script>\n</html>\n\n```\n运行gulp\n```\n$ gulp\n```\n![运行输出](https://upload-images.jianshu.io/upload_images/11447772-658fdd8778eee60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n------\n浏览器效果:\n![效果](https://upload-images.jianshu.io/upload_images/11447772-71e06d521d7296ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接下来我们修改helloworld.js来看看是否能实时刷新\n修改如下:\n```\n// helloworld.js\nconsole.log('hello world');\n\nlet firstDiv =  document.getElementById('firstDiv')\n\nconsole.log(firstDiv)\n\n```\n按保存之后，终端给我们报了一个错:\n![Unhandled 'error' event](https://upload-images.jianshu.io/upload_images/11447772-ccc18ca2147541e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n查看js发现我们用了es6语法的声明语句$\\color{red}{let}$ 但当前gulp无法处理es6语法，有问题解决问题，es6=>es5\n\n解决方案:\n安装gulp-babel babel-core babel-preset-es2015\n```\nnpm i  --save-dev  gulp-babel babel-core babel-preset-es2015\n```\ngulpfile.js修改如下:\n```javascript\n// ...\nconst babel = require('gulp-babel');\n// ...\n// 定义名为 \"my-task\" 的任务压缩js\ngulp.task('my-task-js', function(){\n  gulp.src('./js/*.js')\n    .pipe(babel())\n    .pipe(jshint())\n    .pipe(uglify())\n    .pipe(concat('all.js'))\n    .pipe(rename({suffix: '.min'}))\n    .pipe(gulp.dest('./dist/js'))\n    .pipe(connect.reload())\n});\n// ...\n\n```\n运行\n```\n$ gulp\n```\n依然报上面的错；找了一些原因发现，虽然安装了相关依赖，却没有配置.babelrc文件，即babel还没转化es6\n\n根目录添加.babelrc文件\n```\n{\n\t\"presets\": [\"es2015\"]\n}\n\n```\n重新运行:\n```\n$ gulp\n```\n![结果如下](https://upload-images.jianshu.io/upload_images/11447772-ebca2eebe090db0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n查看dist下的js文件\n![let已经转化成var](https://upload-images.jianshu.io/upload_images/11447772-d6e0cd882a9255d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n改变helloworld.js检查页面是否刷新\n```javascript\n// helloworld.js\nconsole.log('hello world');\n\nlet firstDiv =  document.getElementById('firstDiv')\n\nconsole.log(firstDiv)\nfirstDiv.style.backgroundColor = 'yellow';\n\n```\n保存，页面的天空蓝换成你们喜欢的yellow颜色\n![页面的天空蓝换成你们喜欢的yellow颜色](https://upload-images.jianshu.io/upload_images/11447772-b754da4517d86f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n修改index.scss 查看是否会刷新页面\n```scss\n// index.scss\n\n// 变量测试\n$fontColor:  #red;\n$backColor: aqua;\n// 嵌套类测试\ndiv {\n  p {\n    font-weight: bold;\n    font-size: 20px;\n    color: $fontColor;\n  }\n}\n\ndiv{\n  background: $backColor;\n  width: 400px;\n  height: 400px;\n  margin: 0 auto;\n}\n\n\n```\n![页面更新正常](https://upload-images.jianshu.io/upload_images/11447772-2c4df6498e367b28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后修改index.html 查看是否会刷新页面\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>gulp-study</title>\n\t<link href=/dist/css/all.min.css rel=stylesheet>\n</head>\n<body>\n\t<div id=\"firstDiv\">\n\t\t<p>我是gulp</p>\n\t\t<p>hello world</p>\n\t</div>\n<div>\n\t<p>我是真的皮</p>\n</div>\n</body>\n<script src=\"/dist/js/all.min.js\"></script>\n</html>\n\n```\n![输出完美](https://upload-images.jianshu.io/upload_images/11447772-ffbb4620ab84a644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 文章最后\n今天主要学习了gulp的简单项目搭建及实时更新配置；其实gulp类似于grunt的弱化版，但更简单好用，只是插件会少一些，目前主流的项目搭建工具主要是webpack，但依然有不少项目还用着gulp或者grunt\n\n扩展:\n> [webpack中文网](https://www.webpackjs.com/concepts/)\n> [gulpjs中文网](https://www.gulpjs.com.cn/docs/)\n> [gruntjs中文网](https://www.gruntjs.net/getting-started)\n\n下面还有一些楼主的学习笔记:\n> @[webpack4+加vue2+从零开始搭设vue项目](https://www.jianshu.com/p/10fbaa365f0c)\n> @[nginx部署/代理/跨域](https://www.jianshu.com/p/c577582581b1)\n\n有兴趣的可以多多交流@[楼主博客](https://wlove-c.github.io/)\n\n\n\n\n","source":"_posts/gulp-20190618.md","raw":"---\ntitle: 前端构建工具Gulp.js 知多少\ntags: gulp\ncategories: 编程\n---\n\n\n@[TOC](前端构建工具Gulp.js知多少)\n### 写在前面\n> 前几天在更新webpack知识的时候，想起来三年前用过的前端构建工具gulp/grunt,遂写个笔记总结一下，出来混总是要还的，忘得七七八八了...\n\n阅读本文章之前，相信你已经对前端构建工具(webpack、gulp、grunt)有一定的认知和了解了，那么他们之间究竟有什么区别呢？\n### 什么是gulp？\ngulp文档上面有这么一句话$\\color{blue} {用自动化构建工具增强你的工作流程！} $ ，也就是说 gulp是一个自动化构建工具；\ngulp的一些功能如下(包括但不限于):\n![自动化构建工具gulp](https://upload-images.jianshu.io/upload_images/11447772-631953087e459269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### gulp或grunt和webpack的区别\n其实Webpack和另外两个并没有太多的可比性\n* Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。\n\n* Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。\n![Grunt和Gulp的工作流程](https://upload-images.jianshu.io/upload_images/11447772-d87610855f28fd9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。\n![Webpack的工作方式](https://upload-images.jianshu.io/upload_images/11447772-cdea13333a46b8f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**上述内容转自@zhangwang的[入门Webpack，看这篇就够了](https://www.jianshu.com/p/42e11515c10f)**\n\n### gulp起步\n傻瓜式起步照搬官网文档\n1.安装\n```\n// 全局安装\n$ npm install -g gulp\n或者\n$ npm install --global gulp\n\n// 作为项目的开发依赖（devDependencies）安装：\n$ npm install --save-dev gulp\n```\n2.在项目根目录下创建一个名为 gulpfile.js 的文件：\n```\nvar gulp = require('gulp');\n\ngulp.task('default', function() {\n  // 将你的默认的任务代码放在这\n});\n```\n3.运行 gulp：\n```\n$ gulp\n```\n默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。\n具体详情可以查看[gulpjs.com文档](https://www.gulpjs.com.cn/docs/)\n\n### 项目搭建\n新建一个项目gulp-test\n环境:\n```\n$ node -v // v9.1.0\n$ npm -v // 6.5.0\n```\n1.新建文件以下文件如下\n```\ngulp-test/\n          css/\n               index.scss\n           js/\n               helloworld.js\n           index.html\n           gulpfile.js\n```\n其中 **gulpfile.js** 是我们gulp的配置文件，启动gulp默认会找个这个文件并执行；\n2.接下来安装依赖\n```\n$ npm init\n```\n一直按回车Enter初始化package.json文件(小技巧: **npm iniy -y** 可以免去繁琐的enter步骤)\n此时我们的目录结构是这样了\n```\ngulp-test/\n          css/\n               index.scss\n           js/\n               helloworld.js\n           index.html\n           gulpfile.js\n           package.json\n```\n安装依赖\n```\nnpm i --save-dev gulp        // gulp自动化构建工具\nnpm i --save-dev gulp-uglify //js压缩\nnpm i --save-dev gulp-concat //文件合并\nnpm i --save-dev gulp-jshint //js语法检测\nnpm i --save-dev gulp-rename //文件重命名\nnpm i --save-dev gulp-sass //sass编译工具\nnpm i --save-dev gulp-minify-css //css压缩\nnpm i --save-dev del       //文件删除\n// 以下三选一\nnpm i --save-dev gulp-connect       // 自动刷新页面\nnpm i --save-dev  browser-sync       // 自动刷新页面\nnpm i --save-dev gulp-livereload       // 自动刷新页面\n```\n这里页面实时刷新只讲这个**gulp-connect** ，其他详情可以参照[Browsersync](http://www.browsersync.cn/docs/gulp/)和文章[gulp-livereload](http://www.ydcss.com/archives/702)\n\n安装完依赖后配置gulpfile.js如下:\n```javascript\n// 定义依赖项和插件\nconst gulp=require('gulp');\nconst  uglify=require('gulp-uglify'); //js压缩\nconst  concat=require('gulp-concat'); //文件合并\nconst jshint = require('gulp-jshint'); //js语法检测\nconst rename = require('gulp-rename'); // 重命名\nconst sass = require('gulp-sass'); // 编译scss\nconst  minifycss = require('gulp-minify-css'); // 压缩css\n// const livereload = require('gulp-livereload'); // 自动刷新页面\nconst  del = require('del'); //文件删除\nconst connect = require('gulp-connect'); // 自动刷新页面\n\ngulp.task('server', function() {\n  connect.server({\n    port: 8080, //指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面\n    root: './', //指定html文件起始的根目录\n    livereload: true //启动实时刷新功能（配合上边的connect.reload()方法同步使用）\n  });\n});\n\n// 定义名为 \"my-task\" 的任务压缩js\ngulp.task('my-task-js', function(){\n  gulp.src('./js/*.js')\n    .pipe(jshint())\n    .pipe(uglify())\n    .pipe(concat('all.js'))\n    .pipe(rename({suffix: '.min'}))\n    .pipe(gulp.dest('./dist/js'))\n    .pipe(connect.reload())\n});\n\n\n// 定义名为 \"my-task-css\" 的任务编译scss压缩css\ngulp.task('my-task-css', function() {\n  gulp.src('./css/*.scss')\n    .pipe(sass().on('error', sass.logError))\n    .pipe(concat('all.css'))\n    .pipe(rename({suffix: '.min'}))\n    .pipe(minifycss())\n    .pipe(connect.reload())\n    .pipe(gulp.dest('./dist/css'))\n\n});\n\ngulp.task('html', function(){\n  gulp.src('*.html')\n    .pipe(gulp.dest('dist/html'))\n    .pipe(connect.reload())\n})\n//执行压缩前，先删除以前压缩的文件\ngulp.task('clean', function() {\n  return del(['./dist/css/all.css', './dist/css/all.min.css', './dist/all.js','./dist/all.min.js', './dist/html'])\n});\n// 定义默认任务\n\ngulp.task('default',['clean'],function() {\n  gulp.start('my-task-js', 'my-task-css', 'watch', 'server' );\n});\n// 任务监听\ngulp.task('watch', function() {\n  // Watch.js files\n  gulp.watch('./js/*.js', ['my-task-js']);\n  // Watch .scss files\n  gulp.watch('./css/*.scss', ['my-task-css']);\n  // Watch .html files\n  gulp.watch('./*.html', ['html']);\n  // Watch any files in dist/, reload on change\n  // gulp.watch(['dist/!**']).on('change', livereload.changed);\n});\n\n```\n大概讲解一下gulpfile.js:\n```javascript\n// ...\n// 定义名为 \"my-task\" 的任务压缩js\ngulp.task('my-task-js', function(){\n  gulp.src('./js/*.js')\n    .pipe(jshint()) //js检测\n    .pipe(uglify()) //js压缩\n    .pipe(concat('all.js')) //合并为all.js\n    .pipe(rename({suffix: '.min'})) // 重命名为all.mim.js\n    .pipe(gulp.dest('./dist/js')) //输出到/dist/js目录\n    .pipe(connect.reload()) // 更新页面\n});\n// ...\n```\n**gulp.task**是gulp的api 定义一个使用 [Orchestrator](https://github.com/robrich/orchestrator) 实现的任务（task）\n如上我们定义了**my-task-js**，**my-task-css**，**html**，**clean**，**default**，**watch**，**server**等任务，其中:\n\n-----\n**my-task-js** 是将 符合所提供的匹配模式的js 进行检测(gulp-jshint)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/js目录下；\n\n-----\n**my-task-css** 是将 符合所提供的匹配模式的sass进行编译(gulp-sass)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/css目录下；\n\n-----\n**html**  是将 符合所提供的匹配模式的html进行监听，如果有变化则connect.reload()\n\n------\n**clean** 是如果任务重新启动时 删除旧文件；\n\n-----\n**default** gulp默认启动的任务\n\n-----\n**watch** gulp的api 监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。\n\n------\n**server** 依赖gulp-connect启动一个服务器\n```\ngulp.task('server', function() {\n  connect.server({\n    port: 8080, //指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面\n    root: './', //指定html文件起始的根目录\n    livereload: true //启动实时刷新功能（配合上边的connect.reload()方法同步使用）\n  });\n});\n```\n配置完gulpfile.js之后，我们给js和css及html加点东西:\n\n首先js/helloworld.js\n```\n// helloworld.js\nconsole.log('hello world')\n```\ncss/index.scss\n```\n// index.scss\n\n// 变量测试\n$fontColor:  #red;\n$backColor: aqua;\n// 嵌套类测试\ndiv {\n  p {\n    font-weight: bold;\n    font-size: 20px;\n    color: $fontColor;\n  }\n}\n\ndiv{\n  background: $backColor;\n}\n```\nindex.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>gulp-study</title>\n\t<link href=/dist/css/all.min.css rel=stylesheet>\n</head>\n<body>\n\t<div id=\"firstDiv\">\n\t\t<p>我是gulp</p>\n\t\t<p>hello world</p>\n\t</div>\n<p>我是p标签</p>\n<p>我是p标签</p>\n</body>\n<script src=\"/dist/js/all.min.js\"></script>\n</html>\n\n```\n运行gulp\n```\n$ gulp\n```\n![运行输出](https://upload-images.jianshu.io/upload_images/11447772-658fdd8778eee60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n------\n浏览器效果:\n![效果](https://upload-images.jianshu.io/upload_images/11447772-71e06d521d7296ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接下来我们修改helloworld.js来看看是否能实时刷新\n修改如下:\n```\n// helloworld.js\nconsole.log('hello world');\n\nlet firstDiv =  document.getElementById('firstDiv')\n\nconsole.log(firstDiv)\n\n```\n按保存之后，终端给我们报了一个错:\n![Unhandled 'error' event](https://upload-images.jianshu.io/upload_images/11447772-ccc18ca2147541e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n查看js发现我们用了es6语法的声明语句$\\color{red}{let}$ 但当前gulp无法处理es6语法，有问题解决问题，es6=>es5\n\n解决方案:\n安装gulp-babel babel-core babel-preset-es2015\n```\nnpm i  --save-dev  gulp-babel babel-core babel-preset-es2015\n```\ngulpfile.js修改如下:\n```javascript\n// ...\nconst babel = require('gulp-babel');\n// ...\n// 定义名为 \"my-task\" 的任务压缩js\ngulp.task('my-task-js', function(){\n  gulp.src('./js/*.js')\n    .pipe(babel())\n    .pipe(jshint())\n    .pipe(uglify())\n    .pipe(concat('all.js'))\n    .pipe(rename({suffix: '.min'}))\n    .pipe(gulp.dest('./dist/js'))\n    .pipe(connect.reload())\n});\n// ...\n\n```\n运行\n```\n$ gulp\n```\n依然报上面的错；找了一些原因发现，虽然安装了相关依赖，却没有配置.babelrc文件，即babel还没转化es6\n\n根目录添加.babelrc文件\n```\n{\n\t\"presets\": [\"es2015\"]\n}\n\n```\n重新运行:\n```\n$ gulp\n```\n![结果如下](https://upload-images.jianshu.io/upload_images/11447772-ebca2eebe090db0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n查看dist下的js文件\n![let已经转化成var](https://upload-images.jianshu.io/upload_images/11447772-d6e0cd882a9255d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n改变helloworld.js检查页面是否刷新\n```javascript\n// helloworld.js\nconsole.log('hello world');\n\nlet firstDiv =  document.getElementById('firstDiv')\n\nconsole.log(firstDiv)\nfirstDiv.style.backgroundColor = 'yellow';\n\n```\n保存，页面的天空蓝换成你们喜欢的yellow颜色\n![页面的天空蓝换成你们喜欢的yellow颜色](https://upload-images.jianshu.io/upload_images/11447772-b754da4517d86f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n修改index.scss 查看是否会刷新页面\n```scss\n// index.scss\n\n// 变量测试\n$fontColor:  #red;\n$backColor: aqua;\n// 嵌套类测试\ndiv {\n  p {\n    font-weight: bold;\n    font-size: 20px;\n    color: $fontColor;\n  }\n}\n\ndiv{\n  background: $backColor;\n  width: 400px;\n  height: 400px;\n  margin: 0 auto;\n}\n\n\n```\n![页面更新正常](https://upload-images.jianshu.io/upload_images/11447772-2c4df6498e367b28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后修改index.html 查看是否会刷新页面\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>gulp-study</title>\n\t<link href=/dist/css/all.min.css rel=stylesheet>\n</head>\n<body>\n\t<div id=\"firstDiv\">\n\t\t<p>我是gulp</p>\n\t\t<p>hello world</p>\n\t</div>\n<div>\n\t<p>我是真的皮</p>\n</div>\n</body>\n<script src=\"/dist/js/all.min.js\"></script>\n</html>\n\n```\n![输出完美](https://upload-images.jianshu.io/upload_images/11447772-ffbb4620ab84a644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 文章最后\n今天主要学习了gulp的简单项目搭建及实时更新配置；其实gulp类似于grunt的弱化版，但更简单好用，只是插件会少一些，目前主流的项目搭建工具主要是webpack，但依然有不少项目还用着gulp或者grunt\n\n扩展:\n> [webpack中文网](https://www.webpackjs.com/concepts/)\n> [gulpjs中文网](https://www.gulpjs.com.cn/docs/)\n> [gruntjs中文网](https://www.gruntjs.net/getting-started)\n\n下面还有一些楼主的学习笔记:\n> @[webpack4+加vue2+从零开始搭设vue项目](https://www.jianshu.com/p/10fbaa365f0c)\n> @[nginx部署/代理/跨域](https://www.jianshu.com/p/c577582581b1)\n\n有兴趣的可以多多交流@[楼主博客](https://wlove-c.github.io/)\n\n\n\n\n","slug":"gulp-20190618","published":1,"date":"2020-05-18T06:08:34.684Z","updated":"2020-05-18T06:08:34.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qife000y0ohybcyu2v8m","content":"<p>@<a href=\"前端构建工具Gulp.js知多少\">TOC</a></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><blockquote>\n<p>前几天在更新webpack知识的时候，想起来三年前用过的前端构建工具gulp/grunt,遂写个笔记总结一下，出来混总是要还的，忘得七七八八了…</p>\n</blockquote>\n<p>阅读本文章之前，相信你已经对前端构建工具(webpack、gulp、grunt)有一定的认知和了解了，那么他们之间究竟有什么区别呢？</p>\n<h3 id=\"什么是gulp？\"><a href=\"#什么是gulp？\" class=\"headerlink\" title=\"什么是gulp？\"></a>什么是gulp？</h3><p>gulp文档上面有这么一句话$\\color{blue} {用自动化构建工具增强你的工作流程！} $ ，也就是说 gulp是一个自动化构建工具；<br>gulp的一些功能如下(包括但不限于):<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-631953087e459269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自动化构建工具gulp\"></p>\n<h3 id=\"gulp或grunt和webpack的区别\"><a href=\"#gulp或grunt和webpack的区别\" class=\"headerlink\" title=\"gulp或grunt和webpack的区别\"></a>gulp或grunt和webpack的区别</h3><p>其实Webpack和另外两个并没有太多的可比性</p>\n<ul>\n<li><p>Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p>\n</li>\n<li><p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d87610855f28fd9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Grunt和Gulp的工作流程\"></p>\n</li>\n<li><p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-cdea13333a46b8f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Webpack的工作方式\"><br><strong>上述内容转自@zhangwang的<a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></strong></p>\n</li>\n</ul>\n<h3 id=\"gulp起步\"><a href=\"#gulp起步\" class=\"headerlink\" title=\"gulp起步\"></a>gulp起步</h3><p>傻瓜式起步照搬官网文档<br>1.安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">$ npm install -g gulp</span><br><span class=\"line\">或者</span><br><span class=\"line\">$ npm install --global gulp</span><br><span class=\"line\"></span><br><span class=\"line\">// 作为项目的开发依赖（devDependencies）安装：</span><br><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>\n<p>2.在项目根目录下创建一个名为 gulpfile.js 的文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(&apos;default&apos;, function() &#123;</span><br><span class=\"line\">  // 将你的默认的任务代码放在这</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3.运行 gulp：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。<br>具体详情可以查看<a href=\"https://www.gulpjs.com.cn/docs/\" target=\"_blank\" rel=\"noopener\">gulpjs.com文档</a></p>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><p>新建一个项目gulp-test<br>环境:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v // v9.1.0</span><br><span class=\"line\">$ npm -v // 6.5.0</span><br></pre></td></tr></table></figure></p>\n<p>1.新建文件以下文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp-test/</span><br><span class=\"line\">          css/</span><br><span class=\"line\">               index.scss</span><br><span class=\"line\">           js/</span><br><span class=\"line\">               helloworld.js</span><br><span class=\"line\">           index.html</span><br><span class=\"line\">           gulpfile.js</span><br></pre></td></tr></table></figure></p>\n<p>其中 <strong>gulpfile.js</strong> 是我们gulp的配置文件，启动gulp默认会找个这个文件并执行；<br>2.接下来安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure></p>\n<p>一直按回车Enter初始化package.json文件(小技巧: <strong>npm iniy -y</strong> 可以免去繁琐的enter步骤)<br>此时我们的目录结构是这样了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp-test/</span><br><span class=\"line\">          css/</span><br><span class=\"line\">               index.scss</span><br><span class=\"line\">           js/</span><br><span class=\"line\">               helloworld.js</span><br><span class=\"line\">           index.html</span><br><span class=\"line\">           gulpfile.js</span><br><span class=\"line\">           package.json</span><br></pre></td></tr></table></figure></p>\n<p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev gulp        // gulp自动化构建工具</span><br><span class=\"line\">npm i --save-dev gulp-uglify //js压缩</span><br><span class=\"line\">npm i --save-dev gulp-concat //文件合并</span><br><span class=\"line\">npm i --save-dev gulp-jshint //js语法检测</span><br><span class=\"line\">npm i --save-dev gulp-rename //文件重命名</span><br><span class=\"line\">npm i --save-dev gulp-sass //sass编译工具</span><br><span class=\"line\">npm i --save-dev gulp-minify-css //css压缩</span><br><span class=\"line\">npm i --save-dev del       //文件删除</span><br><span class=\"line\">// 以下三选一</span><br><span class=\"line\">npm i --save-dev gulp-connect       // 自动刷新页面</span><br><span class=\"line\">npm i --save-dev  browser-sync       // 自动刷新页面</span><br><span class=\"line\">npm i --save-dev gulp-livereload       // 自动刷新页面</span><br></pre></td></tr></table></figure></p>\n<p>这里页面实时刷新只讲这个<strong>gulp-connect</strong> ，其他详情可以参照<a href=\"http://www.browsersync.cn/docs/gulp/\" target=\"_blank\" rel=\"noopener\">Browsersync</a>和文章<a href=\"http://www.ydcss.com/archives/702\" target=\"_blank\" rel=\"noopener\">gulp-livereload</a></p>\n<p>安装完依赖后配置gulpfile.js如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义依赖项和插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span>  uglify=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>); <span class=\"comment\">//js压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  concat=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>); <span class=\"comment\">//文件合并</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>); <span class=\"comment\">//js语法检测</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>); <span class=\"comment\">// 重命名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">// 编译scss</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>); <span class=\"comment\">// 压缩css</span></span><br><span class=\"line\"><span class=\"comment\">// const livereload = require('gulp-livereload'); // 自动刷新页面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>); <span class=\"comment\">//文件删除</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> connect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>); <span class=\"comment\">// 自动刷新页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  connect.server(&#123;</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">//指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面</span></span><br><span class=\"line\">    root: <span class=\"string\">'./'</span>, <span class=\"comment\">//指定html文件起始的根目录</span></span><br><span class=\"line\">    livereload: <span class=\"literal\">true</span> <span class=\"comment\">//启动实时刷新功能（配合上边的connect.reload()方法同步使用）</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task\" 的任务压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./js/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint())</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/js'</span>))</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task-css\" 的任务编译scss压缩css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./css/*.scss'</span>)</span><br><span class=\"line\">    .pipe(sass().on(<span class=\"string\">'error'</span>, sass.logError))</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.css'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/css'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'*.html'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/html'</span>))</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//执行压缩前，先删除以前压缩的文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> del([<span class=\"string\">'./dist/css/all.css'</span>, <span class=\"string\">'./dist/css/all.min.css'</span>, <span class=\"string\">'./dist/all.js'</span>,<span class=\"string\">'./dist/all.min.js'</span>, <span class=\"string\">'./dist/html'</span>])</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 定义默认任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'clean'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.start(<span class=\"string\">'my-task-js'</span>, <span class=\"string\">'my-task-css'</span>, <span class=\"string\">'watch'</span>, <span class=\"string\">'server'</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 任务监听</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Watch.js files</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'./js/*.js'</span>, [<span class=\"string\">'my-task-js'</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// Watch .scss files</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'./css/*.scss'</span>, [<span class=\"string\">'my-task-css'</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// Watch .html files</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'./*.html'</span>, [<span class=\"string\">'html'</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// Watch any files in dist/, reload on change</span></span><br><span class=\"line\">  <span class=\"comment\">// gulp.watch(['dist/!**']).on('change', livereload.changed);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>大概讲解一下gulpfile.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task\" 的任务压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./js/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint()) <span class=\"comment\">//js检测</span></span><br><span class=\"line\">    .pipe(uglify()) <span class=\"comment\">//js压缩</span></span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.js'</span>)) <span class=\"comment\">//合并为all.js</span></span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;)) <span class=\"comment\">// 重命名为all.mim.js</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/js'</span>)) <span class=\"comment\">//输出到/dist/js目录</span></span><br><span class=\"line\">    .pipe(connect.reload()) <span class=\"comment\">// 更新页面</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>gulp.task</strong>是gulp的api 定义一个使用 <a href=\"https://github.com/robrich/orchestrator\" target=\"_blank\" rel=\"noopener\">Orchestrator</a> 实现的任务（task）<br>如上我们定义了<strong>my-task-js</strong>，<strong>my-task-css</strong>，<strong>html</strong>，<strong>clean</strong>，<strong>default</strong>，<strong>watch</strong>，<strong>server</strong>等任务，其中:</p>\n<hr>\n<p><strong>my-task-js</strong> 是将 符合所提供的匹配模式的js 进行检测(gulp-jshint)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/js目录下；</p>\n<hr>\n<p><strong>my-task-css</strong> 是将 符合所提供的匹配模式的sass进行编译(gulp-sass)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/css目录下；</p>\n<hr>\n<p><strong>html</strong>  是将 符合所提供的匹配模式的html进行监听，如果有变化则connect.reload()</p>\n<hr>\n<p><strong>clean</strong> 是如果任务重新启动时 删除旧文件；</p>\n<hr>\n<p><strong>default</strong> gulp默认启动的任务</p>\n<hr>\n<p><strong>watch</strong> gulp的api 监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</p>\n<hr>\n<p><strong>server</strong> 依赖gulp-connect启动一个服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&apos;server&apos;, function() &#123;</span><br><span class=\"line\">  connect.server(&#123;</span><br><span class=\"line\">    port: 8080, //指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面</span><br><span class=\"line\">    root: &apos;./&apos;, //指定html文件起始的根目录</span><br><span class=\"line\">    livereload: true //启动实时刷新功能（配合上边的connect.reload()方法同步使用）</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>配置完gulpfile.js之后，我们给js和css及html加点东西:</p>\n<p>首先js/helloworld.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloworld.js</span><br><span class=\"line\">console.log(&apos;hello world&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>css/index.scss<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.scss</span><br><span class=\"line\"></span><br><span class=\"line\">// 变量测试</span><br><span class=\"line\">$fontColor:  #red;</span><br><span class=\"line\">$backColor: aqua;</span><br><span class=\"line\">// 嵌套类测试</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  p &#123;</span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">    color: $fontColor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">  background: $backColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t&lt;title&gt;gulp-study&lt;/title&gt;</span><br><span class=\"line\">\t&lt;link href=/dist/css/all.min.css rel=stylesheet&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;firstDiv&quot;&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;我是gulp&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;hello world&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;p&gt;我是p标签&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;我是p标签&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script src=&quot;/dist/js/all.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-658fdd8778eee60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"运行输出\"></p>\n<hr>\n<p>浏览器效果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-71e06d521d7296ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果\"></p>\n<p>接下来我们修改helloworld.js来看看是否能实时刷新<br>修改如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloworld.js</span><br><span class=\"line\">console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let firstDiv =  document.getElementById(&apos;firstDiv&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstDiv)</span><br></pre></td></tr></table></figure></p>\n<p>按保存之后，终端给我们报了一个错:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-ccc18ca2147541e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Unhandled &#39;error&#39; event\"></p>\n<p>查看js发现我们用了es6语法的声明语句$\\color{red}{let}$ 但当前gulp无法处理es6语法，有问题解决问题，es6=&gt;es5</p>\n<p>解决方案:<br>安装gulp-babel babel-core babel-preset-es2015<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i  --save-dev  gulp-babel babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure></p>\n<p>gulpfile.js修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task\" 的任务压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./js/*.js'</span>)</span><br><span class=\"line\">    .pipe(babel())</span><br><span class=\"line\">    .pipe(jshint())</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/js'</span>))</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p>依然报上面的错；找了一些原因发现，虽然安装了相关依赖，却没有配置.babelrc文件，即babel还没转化es6</p>\n<p>根目录添加.babelrc文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重新运行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-ebca2eebe090db0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"结果如下\"></p>\n<p>查看dist下的js文件<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d6e0cd882a9255d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"let已经转化成var\"></p>\n<p>改变helloworld.js检查页面是否刷新<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// helloworld.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstDiv =  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'firstDiv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstDiv)</span><br><span class=\"line\">firstDiv.style.backgroundColor = <span class=\"string\">'yellow'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>保存，页面的天空蓝换成你们喜欢的yellow颜色<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b754da4517d86f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"页面的天空蓝换成你们喜欢的yellow颜色\"></p>\n<p>修改index.scss 查看是否会刷新页面<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.scss</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量测试</span></span><br><span class=\"line\"><span class=\"variable\">$fontColor</span>:  #red;</span><br><span class=\"line\"><span class=\"variable\">$backColor</span>: aqua;</span><br><span class=\"line\"><span class=\"comment\">// 嵌套类测试</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$fontColor</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"variable\">$backColor</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-2c4df6498e367b28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"页面更新正常\"></p>\n<p>最后修改index.html 查看是否会刷新页面<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>gulp-study<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">/dist/css/all.min.css</span> <span class=\"attr\">rel</span>=<span class=\"string\">stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"firstDiv\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是gulp<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是真的皮<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/dist/js/all.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-ffbb4620ab84a644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"输出完美\"></p>\n<h3 id=\"文章最后\"><a href=\"#文章最后\" class=\"headerlink\" title=\"文章最后\"></a>文章最后</h3><p>今天主要学习了gulp的简单项目搭建及实时更新配置；其实gulp类似于grunt的弱化版，但更简单好用，只是插件会少一些，目前主流的项目搭建工具主要是webpack，但依然有不少项目还用着gulp或者grunt</p>\n<p>扩展:</p>\n<blockquote>\n<p><a href=\"https://www.webpackjs.com/concepts/\" target=\"_blank\" rel=\"noopener\">webpack中文网</a><br><a href=\"https://www.gulpjs.com.cn/docs/\" target=\"_blank\" rel=\"noopener\">gulpjs中文网</a><br><a href=\"https://www.gruntjs.net/getting-started\" target=\"_blank\" rel=\"noopener\">gruntjs中文网</a></p>\n</blockquote>\n<p>下面还有一些楼主的学习笔记:</p>\n<blockquote>\n<p>@<a href=\"https://www.jianshu.com/p/10fbaa365f0c\" target=\"_blank\" rel=\"noopener\">webpack4+加vue2+从零开始搭设vue项目</a><br>@<a href=\"https://www.jianshu.com/p/c577582581b1\" target=\"_blank\" rel=\"noopener\">nginx部署/代理/跨域</a></p>\n</blockquote>\n<p>有兴趣的可以多多交流@<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">楼主博客</a></p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>@<a href=\"前端构建工具Gulp.js知多少\">TOC</a></p>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><blockquote>\n<p>前几天在更新webpack知识的时候，想起来三年前用过的前端构建工具gulp/grunt,遂写个笔记总结一下，出来混总是要还的，忘得七七八八了…</p>\n</blockquote>\n<p>阅读本文章之前，相信你已经对前端构建工具(webpack、gulp、grunt)有一定的认知和了解了，那么他们之间究竟有什么区别呢？</p>\n<h3 id=\"什么是gulp？\"><a href=\"#什么是gulp？\" class=\"headerlink\" title=\"什么是gulp？\"></a>什么是gulp？</h3><p>gulp文档上面有这么一句话$\\color{blue} {用自动化构建工具增强你的工作流程！} $ ，也就是说 gulp是一个自动化构建工具；<br>gulp的一些功能如下(包括但不限于):<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-631953087e459269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"自动化构建工具gulp\"></p>\n<h3 id=\"gulp或grunt和webpack的区别\"><a href=\"#gulp或grunt和webpack的区别\" class=\"headerlink\" title=\"gulp或grunt和webpack的区别\"></a>gulp或grunt和webpack的区别</h3><p>其实Webpack和另外两个并没有太多的可比性</p>\n<ul>\n<li><p>Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p>\n</li>\n<li><p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d87610855f28fd9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Grunt和Gulp的工作流程\"></p>\n</li>\n<li><p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-cdea13333a46b8f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Webpack的工作方式\"><br><strong>上述内容转自@zhangwang的<a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></strong></p>\n</li>\n</ul>\n<h3 id=\"gulp起步\"><a href=\"#gulp起步\" class=\"headerlink\" title=\"gulp起步\"></a>gulp起步</h3><p>傻瓜式起步照搬官网文档<br>1.安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">$ npm install -g gulp</span><br><span class=\"line\">或者</span><br><span class=\"line\">$ npm install --global gulp</span><br><span class=\"line\"></span><br><span class=\"line\">// 作为项目的开发依赖（devDependencies）安装：</span><br><span class=\"line\">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>\n<p>2.在项目根目录下创建一个名为 gulpfile.js 的文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(&apos;default&apos;, function() &#123;</span><br><span class=\"line\">  // 将你的默认的任务代码放在这</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3.运行 gulp：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p>默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。<br>具体详情可以查看<a href=\"https://www.gulpjs.com.cn/docs/\" target=\"_blank\" rel=\"noopener\">gulpjs.com文档</a></p>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><p>新建一个项目gulp-test<br>环境:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v // v9.1.0</span><br><span class=\"line\">$ npm -v // 6.5.0</span><br></pre></td></tr></table></figure></p>\n<p>1.新建文件以下文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp-test/</span><br><span class=\"line\">          css/</span><br><span class=\"line\">               index.scss</span><br><span class=\"line\">           js/</span><br><span class=\"line\">               helloworld.js</span><br><span class=\"line\">           index.html</span><br><span class=\"line\">           gulpfile.js</span><br></pre></td></tr></table></figure></p>\n<p>其中 <strong>gulpfile.js</strong> 是我们gulp的配置文件，启动gulp默认会找个这个文件并执行；<br>2.接下来安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure></p>\n<p>一直按回车Enter初始化package.json文件(小技巧: <strong>npm iniy -y</strong> 可以免去繁琐的enter步骤)<br>此时我们的目录结构是这样了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp-test/</span><br><span class=\"line\">          css/</span><br><span class=\"line\">               index.scss</span><br><span class=\"line\">           js/</span><br><span class=\"line\">               helloworld.js</span><br><span class=\"line\">           index.html</span><br><span class=\"line\">           gulpfile.js</span><br><span class=\"line\">           package.json</span><br></pre></td></tr></table></figure></p>\n<p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev gulp        // gulp自动化构建工具</span><br><span class=\"line\">npm i --save-dev gulp-uglify //js压缩</span><br><span class=\"line\">npm i --save-dev gulp-concat //文件合并</span><br><span class=\"line\">npm i --save-dev gulp-jshint //js语法检测</span><br><span class=\"line\">npm i --save-dev gulp-rename //文件重命名</span><br><span class=\"line\">npm i --save-dev gulp-sass //sass编译工具</span><br><span class=\"line\">npm i --save-dev gulp-minify-css //css压缩</span><br><span class=\"line\">npm i --save-dev del       //文件删除</span><br><span class=\"line\">// 以下三选一</span><br><span class=\"line\">npm i --save-dev gulp-connect       // 自动刷新页面</span><br><span class=\"line\">npm i --save-dev  browser-sync       // 自动刷新页面</span><br><span class=\"line\">npm i --save-dev gulp-livereload       // 自动刷新页面</span><br></pre></td></tr></table></figure></p>\n<p>这里页面实时刷新只讲这个<strong>gulp-connect</strong> ，其他详情可以参照<a href=\"http://www.browsersync.cn/docs/gulp/\" target=\"_blank\" rel=\"noopener\">Browsersync</a>和文章<a href=\"http://www.ydcss.com/archives/702\" target=\"_blank\" rel=\"noopener\">gulp-livereload</a></p>\n<p>安装完依赖后配置gulpfile.js如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义依赖项和插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span>  uglify=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>); <span class=\"comment\">//js压缩</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  concat=<span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>); <span class=\"comment\">//文件合并</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>); <span class=\"comment\">//js语法检测</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>); <span class=\"comment\">// 重命名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-sass'</span>); <span class=\"comment\">// 编译scss</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>); <span class=\"comment\">// 压缩css</span></span><br><span class=\"line\"><span class=\"comment\">// const livereload = require('gulp-livereload'); // 自动刷新页面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  del = <span class=\"built_in\">require</span>(<span class=\"string\">'del'</span>); <span class=\"comment\">//文件删除</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> connect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>); <span class=\"comment\">// 自动刷新页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'server'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  connect.server(&#123;</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">//指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面</span></span><br><span class=\"line\">    root: <span class=\"string\">'./'</span>, <span class=\"comment\">//指定html文件起始的根目录</span></span><br><span class=\"line\">    livereload: <span class=\"literal\">true</span> <span class=\"comment\">//启动实时刷新功能（配合上边的connect.reload()方法同步使用）</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task\" 的任务压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./js/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint())</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/js'</span>))</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task-css\" 的任务编译scss压缩css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./css/*.scss'</span>)</span><br><span class=\"line\">    .pipe(sass().on(<span class=\"string\">'error'</span>, sass.logError))</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.css'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(minifycss())</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/css'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'*.html'</span>)</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/html'</span>))</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//执行压缩前，先删除以前压缩的文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> del([<span class=\"string\">'./dist/css/all.css'</span>, <span class=\"string\">'./dist/css/all.min.css'</span>, <span class=\"string\">'./dist/all.js'</span>,<span class=\"string\">'./dist/all.min.js'</span>, <span class=\"string\">'./dist/html'</span>])</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 定义默认任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'clean'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.start(<span class=\"string\">'my-task-js'</span>, <span class=\"string\">'my-task-css'</span>, <span class=\"string\">'watch'</span>, <span class=\"string\">'server'</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 任务监听</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Watch.js files</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'./js/*.js'</span>, [<span class=\"string\">'my-task-js'</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// Watch .scss files</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'./css/*.scss'</span>, [<span class=\"string\">'my-task-css'</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// Watch .html files</span></span><br><span class=\"line\">  gulp.watch(<span class=\"string\">'./*.html'</span>, [<span class=\"string\">'html'</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// Watch any files in dist/, reload on change</span></span><br><span class=\"line\">  <span class=\"comment\">// gulp.watch(['dist/!**']).on('change', livereload.changed);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>大概讲解一下gulpfile.js:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task\" 的任务压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./js/*.js'</span>)</span><br><span class=\"line\">    .pipe(jshint()) <span class=\"comment\">//js检测</span></span><br><span class=\"line\">    .pipe(uglify()) <span class=\"comment\">//js压缩</span></span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.js'</span>)) <span class=\"comment\">//合并为all.js</span></span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;)) <span class=\"comment\">// 重命名为all.mim.js</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/js'</span>)) <span class=\"comment\">//输出到/dist/js目录</span></span><br><span class=\"line\">    .pipe(connect.reload()) <span class=\"comment\">// 更新页面</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>gulp.task</strong>是gulp的api 定义一个使用 <a href=\"https://github.com/robrich/orchestrator\" target=\"_blank\" rel=\"noopener\">Orchestrator</a> 实现的任务（task）<br>如上我们定义了<strong>my-task-js</strong>，<strong>my-task-css</strong>，<strong>html</strong>，<strong>clean</strong>，<strong>default</strong>，<strong>watch</strong>，<strong>server</strong>等任务，其中:</p>\n<hr>\n<p><strong>my-task-js</strong> 是将 符合所提供的匹配模式的js 进行检测(gulp-jshint)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/js目录下；</p>\n<hr>\n<p><strong>my-task-css</strong> 是将 符合所提供的匹配模式的sass进行编译(gulp-sass)、压缩(gulp-uglify)、合并(gulp-concat)、重命名(gulp-rename)、输出(gulp.dest)到/dist/css目录下；</p>\n<hr>\n<p><strong>html</strong>  是将 符合所提供的匹配模式的html进行监听，如果有变化则connect.reload()</p>\n<hr>\n<p><strong>clean</strong> 是如果任务重新启动时 删除旧文件；</p>\n<hr>\n<p><strong>default</strong> gulp默认启动的任务</p>\n<hr>\n<p><strong>watch</strong> gulp的api 监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</p>\n<hr>\n<p><strong>server</strong> 依赖gulp-connect启动一个服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&apos;server&apos;, function() &#123;</span><br><span class=\"line\">  connect.server(&#123;</span><br><span class=\"line\">    port: 8080, //指定端口号，在浏览器中输入localhost:8080就可以直接访问生成的html页面</span><br><span class=\"line\">    root: &apos;./&apos;, //指定html文件起始的根目录</span><br><span class=\"line\">    livereload: true //启动实时刷新功能（配合上边的connect.reload()方法同步使用）</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>配置完gulpfile.js之后，我们给js和css及html加点东西:</p>\n<p>首先js/helloworld.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloworld.js</span><br><span class=\"line\">console.log(&apos;hello world&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>css/index.scss<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.scss</span><br><span class=\"line\"></span><br><span class=\"line\">// 变量测试</span><br><span class=\"line\">$fontColor:  #red;</span><br><span class=\"line\">$backColor: aqua;</span><br><span class=\"line\">// 嵌套类测试</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  p &#123;</span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">    color: $fontColor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">  background: $backColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t&lt;title&gt;gulp-study&lt;/title&gt;</span><br><span class=\"line\">\t&lt;link href=/dist/css/all.min.css rel=stylesheet&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;firstDiv&quot;&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;我是gulp&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;hello world&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;p&gt;我是p标签&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;我是p标签&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script src=&quot;/dist/js/all.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-658fdd8778eee60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"运行输出\"></p>\n<hr>\n<p>浏览器效果:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-71e06d521d7296ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果\"></p>\n<p>接下来我们修改helloworld.js来看看是否能实时刷新<br>修改如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// helloworld.js</span><br><span class=\"line\">console.log(&apos;hello world&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let firstDiv =  document.getElementById(&apos;firstDiv&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstDiv)</span><br></pre></td></tr></table></figure></p>\n<p>按保存之后，终端给我们报了一个错:<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-ccc18ca2147541e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Unhandled &#39;error&#39; event\"></p>\n<p>查看js发现我们用了es6语法的声明语句$\\color{red}{let}$ 但当前gulp无法处理es6语法，有问题解决问题，es6=&gt;es5</p>\n<p>解决方案:<br>安装gulp-babel babel-core babel-preset-es2015<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i  --save-dev  gulp-babel babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure></p>\n<p>gulpfile.js修改如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-babel'</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// 定义名为 \"my-task\" 的任务压缩js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'my-task-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'./js/*.js'</span>)</span><br><span class=\"line\">    .pipe(babel())</span><br><span class=\"line\">    .pipe(jshint())</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(concat(<span class=\"string\">'all.js'</span>))</span><br><span class=\"line\">    .pipe(rename(&#123;<span class=\"attr\">suffix</span>: <span class=\"string\">'.min'</span>&#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/js'</span>))</span><br><span class=\"line\">    .pipe(connect.reload())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p>依然报上面的错；找了一些原因发现，虽然安装了相关依赖，却没有配置.babelrc文件，即babel还没转化es6</p>\n<p>根目录添加.babelrc文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重新运行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gulp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-ebca2eebe090db0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"结果如下\"></p>\n<p>查看dist下的js文件<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-d6e0cd882a9255d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"let已经转化成var\"></p>\n<p>改变helloworld.js检查页面是否刷新<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// helloworld.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> firstDiv =  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'firstDiv'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstDiv)</span><br><span class=\"line\">firstDiv.style.backgroundColor = <span class=\"string\">'yellow'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>保存，页面的天空蓝换成你们喜欢的yellow颜色<br><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-b754da4517d86f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"页面的天空蓝换成你们喜欢的yellow颜色\"></p>\n<p>修改index.scss 查看是否会刷新页面<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.scss</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量测试</span></span><br><span class=\"line\"><span class=\"variable\">$fontColor</span>:  #red;</span><br><span class=\"line\"><span class=\"variable\">$backColor</span>: aqua;</span><br><span class=\"line\"><span class=\"comment\">// 嵌套类测试</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$fontColor</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"variable\">$backColor</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-2c4df6498e367b28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"页面更新正常\"></p>\n<p>最后修改index.html 查看是否会刷新页面<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>gulp-study<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">/dist/css/all.min.css</span> <span class=\"attr\">rel</span>=<span class=\"string\">stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"firstDiv\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是gulp<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是真的皮<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/dist/js/all.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif\" data-original=\"https://upload-images.jianshu.io/upload_images/11447772-ffbb4620ab84a644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"输出完美\"></p>\n<h3 id=\"文章最后\"><a href=\"#文章最后\" class=\"headerlink\" title=\"文章最后\"></a>文章最后</h3><p>今天主要学习了gulp的简单项目搭建及实时更新配置；其实gulp类似于grunt的弱化版，但更简单好用，只是插件会少一些，目前主流的项目搭建工具主要是webpack，但依然有不少项目还用着gulp或者grunt</p>\n<p>扩展:</p>\n<blockquote>\n<p><a href=\"https://www.webpackjs.com/concepts/\" target=\"_blank\" rel=\"noopener\">webpack中文网</a><br><a href=\"https://www.gulpjs.com.cn/docs/\" target=\"_blank\" rel=\"noopener\">gulpjs中文网</a><br><a href=\"https://www.gruntjs.net/getting-started\" target=\"_blank\" rel=\"noopener\">gruntjs中文网</a></p>\n</blockquote>\n<p>下面还有一些楼主的学习笔记:</p>\n<blockquote>\n<p>@<a href=\"https://www.jianshu.com/p/10fbaa365f0c\" target=\"_blank\" rel=\"noopener\">webpack4+加vue2+从零开始搭设vue项目</a><br>@<a href=\"https://www.jianshu.com/p/c577582581b1\" target=\"_blank\" rel=\"noopener\">nginx部署/代理/跨域</a></p>\n</blockquote>\n<p>有兴趣的可以多多交流@<a href=\"https://wlove-c.github.io/\" target=\"_blank\" rel=\"noopener\">楼主博客</a></p>\n"},{"title":"hexo 的介绍和使用","_content":"欢迎来到 [Hexo](https://hexo.io/)! 这是我的第一个发布. 通过观看 [hexo文档](https://hexo.io/docs/) 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 [问题解决](https://hexo.io/docs/troubleshooting.html) 或者你也可以在github寻求帮助 [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post （创建新文章）\n\n---\ntitle: hello\n---\n\n\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server （运行）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files （生成静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites （部署到远程站点）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo 的介绍和使用\n---\n欢迎来到 [Hexo](https://hexo.io/)! 这是我的第一个发布. 通过观看 [hexo文档](https://hexo.io/docs/) 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 [问题解决](https://hexo.io/docs/troubleshooting.html) 或者你也可以在github寻求帮助 [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post （创建新文章）\n\n---\ntitle: hello\n---\n\n\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server （运行）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files （生成静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites （部署到远程站点）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2020-05-18T06:08:34.684Z","updated":"2020-05-18T06:08:34.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qifg00120ohynvd0nkhl","content":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! 这是我的第一个发布. 通过观看 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">问题解决</a> 或者你也可以在github寻求帮助 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-（创建新文章）\"><a href=\"#Create-a-new-post-（创建新文章）\" class=\"headerlink\" title=\"Create a new post （创建新文章）\"></a>Create a new post （创建新文章）</h3><hr>\n<h2 id=\"title-hello\"><a href=\"#title-hello\" class=\"headerlink\" title=\"title: hello\"></a>title: hello</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-（运行）\"><a href=\"#Run-server-（运行）\" class=\"headerlink\" title=\"Run server （运行）\"></a>Run server （运行）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-（生成静态文件）\"><a href=\"#Generate-static-files-（生成静态文件）\" class=\"headerlink\" title=\"Generate static files （生成静态文件）\"></a>Generate static files （生成静态文件）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-（部署到远程站点）\"><a href=\"#Deploy-to-remote-sites-（部署到远程站点）\" class=\"headerlink\" title=\"Deploy to remote sites （部署到远程站点）\"></a>Deploy to remote sites （部署到远程站点）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! 这是我的第一个发布. 通过观看 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">问题解决</a> 或者你也可以在github寻求帮助 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-（创建新文章）\"><a href=\"#Create-a-new-post-（创建新文章）\" class=\"headerlink\" title=\"Create a new post （创建新文章）\"></a>Create a new post （创建新文章）</h3><hr>\n<h2 id=\"title-hello\"><a href=\"#title-hello\" class=\"headerlink\" title=\"title: hello\"></a>title: hello</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-（运行）\"><a href=\"#Run-server-（运行）\" class=\"headerlink\" title=\"Run server （运行）\"></a>Run server （运行）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-（生成静态文件）\"><a href=\"#Generate-static-files-（生成静态文件）\" class=\"headerlink\" title=\"Generate static files （生成静态文件）\"></a>Generate static files （生成静态文件）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-（部署到远程站点）\"><a href=\"#Deploy-to-remote-sites-（部署到远程站点）\" class=\"headerlink\" title=\"Deploy to remote sites （部署到远程站点）\"></a>Deploy to remote sites （部署到远程站点）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"干货学习","_content":"websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种\n\n\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license=\"\">\n\n<h1 id=\"articleHeader0\">websocket</h1>\n<p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p>\n<h3 id=\"articleHeader1\">websocket 和http区别？</h3>\n<ul>\n<li>\n<p>相同点</p>\n<ul>\n<li>都是应用层的协议</li>\n<li>都是基于tcp,可靠的协议</li>\n</ul>\n</li>\n<li>\n<p>不同点</p>\n<ul>\n<li>websocket是持久化的协议.</li>\n<li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li>\n<li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3>\n<ul>\n<li>相同点：都存储在客户端</li>\n<li>\n<p>不同点</p>\n<ol>\n<li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>\n<li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li>\n<li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"articleHeader3\">JS的类型？</h3>\n<ul>\n<li>\n<p>基本类型</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n</ul>\n</li>\n<li>\n<p>复杂类型</p>\n<ul><li>Object</li></ul>\n</li>\n</ul>\n<h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3>\n<ul>\n<li>\n<p>值类型：</p>\n<ul>\n<li>undefined string number Boolean</li>\n<li>拷贝形式,</li>\n</ul>\n</li>\n<li>\n<p>引用类型：</p>\n<ul>\n<li>array , function</li>\n<li>指针指向，共用空间</li>\n<li>可无限扩展属性，极大节省命名空间。</li>\n</ul>\n</li>\n<li>\n<p>特殊引用类型：function</p>\n<ul>\n<li>同引用类型↑</li>\n<li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>undefined</li>\n<li>object :  null和数组 都是object</li>\n<li>function</li>\n<li>boolean</li>\n</ul>\n<p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre>\n<p>function是一个比较特殊的类型，所以typeof能够区分</p>\n<h3 id=\"articleHeader6\">何时使用===何时使用==？</h3>\n<ul>\n<li>\n<p>尽可能使用 === 原因如下</p>\n<ul>\n<li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li>\n<li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li>\n<li>== 会进行类型转换，很容易懵逼</li>\n</ul>\n</li>\n<li>\n<p>== 的使用情况,可参考</p>\n<ul><li>判断对象的属性是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};\n    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){\n        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span>\n    }</code></pre>\n<ul><li>判断函数的参数是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{\n        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){\n            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span>\n        }\n    }</code></pre>\n</li>\n</ul>\n<h3 id=\"articleHeader7\">如何理解JSON？</h3>\n<ul>\n<li>\n<p>从纯JS的角度看，JSON就是对象，并且只有两个API</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span>\n   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">'{\"a\":10,\"b\":30}'</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre>\n</li>\n<li>JSON也是一种轻量级的文本数据交换格式.</li>\n</ul>\n<h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Function</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n<h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3>\n<ul>\n<li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li>\n<li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li>\n</ul>\n<h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3>\n<p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/...</a></p>\n<h3 id=\"articleHeader12\">实现数组的随机排序</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {\n      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;\n   });\n</code></pre>\n<p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>\n    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span>\n   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;\n    <span class=\"hljs-keyword\">while</span> (i)\n    {\n        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre>\n<h1 id=\"articleHeader13\">原型和原型链</h1>\n<h3 id=\"articleHeader14\">什么叫原型链</h3>\n<p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p>\n<h3 id=\"articleHeader15\">原型规则</h3>\n<ol>\n<li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li>\n<li>所有的引用类型（数组，对象，函数），都有一个__proto__属性，也可以称为隐式原型，属性值是一个普通的对象</li>\n<li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li>\n<li>所有的引用类型（数组，对象，函数），__proto__属性值指向它的构造函数的prototype属性值</li>\n<li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的__proto__中去找。</li>\n</ol>\n<p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p>\n<h3 id=\"articleHeader16\">构造函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.name = name;\n    <span class=\"hljs-keyword\">this</span>.age = age;\n}\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">25</span>);\n<span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">250</span>);\n<span class=\"hljs-built_in\">console</span>.log(foo,foo2);\n\n<span class=\"hljs-comment\">//循环对象自身的属性</span>\n<span class=\"hljs-keyword\">var</span> item;\n<span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)\n{\n    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span>\n    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))\n    {\n        <span class=\"hljs-built_in\">console</span>.log(item)\n    }\n\n}\n</code></pre>\n<h3 id=\"articleHeader17\">描述new一个对象的过程</h3>\n<ol>\n<li>创建一个对象</li>\n<li>this指向这个新对象</li>\n<li>执行代码，即对this赋值</li>\n<li>return this。 默认有return，不用写</li>\n</ol>\n<h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span>\n<span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader19\">写一个原型继承的例子</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);\n}\n\nElem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    <span class=\"hljs-keyword\">if</span>(val){\n        dom.innerHTML = val;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span>\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    dom.addEventListener( type , fn);\n\n}\n<span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">'h1'</span>);\nh1.html(<span class=\"hljs-string\">\"你被修改了\"</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)\n})\n</code></pre>\n<h1 id=\"articleHeader20\">作用域和闭包</h1>\n<h3 id=\"articleHeader21\">什么叫作用域？</h3>\n<p>`作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域<br>全局作用域》函数作用域》内层函数的作用域<br>作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。<br>`</p>\n<h3 id=\"articleHeader22\">变量提升的理解</h3>\n<ul>\n<li>变量定义</li>\n<li>函数声明（注意和函数表达式的区别）</li>\n<li>预解析</li>\n</ul>\n<h3 id=\"articleHeader23\">this的使用场景</h3>\n<p>注意：this要在执行时才能确认值，定义时无法确认</p>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li>call apply bind</li>\n</ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n }\n\nf1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, [<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>]);\nf1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, <span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>);\n\n\n<span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span>\n<span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n}.bind(<span class=\"hljs-string\">'我是被绑定的this'</span>)\n\nf1(<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>)\n</code></pre>\n<h3 id=\"articleHeader24\">闭包</h3>\n<p>`当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，<br>如果返回的这个函数在外部被执行，就产生了闭包。<br>表现形式：使函数外部能够调用函数内部定义的变量。`</p>\n<ul><li>\n<p>闭包的使用场景</p>\n<ol>\n<li>\n<p>函数作为返回值</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span>\n    }\n}\n<span class=\"hljs-keyword\">var</span> f1 =  fn();\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;\nf1(); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n<li>\n<p>函数作为参数来传递</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a);\n        }\n}\n<span class=\"hljs-keyword\">var</span> fn1 = fn();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;\n    fn();\n}\nfn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n</ol>\n</li></ul>\n<h3 id=\"articleHeader25\">如何理解作用域？</h3>\n<ul>\n<li>自由变量</li>\n<li>作用域链，即自由变量的查找</li>\n<li>闭包的两个场景</li>\n</ul>\n<h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;\n<span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){\n    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"a\"</span>);\n    str.innerHTML = a + <span class=\"hljs-string\">\"点我\"</span> + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>;\n\n    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);\n\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{\n        str.addEventListener(<span class=\"hljs-string\">\"click\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n            e.preventDefault();\n            <span class=\"hljs-built_in\">console</span>.log(a)\n        })\n    })(a)\n}</code></pre>\n<h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3>\n<p>同步是阻塞模式，异步是非阻塞模式。</p>\n<ul>\n<li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li>\n<li>同步：必须等待操作做完，才返回结果.</li>\n</ul>\n<h3 id=\"articleHeader28\">数组API</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre>\n<ul><li>forEach 遍历所有元素</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span>\n        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span>\n\n    })</code></pre>\n<ul><li>every 判断所有元素是否都符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    })\n  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre>\n<ul><li>some 判断是否有至少一个元素符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre>\n<ul><li>sort 排序</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n          <span class=\"hljs-comment\">// return a-b; //正序</span>\n          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span>\n        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span>\n\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre>\n<ul><li>map 对元素重新组装，生成新数组</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考\n var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;h1&gt;'</span> + item + <span class=\"hljs-string\">'&lt;/h1&gt;'</span>;\n      })\nconsole.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">\"&lt;h1&gt;2&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;3&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;9&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;0&lt;/h1&gt;\"</span>]</code></pre>\n<ul><li>filter 过滤符合条件的元素,较为常用</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre>\n<h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (!dt) {\n            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span>\n            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n        }\n\n        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();\n        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> day = dt.getDate();\n\n        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {\n            month = <span class=\"hljs-string\">'0'</span> + month;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {\n            day = <span class=\"hljs-string\">'0'</span> + day;\n        }\n\n        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">'-'</span> + month + <span class=\"hljs-string\">'-'</span> + day;\n    }\n\n    <span class=\"hljs-keyword\">var</span> date = formatDate();\n    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span>\n</code></pre>\n<h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">'0'</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre>\n<h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)\n</span>{\n        <span class=\"hljs-comment\">//数组处理</span>\n        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)\n        {\n          info.forEach(fn)\n        }<span class=\"hljs-keyword\">else</span>{\n           <span class=\"hljs-comment\">//对象处理</span>\n           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n<span class=\"hljs-comment\">//使用方法</span>\n  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'我是x'</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'我是y'</span>};\n   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span>\n  })\n\n\n  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];\n  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span>\n  })\n</code></pre>\n<h1 id=\"articleHeader32\">Web_API</h1>\n<h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{\n           elem.addEventListener( type ,fn)\n }\n <span class=\"hljs-comment\">//使用方法</span>\n bindEvent(id,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(e)\n })\n\n bindEvent(a,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span>\n })</code></pre>\n<h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//使用代理，由父级帮忙去做\n\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == &quot;A&quot;){\n        alert(e.target.innerHTML)\n    }\n})\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div1\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 动态加载更多 --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == \"A\"){\n        alert(e.target.innerHTML)\n    }\n})</code></pre>\n<h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//HTML结构\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\n<div id=&quot;div2&quot;>不使用代理</div>\n\n//\nfunction bindEvent(elem,type,selector, fn){\n    if(fn == null){\n        fn=selector;\n        selector =null;\n    }\n    elem.addEventListener( type ,function(e){\n        var target;\n        if(selector){\n            target = e.target;\n            //matches() 方法用于检测字符串是否匹配给定的正则表达式。\n            if(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }else{\n            fn.call(e);\n        }\n    })\n}\n\n//使用代理\nbindEvent(div1,'click','a',function(e){\n    console.log(this)\n})\n//不使用代理\nbindEvent(div2,'click',function(e){\n    //call改变了this指向为e\n    console.log(this.toElement.innerHTML)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span>\n &lt;div id=<span class=\"hljs-string\">\"div1\"</span>&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a1&lt;/a&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a2&lt;/a&gt;\n    &lt;span&gt;ddd&lt;/span&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a5&lt;/a&gt;\n    &lt;!-- 动态加载更多 --&gt;\n&lt;/div&gt;\n\n&lt;div id=<span class=\"hljs-string\">\"div2\"</span>&gt;不使用代理&lt;/div&gt;\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){\n        fn=selector;\n        selector =<span class=\"hljs-literal\">null</span>;\n    }\n    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n        <span class=\"hljs-keyword\">var</span> target;\n        <span class=\"hljs-keyword\">if</span>(selector){\n            target = e.target;\n            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span>\n            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }<span class=\"hljs-keyword\">else</span>{\n            fn.call(e);\n        }\n    })\n}\n\n<span class=\"hljs-comment\">//使用代理</span>\nbindEvent(div1,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    console.log(<span class=\"hljs-keyword\">this</span>)\n})\n<span class=\"hljs-comment\">//不使用代理</span>\nbindEvent(div2,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    <span class=\"hljs-comment\">//call改变了this指向为e</span>\n    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)\n})\n</code></pre>\n<h3 id=\"articleHeader36\">可以跨域的三个标签</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //用于打点统计\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //使用CDN\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre>\n<h1 id=\"articleHeader37\">3月10日面试</h1>\n<h3 id=\"articleHeader38\">闭包的优缺点</h3>\n<p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p>\n<ul>\n<li>\n<p>优点：</p>\n<ol>\n<li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li>\n<li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol>\n</li>\n</ul>\n<h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3>\n<h3 id=\"articleHeader40\">http请求缓存头详解</h3>\n<ol>\n<li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li>\n<li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li>\n<li>\n<p>Cache-Control: http1.1推出，指文件缓存的有效期。</p>\n<ul>\n<li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li>\n<li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li>\n<li>private:仅单用户私有，不被多用户共享</li>\n<li>no-cache:不会被缓存。</li>\n<li>no-store:不允许被存储</li>\n</ul>\n</li>\n<li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li>\n</ol>\n\n</div>\n\n\n尊重原著:文章转载于@[史燕斌](https://segmentfault.com/a/1190000018628100).\n","source":"_posts/coding-5.md","raw":"---\ntitle: 干货学习\ntags: javaScript\ncategories: 编程\n---\nwebsocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种\n\n\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license=\"\">\n\n<h1 id=\"articleHeader0\">websocket</h1>\n<p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p>\n<h3 id=\"articleHeader1\">websocket 和http区别？</h3>\n<ul>\n<li>\n<p>相同点</p>\n<ul>\n<li>都是应用层的协议</li>\n<li>都是基于tcp,可靠的协议</li>\n</ul>\n</li>\n<li>\n<p>不同点</p>\n<ul>\n<li>websocket是持久化的协议.</li>\n<li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li>\n<li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3>\n<ul>\n<li>相同点：都存储在客户端</li>\n<li>\n<p>不同点</p>\n<ol>\n<li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>\n<li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li>\n<li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"articleHeader3\">JS的类型？</h3>\n<ul>\n<li>\n<p>基本类型</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n</ul>\n</li>\n<li>\n<p>复杂类型</p>\n<ul><li>Object</li></ul>\n</li>\n</ul>\n<h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3>\n<ul>\n<li>\n<p>值类型：</p>\n<ul>\n<li>undefined string number Boolean</li>\n<li>拷贝形式,</li>\n</ul>\n</li>\n<li>\n<p>引用类型：</p>\n<ul>\n<li>array , function</li>\n<li>指针指向，共用空间</li>\n<li>可无限扩展属性，极大节省命名空间。</li>\n</ul>\n</li>\n<li>\n<p>特殊引用类型：function</p>\n<ul>\n<li>同引用类型↑</li>\n<li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>undefined</li>\n<li>object :  null和数组 都是object</li>\n<li>function</li>\n<li>boolean</li>\n</ul>\n<p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre>\n<p>function是一个比较特殊的类型，所以typeof能够区分</p>\n<h3 id=\"articleHeader6\">何时使用===何时使用==？</h3>\n<ul>\n<li>\n<p>尽可能使用 === 原因如下</p>\n<ul>\n<li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li>\n<li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li>\n<li>== 会进行类型转换，很容易懵逼</li>\n</ul>\n</li>\n<li>\n<p>== 的使用情况,可参考</p>\n<ul><li>判断对象的属性是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};\n    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){\n        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span>\n    }</code></pre>\n<ul><li>判断函数的参数是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{\n        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){\n            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span>\n        }\n    }</code></pre>\n</li>\n</ul>\n<h3 id=\"articleHeader7\">如何理解JSON？</h3>\n<ul>\n<li>\n<p>从纯JS的角度看，JSON就是对象，并且只有两个API</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span>\n   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">'{\"a\":10,\"b\":30}'</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre>\n</li>\n<li>JSON也是一种轻量级的文本数据交换格式.</li>\n</ul>\n<h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Function</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n<h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3>\n<ul>\n<li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li>\n<li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li>\n</ul>\n<h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3>\n<p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/...</a></p>\n<h3 id=\"articleHeader12\">实现数组的随机排序</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {\n      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;\n   });\n</code></pre>\n<p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>\n    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span>\n   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;\n    <span class=\"hljs-keyword\">while</span> (i)\n    {\n        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre>\n<h1 id=\"articleHeader13\">原型和原型链</h1>\n<h3 id=\"articleHeader14\">什么叫原型链</h3>\n<p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p>\n<h3 id=\"articleHeader15\">原型规则</h3>\n<ol>\n<li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li>\n<li>所有的引用类型（数组，对象，函数），都有一个__proto__属性，也可以称为隐式原型，属性值是一个普通的对象</li>\n<li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li>\n<li>所有的引用类型（数组，对象，函数），__proto__属性值指向它的构造函数的prototype属性值</li>\n<li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的__proto__中去找。</li>\n</ol>\n<p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p>\n<h3 id=\"articleHeader16\">构造函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.name = name;\n    <span class=\"hljs-keyword\">this</span>.age = age;\n}\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">25</span>);\n<span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">250</span>);\n<span class=\"hljs-built_in\">console</span>.log(foo,foo2);\n\n<span class=\"hljs-comment\">//循环对象自身的属性</span>\n<span class=\"hljs-keyword\">var</span> item;\n<span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)\n{\n    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span>\n    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))\n    {\n        <span class=\"hljs-built_in\">console</span>.log(item)\n    }\n\n}\n</code></pre>\n<h3 id=\"articleHeader17\">描述new一个对象的过程</h3>\n<ol>\n<li>创建一个对象</li>\n<li>this指向这个新对象</li>\n<li>执行代码，即对this赋值</li>\n<li>return this。 默认有return，不用写</li>\n</ol>\n<h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span>\n<span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader19\">写一个原型继承的例子</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);\n}\n\nElem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    <span class=\"hljs-keyword\">if</span>(val){\n        dom.innerHTML = val;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span>\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    dom.addEventListener( type , fn);\n\n}\n<span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">'h1'</span>);\nh1.html(<span class=\"hljs-string\">\"你被修改了\"</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)\n})\n</code></pre>\n<h1 id=\"articleHeader20\">作用域和闭包</h1>\n<h3 id=\"articleHeader21\">什么叫作用域？</h3>\n<p>`作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域<br>全局作用域》函数作用域》内层函数的作用域<br>作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。<br>`</p>\n<h3 id=\"articleHeader22\">变量提升的理解</h3>\n<ul>\n<li>变量定义</li>\n<li>函数声明（注意和函数表达式的区别）</li>\n<li>预解析</li>\n</ul>\n<h3 id=\"articleHeader23\">this的使用场景</h3>\n<p>注意：this要在执行时才能确认值，定义时无法确认</p>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li>call apply bind</li>\n</ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n }\n\nf1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, [<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>]);\nf1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, <span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>);\n\n\n<span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span>\n<span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n}.bind(<span class=\"hljs-string\">'我是被绑定的this'</span>)\n\nf1(<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>)\n</code></pre>\n<h3 id=\"articleHeader24\">闭包</h3>\n<p>`当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，<br>如果返回的这个函数在外部被执行，就产生了闭包。<br>表现形式：使函数外部能够调用函数内部定义的变量。`</p>\n<ul><li>\n<p>闭包的使用场景</p>\n<ol>\n<li>\n<p>函数作为返回值</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span>\n    }\n}\n<span class=\"hljs-keyword\">var</span> f1 =  fn();\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;\nf1(); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n<li>\n<p>函数作为参数来传递</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a);\n        }\n}\n<span class=\"hljs-keyword\">var</span> fn1 = fn();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;\n    fn();\n}\nfn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n</ol>\n</li></ul>\n<h3 id=\"articleHeader25\">如何理解作用域？</h3>\n<ul>\n<li>自由变量</li>\n<li>作用域链，即自由变量的查找</li>\n<li>闭包的两个场景</li>\n</ul>\n<h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;\n<span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){\n    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"a\"</span>);\n    str.innerHTML = a + <span class=\"hljs-string\">\"点我\"</span> + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>;\n\n    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);\n\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{\n        str.addEventListener(<span class=\"hljs-string\">\"click\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n            e.preventDefault();\n            <span class=\"hljs-built_in\">console</span>.log(a)\n        })\n    })(a)\n}</code></pre>\n<h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3>\n<p>同步是阻塞模式，异步是非阻塞模式。</p>\n<ul>\n<li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li>\n<li>同步：必须等待操作做完，才返回结果.</li>\n</ul>\n<h3 id=\"articleHeader28\">数组API</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre>\n<ul><li>forEach 遍历所有元素</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span>\n        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span>\n\n    })</code></pre>\n<ul><li>every 判断所有元素是否都符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    })\n  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre>\n<ul><li>some 判断是否有至少一个元素符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre>\n<ul><li>sort 排序</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n          <span class=\"hljs-comment\">// return a-b; //正序</span>\n          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span>\n        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span>\n\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre>\n<ul><li>map 对元素重新组装，生成新数组</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考\n var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;h1&gt;'</span> + item + <span class=\"hljs-string\">'&lt;/h1&gt;'</span>;\n      })\nconsole.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">\"&lt;h1&gt;2&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;3&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;9&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;0&lt;/h1&gt;\"</span>]</code></pre>\n<ul><li>filter 过滤符合条件的元素,较为常用</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre>\n<h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (!dt) {\n            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span>\n            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n        }\n\n        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();\n        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> day = dt.getDate();\n\n        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {\n            month = <span class=\"hljs-string\">'0'</span> + month;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {\n            day = <span class=\"hljs-string\">'0'</span> + day;\n        }\n\n        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">'-'</span> + month + <span class=\"hljs-string\">'-'</span> + day;\n    }\n\n    <span class=\"hljs-keyword\">var</span> date = formatDate();\n    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span>\n</code></pre>\n<h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">'0'</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre>\n<h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)\n</span>{\n        <span class=\"hljs-comment\">//数组处理</span>\n        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)\n        {\n          info.forEach(fn)\n        }<span class=\"hljs-keyword\">else</span>{\n           <span class=\"hljs-comment\">//对象处理</span>\n           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n<span class=\"hljs-comment\">//使用方法</span>\n  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'我是x'</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'我是y'</span>};\n   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span>\n  })\n\n\n  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];\n  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span>\n  })\n</code></pre>\n<h1 id=\"articleHeader32\">Web_API</h1>\n<h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{\n           elem.addEventListener( type ,fn)\n }\n <span class=\"hljs-comment\">//使用方法</span>\n bindEvent(id,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(e)\n })\n\n bindEvent(a,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span>\n })</code></pre>\n<h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//使用代理，由父级帮忙去做\n\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == &quot;A&quot;){\n        alert(e.target.innerHTML)\n    }\n})\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div1\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 动态加载更多 --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == \"A\"){\n        alert(e.target.innerHTML)\n    }\n})</code></pre>\n<h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//HTML结构\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\n<div id=&quot;div2&quot;>不使用代理</div>\n\n//\nfunction bindEvent(elem,type,selector, fn){\n    if(fn == null){\n        fn=selector;\n        selector =null;\n    }\n    elem.addEventListener( type ,function(e){\n        var target;\n        if(selector){\n            target = e.target;\n            //matches() 方法用于检测字符串是否匹配给定的正则表达式。\n            if(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }else{\n            fn.call(e);\n        }\n    })\n}\n\n//使用代理\nbindEvent(div1,'click','a',function(e){\n    console.log(this)\n})\n//不使用代理\nbindEvent(div2,'click',function(e){\n    //call改变了this指向为e\n    console.log(this.toElement.innerHTML)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span>\n &lt;div id=<span class=\"hljs-string\">\"div1\"</span>&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a1&lt;/a&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a2&lt;/a&gt;\n    &lt;span&gt;ddd&lt;/span&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a5&lt;/a&gt;\n    &lt;!-- 动态加载更多 --&gt;\n&lt;/div&gt;\n\n&lt;div id=<span class=\"hljs-string\">\"div2\"</span>&gt;不使用代理&lt;/div&gt;\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){\n        fn=selector;\n        selector =<span class=\"hljs-literal\">null</span>;\n    }\n    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n        <span class=\"hljs-keyword\">var</span> target;\n        <span class=\"hljs-keyword\">if</span>(selector){\n            target = e.target;\n            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span>\n            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }<span class=\"hljs-keyword\">else</span>{\n            fn.call(e);\n        }\n    })\n}\n\n<span class=\"hljs-comment\">//使用代理</span>\nbindEvent(div1,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    console.log(<span class=\"hljs-keyword\">this</span>)\n})\n<span class=\"hljs-comment\">//不使用代理</span>\nbindEvent(div2,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    <span class=\"hljs-comment\">//call改变了this指向为e</span>\n    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)\n})\n</code></pre>\n<h3 id=\"articleHeader36\">可以跨域的三个标签</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //用于打点统计\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //使用CDN\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre>\n<h1 id=\"articleHeader37\">3月10日面试</h1>\n<h3 id=\"articleHeader38\">闭包的优缺点</h3>\n<p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p>\n<ul>\n<li>\n<p>优点：</p>\n<ol>\n<li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li>\n<li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol>\n</li>\n</ul>\n<h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3>\n<h3 id=\"articleHeader40\">http请求缓存头详解</h3>\n<ol>\n<li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li>\n<li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li>\n<li>\n<p>Cache-Control: http1.1推出，指文件缓存的有效期。</p>\n<ul>\n<li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li>\n<li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li>\n<li>private:仅单用户私有，不被多用户共享</li>\n<li>no-cache:不会被缓存。</li>\n<li>no-store:不允许被存储</li>\n</ul>\n</li>\n<li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li>\n</ol>\n\n</div>\n\n\n尊重原著:文章转载于@[史燕斌](https://segmentfault.com/a/1190000018628100).\n","slug":"coding-5","published":1,"date":"2020-05-18T06:08:34.683Z","updated":"2020-05-18T06:08:34.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qifh00150ohy83wxnpqd","content":"<p>websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种</p>\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license><br><br><h1 id=\"articleHeader0\">websocket</h1><br><p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p><br><h3 id=\"articleHeader1\">websocket 和http区别？</h3><br><ul><br><li><br><p>相同点</p><br><ul><br><li>都是应用层的协议</li><br><li>都是基于tcp,可靠的协议</li><br></ul><br></li><br><li><br><p>不同点</p><br><ul><br><li>websocket是持久化的协议.</li><br><li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li><br><li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3><br><ul><br><li>相同点：都存储在客户端</li><br><li><br><p>不同点</p><br><ol><br><li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><br><li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li><br><li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li><br></ol><br></li><br></ul><br><h3 id=\"articleHeader3\">JS的类型？</h3><br><ul><br><li><br><p>基本类型</p><br><ul><br><li>undefined</li><br><li>null</li><br><li>Number</li><br><li>String</li><br><li>Boolean</li><br></ul><br></li><br><li><br><p>复杂类型</p><br><ul><li>Object</li></ul><br></li><br></ul><br><h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3><br><ul><br><li><br><p>值类型：</p><br><ul><br><li>undefined string number Boolean</li><br><li>拷贝形式,</li><br></ul><br></li><br><li><br><p>引用类型：</p><br><ul><br><li>array , function</li><br><li>指针指向，共用空间</li><br><li>可无限扩展属性，极大节省命名空间。</li><br></ul><br></li><br><li><br><p>特殊引用类型：function</p><br><ul><br><li>同引用类型↑</li><br><li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3><br><ul><br><li>number</li><br><li>string</li><br><li>undefined</li><br><li>object :  null和数组 都是object</li><br><li>function</li><br><li>boolean</li><br></ul><br><p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre><br><p>function是一个比较特殊的类型，所以typeof能够区分</p><br><h3 id=\"articleHeader6\">何时使用===何时使用==？</h3><br><ul><br><li><br><p>尽可能使用 === 原因如下</p><br><ul><br><li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li><br><li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li><br><li>== 会进行类型转换，很容易懵逼</li><br></ul><br></li><br><li><br><p>== 的使用情况,可参考</p><br><ul><li>判断对象的属性是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};<br>    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){<br>        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span><br>    }</code></pre><br><ul><li>判断函数的参数是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{<br>        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){<br>            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span><br>        }<br>    }</code></pre><br></li><br></ul><br><h3 id=\"articleHeader7\">如何理解JSON？</h3><br><ul><br><li><br><p>从纯JS的角度看，JSON就是对象，并且只有两个API</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span><br>   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">‘{“a”:10,”b”:30}’</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre><br></li><br><li>JSON也是一种轻量级的文本数据交换格式.</li><br></ul><br><h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3><br><ul><br><li>Object</li><br><li>Array</li><br><li>Boolean</li><br><li>Number</li><br><li>String</li><br><li>Function</li><br><li>Date</li><br><li>RegExp</li><br><li>Error</li><br></ul><br><h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3><br><ul><br><li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li><br><li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li><br></ul><br><h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3><br><p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/…</a></p><br><h3 id=\"articleHeader12\">实现数组的随机排序</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现<br> arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {<br>      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;<br>   });<br></code></pre><br><p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><br>    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span><br>   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;<br>    <span class=\"hljs-keyword\">while</span> (i)<br>    {<br>        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i–);<br>        t= arr[i];<br>        arr[i] = arr[j];<br>        arr[j]= t;<br>    }<br>}<br>shuffle(arr)<br><span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre><br><h1 id=\"articleHeader13\">原型和原型链</h1><br><h3 id=\"articleHeader14\">什么叫原型链</h3><br><p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p><br><h3 id=\"articleHeader15\">原型规则</h3><br><ol><br><li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li><br><li>所有的引用类型（数组，对象，函数），都有一个<strong>proto</strong>属性，也可以称为隐式原型，属性值是一个普通的对象</li><br><li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li><br><li>所有的引用类型（数组，对象，函数），<strong>proto</strong>属性值指向它的构造函数的prototype属性值</li><br><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>中去找。</li><br></ol><br><p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p><br><h3 id=\"articleHeader16\">构造函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>    <span class=\"hljs-keyword\">this</span>.age = age;<br>}<br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">25</span>);<br><span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">250</span>);<br><span class=\"hljs-built_in\">console</span>.log(foo,foo2);<br><br><span class=\"hljs-comment\">//循环对象自身的属性</span><br><span class=\"hljs-keyword\">var</span> item;<br><span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)<br>{<br>    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span><br>    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))<br>    {<br>        <span class=\"hljs-built_in\">console</span>.log(item)<br>    }<br><br>}<br></code></pre><br><h3 id=\"articleHeader17\">描述new一个对象的过程</h3><br><ol><br><li>创建一个对象</li><br><li>this指向这个新对象</li><br><li>执行代码，即对this赋值</li><br><li>return this。 默认有return，不用写</li><br></ol><br><h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span><br><br><span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span><br><span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader19\">写一个原型继承的例子</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);<br>}<br><br>Elem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    <span class=\"hljs-keyword\">if</span>(val){<br>        dom.innerHTML = val;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span><br>    }<span class=\"hljs-keyword\">else</span>{<br>        <span class=\"hljs-keyword\">return</span> dom.innerHTML;<br><br>    }<br>}<br><br>Elem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    dom.addEventListener( type , fn);<br><br>}<br><span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">‘h1’</span>);<br>h1.html(<span class=\"hljs-string\">“你被修改了”</span>).on(<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)<br>})<br></code></pre><br><h1 id=\"articleHeader20\">作用域和闭包</h1><br><h3 id=\"articleHeader21\">什么叫作用域？</h3><br><p><code>作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域&lt;br&gt;全局作用域》函数作用域》内层函数的作用域&lt;br&gt;作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。&lt;br&gt;</code></p><br><h3 id=\"articleHeader22\">变量提升的理解</h3><br><ul><br><li>变量定义</li><br><li>函数声明（注意和函数表达式的区别）</li><br><li>预解析</li><br></ul><br><h3 id=\"articleHeader23\">this的使用场景</h3><br><p>注意：this要在执行时才能确认值，定义时无法确认</p><br><ul><br><li>作为构造函数执行</li><br><li>作为对象属性执行</li><br><li>作为普通函数执行</li><br><li>call apply bind</li><br></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br> }<br><br>f1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, [<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>]);<br>f1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, <span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>);<br><br><br><span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span><br><span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br>}.bind(<span class=\"hljs-string\">‘我是被绑定的this’</span>)<br><br>f1(<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>)<br></code></pre><br><h3 id=\"articleHeader24\">闭包</h3><br><p><code>当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，&lt;br&gt;如果返回的这个函数在外部被执行，就产生了闭包。&lt;br&gt;表现形式：使函数外部能够调用函数内部定义的变量。</code></p><br><ul><li><br><p>闭包的使用场景</p><br><ol><br><li><br><p>函数作为返回值</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span><br>    }<br>}<br><span class=\"hljs-keyword\">var</span> f1 =  fn();<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;<br>f1(); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br><li><br><p>函数作为参数来传递</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a);<br>        }<br>}<br><span class=\"hljs-keyword\">var</span> fn1 = fn();<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;<br>    fn();<br>}<br>fn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br></ol><br></li></ul><br><h3 id=\"articleHeader25\">如何理解作用域？</h3><br><ul><br><li>自由变量</li><br><li>作用域链，即自由变量的查找</li><br><li>闭包的两个场景</li><br></ul><br><h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;<br><span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){<br>    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">“a”</span>);<br>    str.innerHTML = a + <span class=\"hljs-string\">“点我”</span> + <span class=\"hljs-string\">“&lt;br/&gt;”</span>;<br><br>    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);<br><br>    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{<br>        str.addEventListener(<span class=\"hljs-string\">“click”</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>            e.preventDefault();<br>            <span class=\"hljs-built_in\">console</span>.log(a)<br>        })<br>    })(a)<br>}</code></pre><br><h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3><br><p>同步是阻塞模式，异步是非阻塞模式。</p><br><ul><br><li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li><br><li>同步：必须等待操作做完，才返回结果.</li><br></ul><br><h3 id=\"articleHeader28\">数组API</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre><br><ul><li>forEach 遍历所有元素</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span><br>        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span><br><br>    })</code></pre><br><ul><li>every 判断所有元素是否都符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>    })<br>  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre><br><ul><li>some 判断是否有至少一个元素符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre><br><ul><li>sort 排序</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{<br>          <span class=\"hljs-comment\">// return a-b; //正序</span><br>          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span><br>        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span><br><br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre><br><ul><li>map 对元素重新组装，生成新数组</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考<br> var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">‘&lt;h1&gt;’</span> + item + <span class=\"hljs-string\">‘&lt;/h1&gt;’</span>;<br>      })<br>console.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">“&lt;h1&gt;2&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;3&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;9&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;0&lt;/h1&gt;”</span>]</code></pre><br><ul><li>filter 过滤符合条件的元素,较为常用</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre><br><h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{<br>        <span class=\"hljs-keyword\">if</span> (!dt) {<br>            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span><br>            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>        }<br><br>        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();<br>        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">var</span> day = dt.getDate();<br><br>        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {<br>            month = <span class=\"hljs-string\">‘0’</span> + month;<br>        }<br><br>        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {<br>            day = <span class=\"hljs-string\">‘0’</span> + day;<br>        }<br><br>        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">‘-‘</span> + month + <span class=\"hljs-string\">‘-‘</span> + day;<br>    }<br><br>    <span class=\"hljs-keyword\">var</span> date = formatDate();<br>    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span><br></code></pre><br><h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">‘0’</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)<br>    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre><br><h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)<br></span>{<br>        <span class=\"hljs-comment\">//数组处理</span><br>        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)<br>        {<br>          info.forEach(fn)<br>        }<span class=\"hljs-keyword\">else</span>{<br>           <span class=\"hljs-comment\">//对象处理</span><br>           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){<br>              fn(key, obj[key])<br>            }<br>        }<br><br>}<br><br><span class=\"hljs-comment\">//使用方法</span><br>  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">‘我是x’</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">‘我是y’</span>};<br>   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span><br>  })<br><br><br>  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];<br>  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span><br>  })<br></code></pre><br><h1 id=\"articleHeader32\">Web_API</h1><br><h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{<br>           elem.addEventListener( type ,fn)<br> }<br> <span class=\"hljs-comment\">//使用方法</span><br> bindEvent(id,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(e)<br> })<br><br> bindEvent(a,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span><br> })</code></pre><br><h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//使用代理，由父级帮忙去做<br><br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == &quot;A&quot;){<br>        alert(e.target.innerHTML)<br>    }<br>})” title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做<p></p>\n<p> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">“div1”</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!– 动态加载更多 –&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></p>\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == “A”){<br>        alert(e.target.innerHTML)<br>    }<br>})</p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//HTML结构<br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<div id=\"&quot;div2&quot;\">不使用代理</div>\n\n<p>//<br>function bindEvent(elem,type,selector, fn){<br>    if(fn == null){<br>        fn=selector;<br>        selector =null;<br>    }<br>    elem.addEventListener( type ,function(e){<br>        var target;<br>        if(selector){<br>            target = e.target;<br>            //matches() 方法用于检测字符串是否匹配给定的正则表达式。<br>            if(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }else{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p>//使用代理<br>bindEvent(div1,’click’,’a’,function(e){<br>    console.log(this)<br>})<br>//不使用代理<br>bindEvent(div2,’click’,function(e){<br>    //call改变了this指向为e<br>    console.log(this.toElement.innerHTML)<br>})<br>“ title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span><br> &lt;div id=<span class=\"hljs-string\">“div1”</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a1&lt;/a&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a2&lt;/a&gt;<br>    &lt;span&gt;ddd&lt;/span&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a5&lt;/a&gt;<br>    &lt;!– 动态加载更多 –&gt;<br>&lt;/div&gt;<p></p>\n<p>&lt;div id=<span class=\"hljs-string\">“div2”</span>&gt;不使用代理&lt;/div&gt;</p>\n<p><span class=\"hljs-comment\">//</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{<br>    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){<br>        fn=selector;<br>        selector =<span class=\"hljs-literal\">null</span>;<br>    }<br>    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>        <span class=\"hljs-keyword\">var</span> target;<br>        <span class=\"hljs-keyword\">if</span>(selector){<br>            target = e.target;<br>            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span><br>            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }<span class=\"hljs-keyword\">else</span>{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p><span class=\"hljs-comment\">//使用代理</span><br>bindEvent(div1,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-string\">‘a’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    console.log(<span class=\"hljs-keyword\">this</span>)<br>})<br><span class=\"hljs-comment\">//不使用代理</span><br>bindEvent(div2,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    <span class=\"hljs-comment\">//call改变了this指向为e</span><br>    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)<br>})<br></p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader36\">可以跨域的三个标签</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">“”</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //用于打点统计<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">“stylesheet”</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //使用CDN<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre><br><h1 id=\"articleHeader37\">3月10日面试</h1><br><h3 id=\"articleHeader38\">闭包的优缺点</h3><br><p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p><br><ul><br><li><br><p>优点：</p><br><ol><br><li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li><br><li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li><br></ol><br></li><br><li><br><p>缺点</p><br><ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol><br></li><br></ul><br><h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3><br><h3 id=\"articleHeader40\">http请求缓存头详解</h3><br><ol><br><li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li><br><li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li><br><li><br><p>Cache-Control: http1.1推出，指文件缓存的有效期。</p><br><ul><br><li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li><br><li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li><br><li>private:仅单用户私有，不被多用户共享</li><br><li>no-cache:不会被缓存。</li><br><li>no-store:不允许被存储</li><br></ul><br></li><br><li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li><br></ol><br><br></div>\n\n\n<p>尊重原著:文章转载于@<a href=\"https://segmentfault.com/a/1190000018628100\" target=\"_blank\" rel=\"noopener\">史燕斌</a>.</p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种</p>\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license><br><br><h1 id=\"articleHeader0\">websocket</h1><br><p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p><br><h3 id=\"articleHeader1\">websocket 和http区别？</h3><br><ul><br><li><br><p>相同点</p><br><ul><br><li>都是应用层的协议</li><br><li>都是基于tcp,可靠的协议</li><br></ul><br></li><br><li><br><p>不同点</p><br><ul><br><li>websocket是持久化的协议.</li><br><li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li><br><li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3><br><ul><br><li>相同点：都存储在客户端</li><br><li><br><p>不同点</p><br><ol><br><li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><br><li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li><br><li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li><br></ol><br></li><br></ul><br><h3 id=\"articleHeader3\">JS的类型？</h3><br><ul><br><li><br><p>基本类型</p><br><ul><br><li>undefined</li><br><li>null</li><br><li>Number</li><br><li>String</li><br><li>Boolean</li><br></ul><br></li><br><li><br><p>复杂类型</p><br><ul><li>Object</li></ul><br></li><br></ul><br><h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3><br><ul><br><li><br><p>值类型：</p><br><ul><br><li>undefined string number Boolean</li><br><li>拷贝形式,</li><br></ul><br></li><br><li><br><p>引用类型：</p><br><ul><br><li>array , function</li><br><li>指针指向，共用空间</li><br><li>可无限扩展属性，极大节省命名空间。</li><br></ul><br></li><br><li><br><p>特殊引用类型：function</p><br><ul><br><li>同引用类型↑</li><br><li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3><br><ul><br><li>number</li><br><li>string</li><br><li>undefined</li><br><li>object :  null和数组 都是object</li><br><li>function</li><br><li>boolean</li><br></ul><br><p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre><br><p>function是一个比较特殊的类型，所以typeof能够区分</p><br><h3 id=\"articleHeader6\">何时使用===何时使用==？</h3><br><ul><br><li><br><p>尽可能使用 === 原因如下</p><br><ul><br><li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li><br><li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li><br><li>== 会进行类型转换，很容易懵逼</li><br></ul><br></li><br><li><br><p>== 的使用情况,可参考</p><br><ul><li>判断对象的属性是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};<br>    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){<br>        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span><br>    }</code></pre><br><ul><li>判断函数的参数是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{<br>        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){<br>            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span><br>        }<br>    }</code></pre><br></li><br></ul><br><h3 id=\"articleHeader7\">如何理解JSON？</h3><br><ul><br><li><br><p>从纯JS的角度看，JSON就是对象，并且只有两个API</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span><br>   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">‘{“a”:10,”b”:30}’</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre><br></li><br><li>JSON也是一种轻量级的文本数据交换格式.</li><br></ul><br><h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3><br><ul><br><li>Object</li><br><li>Array</li><br><li>Boolean</li><br><li>Number</li><br><li>String</li><br><li>Function</li><br><li>Date</li><br><li>RegExp</li><br><li>Error</li><br></ul><br><h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3><br><ul><br><li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li><br><li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li><br></ul><br><h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3><br><p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/…</a></p><br><h3 id=\"articleHeader12\">实现数组的随机排序</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现<br> arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {<br>      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;<br>   });<br></code></pre><br><p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><br>    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span><br>   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;<br>    <span class=\"hljs-keyword\">while</span> (i)<br>    {<br>        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i–);<br>        t= arr[i];<br>        arr[i] = arr[j];<br>        arr[j]= t;<br>    }<br>}<br>shuffle(arr)<br><span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre><br><h1 id=\"articleHeader13\">原型和原型链</h1><br><h3 id=\"articleHeader14\">什么叫原型链</h3><br><p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p><br><h3 id=\"articleHeader15\">原型规则</h3><br><ol><br><li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li><br><li>所有的引用类型（数组，对象，函数），都有一个<strong>proto</strong>属性，也可以称为隐式原型，属性值是一个普通的对象</li><br><li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li><br><li>所有的引用类型（数组，对象，函数），<strong>proto</strong>属性值指向它的构造函数的prototype属性值</li><br><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>中去找。</li><br></ol><br><p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p><br><h3 id=\"articleHeader16\">构造函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>    <span class=\"hljs-keyword\">this</span>.age = age;<br>}<br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">25</span>);<br><span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">250</span>);<br><span class=\"hljs-built_in\">console</span>.log(foo,foo2);<br><br><span class=\"hljs-comment\">//循环对象自身的属性</span><br><span class=\"hljs-keyword\">var</span> item;<br><span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)<br>{<br>    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span><br>    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))<br>    {<br>        <span class=\"hljs-built_in\">console</span>.log(item)<br>    }<br><br>}<br></code></pre><br><h3 id=\"articleHeader17\">描述new一个对象的过程</h3><br><ol><br><li>创建一个对象</li><br><li>this指向这个新对象</li><br><li>执行代码，即对this赋值</li><br><li>return this。 默认有return，不用写</li><br></ol><br><h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span><br><br><span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span><br><span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader19\">写一个原型继承的例子</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);<br>}<br><br>Elem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    <span class=\"hljs-keyword\">if</span>(val){<br>        dom.innerHTML = val;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span><br>    }<span class=\"hljs-keyword\">else</span>{<br>        <span class=\"hljs-keyword\">return</span> dom.innerHTML;<br><br>    }<br>}<br><br>Elem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    dom.addEventListener( type , fn);<br><br>}<br><span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">‘h1’</span>);<br>h1.html(<span class=\"hljs-string\">“你被修改了”</span>).on(<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)<br>})<br></code></pre><br><h1 id=\"articleHeader20\">作用域和闭包</h1><br><h3 id=\"articleHeader21\">什么叫作用域？</h3><br><p><code>作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域&lt;br&gt;全局作用域》函数作用域》内层函数的作用域&lt;br&gt;作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。&lt;br&gt;</code></p><br><h3 id=\"articleHeader22\">变量提升的理解</h3><br><ul><br><li>变量定义</li><br><li>函数声明（注意和函数表达式的区别）</li><br><li>预解析</li><br></ul><br><h3 id=\"articleHeader23\">this的使用场景</h3><br><p>注意：this要在执行时才能确认值，定义时无法确认</p><br><ul><br><li>作为构造函数执行</li><br><li>作为对象属性执行</li><br><li>作为普通函数执行</li><br><li>call apply bind</li><br></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br> }<br><br>f1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, [<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>]);<br>f1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, <span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>);<br><br><br><span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span><br><span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br>}.bind(<span class=\"hljs-string\">‘我是被绑定的this’</span>)<br><br>f1(<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>)<br></code></pre><br><h3 id=\"articleHeader24\">闭包</h3><br><p><code>当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，&lt;br&gt;如果返回的这个函数在外部被执行，就产生了闭包。&lt;br&gt;表现形式：使函数外部能够调用函数内部定义的变量。</code></p><br><ul><li><br><p>闭包的使用场景</p><br><ol><br><li><br><p>函数作为返回值</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span><br>    }<br>}<br><span class=\"hljs-keyword\">var</span> f1 =  fn();<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;<br>f1(); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br><li><br><p>函数作为参数来传递</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a);<br>        }<br>}<br><span class=\"hljs-keyword\">var</span> fn1 = fn();<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;<br>    fn();<br>}<br>fn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br></ol><br></li></ul><br><h3 id=\"articleHeader25\">如何理解作用域？</h3><br><ul><br><li>自由变量</li><br><li>作用域链，即自由变量的查找</li><br><li>闭包的两个场景</li><br></ul><br><h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;<br><span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){<br>    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">“a”</span>);<br>    str.innerHTML = a + <span class=\"hljs-string\">“点我”</span> + <span class=\"hljs-string\">“&lt;br/&gt;”</span>;<br><br>    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);<br><br>    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{<br>        str.addEventListener(<span class=\"hljs-string\">“click”</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>            e.preventDefault();<br>            <span class=\"hljs-built_in\">console</span>.log(a)<br>        })<br>    })(a)<br>}</code></pre><br><h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3><br><p>同步是阻塞模式，异步是非阻塞模式。</p><br><ul><br><li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li><br><li>同步：必须等待操作做完，才返回结果.</li><br></ul><br><h3 id=\"articleHeader28\">数组API</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre><br><ul><li>forEach 遍历所有元素</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span><br>        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span><br><br>    })</code></pre><br><ul><li>every 判断所有元素是否都符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>    })<br>  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre><br><ul><li>some 判断是否有至少一个元素符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre><br><ul><li>sort 排序</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{<br>          <span class=\"hljs-comment\">// return a-b; //正序</span><br>          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span><br>        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span><br><br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre><br><ul><li>map 对元素重新组装，生成新数组</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考<br> var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">‘&lt;h1&gt;’</span> + item + <span class=\"hljs-string\">‘&lt;/h1&gt;’</span>;<br>      })<br>console.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">“&lt;h1&gt;2&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;3&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;9&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;0&lt;/h1&gt;”</span>]</code></pre><br><ul><li>filter 过滤符合条件的元素,较为常用</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre><br><h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{<br>        <span class=\"hljs-keyword\">if</span> (!dt) {<br>            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span><br>            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>        }<br><br>        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();<br>        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">var</span> day = dt.getDate();<br><br>        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {<br>            month = <span class=\"hljs-string\">‘0’</span> + month;<br>        }<br><br>        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {<br>            day = <span class=\"hljs-string\">‘0’</span> + day;<br>        }<br><br>        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">‘-‘</span> + month + <span class=\"hljs-string\">‘-‘</span> + day;<br>    }<br><br>    <span class=\"hljs-keyword\">var</span> date = formatDate();<br>    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span><br></code></pre><br><h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">‘0’</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)<br>    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre><br><h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)<br></span>{<br>        <span class=\"hljs-comment\">//数组处理</span><br>        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)<br>        {<br>          info.forEach(fn)<br>        }<span class=\"hljs-keyword\">else</span>{<br>           <span class=\"hljs-comment\">//对象处理</span><br>           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){<br>              fn(key, obj[key])<br>            }<br>        }<br><br>}<br><br><span class=\"hljs-comment\">//使用方法</span><br>  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">‘我是x’</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">‘我是y’</span>};<br>   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span><br>  })<br><br><br>  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];<br>  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span><br>  })<br></code></pre><br><h1 id=\"articleHeader32\">Web_API</h1><br><h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{<br>           elem.addEventListener( type ,fn)<br> }<br> <span class=\"hljs-comment\">//使用方法</span><br> bindEvent(id,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(e)<br> })<br><br> bindEvent(a,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span><br> })</code></pre><br><h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//使用代理，由父级帮忙去做<br><br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == &quot;A&quot;){<br>        alert(e.target.innerHTML)<br>    }<br>})” title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做<p></p>\n<p> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">“div1”</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!– 动态加载更多 –&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></p>\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == “A”){<br>        alert(e.target.innerHTML)<br>    }<br>})</p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//HTML结构<br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<div id=\"&quot;div2&quot;\">不使用代理</div>\n\n<p>//<br>function bindEvent(elem,type,selector, fn){<br>    if(fn == null){<br>        fn=selector;<br>        selector =null;<br>    }<br>    elem.addEventListener( type ,function(e){<br>        var target;<br>        if(selector){<br>            target = e.target;<br>            //matches() 方法用于检测字符串是否匹配给定的正则表达式。<br>            if(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }else{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p>//使用代理<br>bindEvent(div1,’click’,’a’,function(e){<br>    console.log(this)<br>})<br>//不使用代理<br>bindEvent(div2,’click’,function(e){<br>    //call改变了this指向为e<br>    console.log(this.toElement.innerHTML)<br>})<br>“ title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span><br> &lt;div id=<span class=\"hljs-string\">“div1”</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a1&lt;/a&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a2&lt;/a&gt;<br>    &lt;span&gt;ddd&lt;/span&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a5&lt;/a&gt;<br>    &lt;!– 动态加载更多 –&gt;<br>&lt;/div&gt;<p></p>\n<p>&lt;div id=<span class=\"hljs-string\">“div2”</span>&gt;不使用代理&lt;/div&gt;</p>\n<p><span class=\"hljs-comment\">//</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{<br>    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){<br>        fn=selector;<br>        selector =<span class=\"hljs-literal\">null</span>;<br>    }<br>    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>        <span class=\"hljs-keyword\">var</span> target;<br>        <span class=\"hljs-keyword\">if</span>(selector){<br>            target = e.target;<br>            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span><br>            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }<span class=\"hljs-keyword\">else</span>{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p><span class=\"hljs-comment\">//使用代理</span><br>bindEvent(div1,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-string\">‘a’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    console.log(<span class=\"hljs-keyword\">this</span>)<br>})<br><span class=\"hljs-comment\">//不使用代理</span><br>bindEvent(div2,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    <span class=\"hljs-comment\">//call改变了this指向为e</span><br>    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)<br>})<br></p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader36\">可以跨域的三个标签</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">“”</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //用于打点统计<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">“stylesheet”</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //使用CDN<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre><br><h1 id=\"articleHeader37\">3月10日面试</h1><br><h3 id=\"articleHeader38\">闭包的优缺点</h3><br><p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p><br><ul><br><li><br><p>优点：</p><br><ol><br><li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li><br><li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li><br></ol><br></li><br><li><br><p>缺点</p><br><ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol><br></li><br></ul><br><h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3><br><h3 id=\"articleHeader40\">http请求缓存头详解</h3><br><ol><br><li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li><br><li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li><br><li><br><p>Cache-Control: http1.1推出，指文件缓存的有效期。</p><br><ul><br><li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li><br><li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li><br><li>private:仅单用户私有，不被多用户共享</li><br><li>no-cache:不会被缓存。</li><br><li>no-store:不允许被存储</li><br></ul><br></li><br><li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li><br></ol><br><br></div>\n\n\n<p>尊重原著:文章转载于@<a href=\"https://segmentfault.com/a/1190000018628100\" target=\"_blank\" rel=\"noopener\">史燕斌</a>.</p>\n"},{"title":"mac/nginx/nginx部署/代理/跨域","_content":"\n上篇文章我们说到了nginx的一些入门功能使用，但Mac book下的nginx如何配置呢？这将是本篇文章的重点；\n\n### 安装nginx\n\n1. 打开终端Terminal\n\n2. 安装brew\n\n> ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n3.安装nginx\n\n> brew install nginx\n\n4. 检查是否安装成功\n\n```\nnginx -v\n\n```\n输出版本\n\n```\nnginx version: nginx/1.15.6  //我的是这个\n\n```\n如上输出 则安装成功\n5. nginx默认下载路径\n\n> /usr/local/etc/nginx/nginx.conf （配置文件路径）\n/usr/local/var/www （服务器默认路径）\n/usr/local/Cellar/nginx/1.12.0 （安装路径）\n\n修改配置文件 推荐使用vim\n```\nbrew install vim // 安装\n\n```\n\n> vim使用方法 转[菜鸟教程vim/vi](https://www.runoob.com/linux/linux-vim.html)\n\n6. 启动nginx\n\n\n```\n// 在终端输入\n\nnginx // 启动\n\n// 如果报无权限 则加上管理权限启动\n\nsudo nginx\n\n```\n\n启动成功之后访问 localhost:8080 如果网页输出Welcome to nginx! 则启动成功\n\n7. nginx的 常用命令\n\n```\nnginx -s quit    // 退出\nnginx -s reload  // 重新加载\nnginx -t         //测试nginx.conf配置\n\n```\n\n\n关于nginx的配置 可以查看[安静Eno | nginx配置/部署/代理](https://wlove-c.github.io/2019/06/03/nginx-20190603/)\n\n最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处\n","source":"_posts/macnginx-20190603.md","raw":"---\ntitle: mac/nginx/nginx部署/代理/跨域\ntags: 代理\ncategories: 编程\n---\n\n上篇文章我们说到了nginx的一些入门功能使用，但Mac book下的nginx如何配置呢？这将是本篇文章的重点；\n\n### 安装nginx\n\n1. 打开终端Terminal\n\n2. 安装brew\n\n> ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n3.安装nginx\n\n> brew install nginx\n\n4. 检查是否安装成功\n\n```\nnginx -v\n\n```\n输出版本\n\n```\nnginx version: nginx/1.15.6  //我的是这个\n\n```\n如上输出 则安装成功\n5. nginx默认下载路径\n\n> /usr/local/etc/nginx/nginx.conf （配置文件路径）\n/usr/local/var/www （服务器默认路径）\n/usr/local/Cellar/nginx/1.12.0 （安装路径）\n\n修改配置文件 推荐使用vim\n```\nbrew install vim // 安装\n\n```\n\n> vim使用方法 转[菜鸟教程vim/vi](https://www.runoob.com/linux/linux-vim.html)\n\n6. 启动nginx\n\n\n```\n// 在终端输入\n\nnginx // 启动\n\n// 如果报无权限 则加上管理权限启动\n\nsudo nginx\n\n```\n\n启动成功之后访问 localhost:8080 如果网页输出Welcome to nginx! 则启动成功\n\n7. nginx的 常用命令\n\n```\nnginx -s quit    // 退出\nnginx -s reload  // 重新加载\nnginx -t         //测试nginx.conf配置\n\n```\n\n\n关于nginx的配置 可以查看[安静Eno | nginx配置/部署/代理](https://wlove-c.github.io/2019/06/03/nginx-20190603/)\n\n最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处\n","slug":"macnginx-20190603","published":1,"date":"2020-05-18T06:08:34.684Z","updated":"2020-05-18T06:08:34.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qifi00190ohyy1o75afx","content":"<p>上篇文章我们说到了nginx的一些入门功能使用，但Mac book下的nginx如何配置呢？这将是本篇文章的重点；</p>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><ol>\n<li><p>打开终端Terminal</p>\n</li>\n<li><p>安装brew</p>\n</li>\n</ol>\n<blockquote>\n<p>ruby -e “$(curl -fsSL <a href=\"https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p>\n</blockquote>\n<p>3.安装nginx</p>\n<blockquote>\n<p>brew install nginx</p>\n</blockquote>\n<ol start=\"4\">\n<li>检查是否安装成功</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>输出版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx version: nginx/1.15.6  //我的是这个</span><br></pre></td></tr></table></figure>\n<p>如上输出 则安装成功</p>\n<ol start=\"5\">\n<li>nginx默认下载路径</li>\n</ol>\n<blockquote>\n<p>/usr/local/etc/nginx/nginx.conf （配置文件路径）<br>/usr/local/var/www （服务器默认路径）<br>/usr/local/Cellar/nginx/1.12.0 （安装路径）</p>\n</blockquote>\n<p>修改配置文件 推荐使用vim<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install vim // 安装</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>vim使用方法 转<a href=\"https://www.runoob.com/linux/linux-vim.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程vim/vi</a></p>\n</blockquote>\n<ol start=\"6\">\n<li>启动nginx</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在终端输入</span><br><span class=\"line\"></span><br><span class=\"line\">nginx // 启动</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果报无权限 则加上管理权限启动</span><br><span class=\"line\"></span><br><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n<p>启动成功之后访问 localhost:8080 如果网页输出Welcome to nginx! 则启动成功</p>\n<ol start=\"7\">\n<li>nginx的 常用命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s quit    // 退出</span><br><span class=\"line\">nginx -s reload  // 重新加载</span><br><span class=\"line\">nginx -t         //测试nginx.conf配置</span><br></pre></td></tr></table></figure>\n<p>关于nginx的配置 可以查看<a href=\"https://wlove-c.github.io/2019/06/03/nginx-20190603/\" target=\"_blank\" rel=\"noopener\">安静Eno | nginx配置/部署/代理</a></p>\n<p>最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处</p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<p>上篇文章我们说到了nginx的一些入门功能使用，但Mac book下的nginx如何配置呢？这将是本篇文章的重点；</p>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><ol>\n<li><p>打开终端Terminal</p>\n</li>\n<li><p>安装brew</p>\n</li>\n</ol>\n<blockquote>\n<p>ruby -e “$(curl -fsSL <a href=\"https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p>\n</blockquote>\n<p>3.安装nginx</p>\n<blockquote>\n<p>brew install nginx</p>\n</blockquote>\n<ol start=\"4\">\n<li>检查是否安装成功</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n<p>输出版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx version: nginx/1.15.6  //我的是这个</span><br></pre></td></tr></table></figure>\n<p>如上输出 则安装成功</p>\n<ol start=\"5\">\n<li>nginx默认下载路径</li>\n</ol>\n<blockquote>\n<p>/usr/local/etc/nginx/nginx.conf （配置文件路径）<br>/usr/local/var/www （服务器默认路径）<br>/usr/local/Cellar/nginx/1.12.0 （安装路径）</p>\n</blockquote>\n<p>修改配置文件 推荐使用vim<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install vim // 安装</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>vim使用方法 转<a href=\"https://www.runoob.com/linux/linux-vim.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程vim/vi</a></p>\n</blockquote>\n<ol start=\"6\">\n<li>启动nginx</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在终端输入</span><br><span class=\"line\"></span><br><span class=\"line\">nginx // 启动</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果报无权限 则加上管理权限启动</span><br><span class=\"line\"></span><br><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n<p>启动成功之后访问 localhost:8080 如果网页输出Welcome to nginx! 则启动成功</p>\n<ol start=\"7\">\n<li>nginx的 常用命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s quit    // 退出</span><br><span class=\"line\">nginx -s reload  // 重新加载</span><br><span class=\"line\">nginx -t         //测试nginx.conf配置</span><br></pre></td></tr></table></figure>\n<p>关于nginx的配置 可以查看<a href=\"https://wlove-c.github.io/2019/06/03/nginx-20190603/\" target=\"_blank\" rel=\"noopener\">安静Eno | nginx配置/部署/代理</a></p>\n<p>最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处</p>\n"},{"title":"nginx部署/代理的基础","_content":"\n### 关于nginx,咱们先了解nginx在开发过程中的主要作用\n\n* nginx解决跨域\n* nginx负载均衡\n\n### 一、nginx解决跨域\n\n如果要理解什么是跨域\n\n> 广义上的跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。即浏览器的同源策略/SOP限制引起的跨域也属于在内；\n\n* 那么什么是同源策略呢？\n\n> 同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。同源策略即: 协议+域名+端口\"三者相同\n\n* 常见的跨域场景如下：\n\n\n```\n\nURL                                      说明                    是否允许通信\n\nhttp://www.baidu.com/hello.js\nhttp://www.baidu.com/world.js         同一域名，不同文件或路径           \t允许（无跨域）\nhttp://www.baidu.com/hello/world.js\n\n\nhttp://www.baidu.com:8000/hello.js\nhttp://www.baidu.com/hello.js         同一域名，不同端口                不允许（有跨域）\n\nhttp://www.baidu.com/hello.js\nhttps://www.baidu.com/world.js        同一域名，不同协议                不允许（有跨域）\n\nhttp://www.baidu.com/hello.js\nhttp://192.168.22.128/world.js        域名和域名对应ip                 不允许（有跨域）\n\nhttp://baidu.com/hello.js\nhttp://x.baidu.com/hello.js           主域相同，子域不同                不允许（有跨域）\nhttp://www.baidu.com/hello.js\n\nhttp://www.baidu.com/hello.js\nhttp://www.bai.com/world.js           不同域名                        不允许（有跨域）\n\n```\n\n##### 常见的跨域解决方案有如下:\n1. jsonp解决跨域\n2. document.domain + iframe解决跨域\n3.  nginx代理解决跨域\n4.  nodejs中间件代理解决跨域\n\n### 重点来了 nginx代理解决跨域；\n\n\n```\n\nserver {\n\t\tlisten       80;\n\t\tserver_name  localhost; //前端域名 具体原理解释在下方\n\n\t\tlocation / {  // location / 代理所有请求 而如果是 location /api 则匹配到有/api 前缀的请求才会代理\n\t\t\t\t\t\tproxy_pass www.baidu.com; // 服务端域名\n\t\t}\n}\n\n\n```\n\n1. 前端server域名是localhost\n2. 服务器server域名是www.baidu.com\n> 根据浏览器的SOP/同源策略 localhost对www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，\n此时前端发起的请求相当于是localhost对localhost发起，这样是不会引起跨域的；但真实情况是，nginx对localhost的请求代理回 www.baidu.com\n\n-------\n这里赘述一下什么是代理；\n> 代理是在服务器和客户端之间假设的一层服务器（中间服务器），代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。\n\n代理分为正向代理和反向代理:具体区别自行百度...\n\n------\n\n### nginx负载均衡\n\nnginx是通过把请求分发到服务器列表来实现负载均衡的；具体实现如下:\n\n```\nupstream balance.com{\n\t\t\t server 192.168.2.100:42000;\n\t\t\t server 192.168.2.101:42000;\n\t\t\t server 192.168.2.102:42000;\n}\n\n\n\nserver {\n\t\tserver_name  fe.server.com;\n\t\tlisten 80;\n\t\tlocation /api {\n\t\t\t\tproxy_pass http://balance.com;\n\t\t}\n}\n\n\n```\n\n上面的配置只是指定了nginx需要转发的服务端列表，并没有指定分配策略。\n\n#### nginx负载均衡策略\n\n1. 轮询策略\n\n> 轮询策略是默认的策略，把每个请求按顺序逐一分配到不同的server，如果server挂掉，能自动剔除\n\n```\nupstream balance.com{\n\t\t\t\t server 192.168.2.100:42000;\n\t\t\t\t server 192.168.2.101:42000;\n\t\t\t\t server 192.168.2.102:42000;\n\t\t}\n```\n2. 最少连接数策略\n\n> 把请求优先分配给连接数最少的server,可以平衡每个队列的长度;\n\n\n```\n\tupstream balance.com{\n\t\t\t\t\t least_conn;\n\t\t\t\t\t server 192.168.2.100:42000;\n\t\t\t\t\t server 192.168.2.101:42000;\n\t\t\t\t\t server 192.168.2.102:42000;\n\t\t}\n```\n3. 最快响应时间策略\n\n> 优先分配给响应时间最短的服务器。\n\n```\n\tupstream balance.com{\n\t\t\t\t\t fair;\n\t\t\t\t\t server 192.168.2.100:42000;\n\t\t\t\t\t server 192.168.2.101:42000;\n\t\t\t\t\t server 192.168.2.102:42000;\n\t\t}\n```\n4. 权重策略\n> 使用weight来指定server访问比率，weight默认是1。访问率比例等于权重比例；\n\n```\n\tupstream balance.com{\n\t\t\t\t\t server 192.168.2.100:42000 weight=1;\n\t\t\t\t\t server 192.168.2.101:42000 weight=2;\n\t\t\t\t\t server 192.168.2.102:42000 weight=3;\n\t\t}\n```\n5. 客户端ip绑定 ip_hash\n> 每个请求会按照访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一server进行处理，可以解决session的问题。如果server挂掉，能自动剔除。\n\n```\n\tupstream balance.com{\n\t\t\t\t\tip_hash;\n\t\t\t\t\t server 192.168.2.100:42000 weight=1;\n\t\t\t\t\t server 192.168.2.101:42000 weight=2;\n\t\t\t\t\t server 192.168.2.102:42000 weight=3;\n\t\t}\n```\n\n以上是博主目前了解和使用到的一些技巧和知识啦，至于关于nginx部署后404问题请看@[vue框架下部署上线后刷新报404问题解决方案](https://www.jianshu.com/p/42dcccc2f991)\n\n最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处\n","source":"_posts/nginx-20190603.md","raw":"---\ntitle: nginx部署/代理的基础\ntags: 代理\ncategories: 编程\n---\n\n### 关于nginx,咱们先了解nginx在开发过程中的主要作用\n\n* nginx解决跨域\n* nginx负载均衡\n\n### 一、nginx解决跨域\n\n如果要理解什么是跨域\n\n> 广义上的跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。即浏览器的同源策略/SOP限制引起的跨域也属于在内；\n\n* 那么什么是同源策略呢？\n\n> 同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。同源策略即: 协议+域名+端口\"三者相同\n\n* 常见的跨域场景如下：\n\n\n```\n\nURL                                      说明                    是否允许通信\n\nhttp://www.baidu.com/hello.js\nhttp://www.baidu.com/world.js         同一域名，不同文件或路径           \t允许（无跨域）\nhttp://www.baidu.com/hello/world.js\n\n\nhttp://www.baidu.com:8000/hello.js\nhttp://www.baidu.com/hello.js         同一域名，不同端口                不允许（有跨域）\n\nhttp://www.baidu.com/hello.js\nhttps://www.baidu.com/world.js        同一域名，不同协议                不允许（有跨域）\n\nhttp://www.baidu.com/hello.js\nhttp://192.168.22.128/world.js        域名和域名对应ip                 不允许（有跨域）\n\nhttp://baidu.com/hello.js\nhttp://x.baidu.com/hello.js           主域相同，子域不同                不允许（有跨域）\nhttp://www.baidu.com/hello.js\n\nhttp://www.baidu.com/hello.js\nhttp://www.bai.com/world.js           不同域名                        不允许（有跨域）\n\n```\n\n##### 常见的跨域解决方案有如下:\n1. jsonp解决跨域\n2. document.domain + iframe解决跨域\n3.  nginx代理解决跨域\n4.  nodejs中间件代理解决跨域\n\n### 重点来了 nginx代理解决跨域；\n\n\n```\n\nserver {\n\t\tlisten       80;\n\t\tserver_name  localhost; //前端域名 具体原理解释在下方\n\n\t\tlocation / {  // location / 代理所有请求 而如果是 location /api 则匹配到有/api 前缀的请求才会代理\n\t\t\t\t\t\tproxy_pass www.baidu.com; // 服务端域名\n\t\t}\n}\n\n\n```\n\n1. 前端server域名是localhost\n2. 服务器server域名是www.baidu.com\n> 根据浏览器的SOP/同源策略 localhost对www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，\n此时前端发起的请求相当于是localhost对localhost发起，这样是不会引起跨域的；但真实情况是，nginx对localhost的请求代理回 www.baidu.com\n\n-------\n这里赘述一下什么是代理；\n> 代理是在服务器和客户端之间假设的一层服务器（中间服务器），代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。\n\n代理分为正向代理和反向代理:具体区别自行百度...\n\n------\n\n### nginx负载均衡\n\nnginx是通过把请求分发到服务器列表来实现负载均衡的；具体实现如下:\n\n```\nupstream balance.com{\n\t\t\t server 192.168.2.100:42000;\n\t\t\t server 192.168.2.101:42000;\n\t\t\t server 192.168.2.102:42000;\n}\n\n\n\nserver {\n\t\tserver_name  fe.server.com;\n\t\tlisten 80;\n\t\tlocation /api {\n\t\t\t\tproxy_pass http://balance.com;\n\t\t}\n}\n\n\n```\n\n上面的配置只是指定了nginx需要转发的服务端列表，并没有指定分配策略。\n\n#### nginx负载均衡策略\n\n1. 轮询策略\n\n> 轮询策略是默认的策略，把每个请求按顺序逐一分配到不同的server，如果server挂掉，能自动剔除\n\n```\nupstream balance.com{\n\t\t\t\t server 192.168.2.100:42000;\n\t\t\t\t server 192.168.2.101:42000;\n\t\t\t\t server 192.168.2.102:42000;\n\t\t}\n```\n2. 最少连接数策略\n\n> 把请求优先分配给连接数最少的server,可以平衡每个队列的长度;\n\n\n```\n\tupstream balance.com{\n\t\t\t\t\t least_conn;\n\t\t\t\t\t server 192.168.2.100:42000;\n\t\t\t\t\t server 192.168.2.101:42000;\n\t\t\t\t\t server 192.168.2.102:42000;\n\t\t}\n```\n3. 最快响应时间策略\n\n> 优先分配给响应时间最短的服务器。\n\n```\n\tupstream balance.com{\n\t\t\t\t\t fair;\n\t\t\t\t\t server 192.168.2.100:42000;\n\t\t\t\t\t server 192.168.2.101:42000;\n\t\t\t\t\t server 192.168.2.102:42000;\n\t\t}\n```\n4. 权重策略\n> 使用weight来指定server访问比率，weight默认是1。访问率比例等于权重比例；\n\n```\n\tupstream balance.com{\n\t\t\t\t\t server 192.168.2.100:42000 weight=1;\n\t\t\t\t\t server 192.168.2.101:42000 weight=2;\n\t\t\t\t\t server 192.168.2.102:42000 weight=3;\n\t\t}\n```\n5. 客户端ip绑定 ip_hash\n> 每个请求会按照访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一server进行处理，可以解决session的问题。如果server挂掉，能自动剔除。\n\n```\n\tupstream balance.com{\n\t\t\t\t\tip_hash;\n\t\t\t\t\t server 192.168.2.100:42000 weight=1;\n\t\t\t\t\t server 192.168.2.101:42000 weight=2;\n\t\t\t\t\t server 192.168.2.102:42000 weight=3;\n\t\t}\n```\n\n以上是博主目前了解和使用到的一些技巧和知识啦，至于关于nginx部署后404问题请看@[vue框架下部署上线后刷新报404问题解决方案](https://www.jianshu.com/p/42dcccc2f991)\n\n最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处\n","slug":"nginx-20190603","published":1,"date":"2020-05-18T06:08:34.684Z","updated":"2020-05-18T06:08:34.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcj9qifj001c0ohy4omv7mo7","content":"<h3 id=\"关于nginx-咱们先了解nginx在开发过程中的主要作用\"><a href=\"#关于nginx-咱们先了解nginx在开发过程中的主要作用\" class=\"headerlink\" title=\"关于nginx,咱们先了解nginx在开发过程中的主要作用\"></a>关于nginx,咱们先了解nginx在开发过程中的主要作用</h3><ul>\n<li>nginx解决跨域</li>\n<li>nginx负载均衡</li>\n</ul>\n<h3 id=\"一、nginx解决跨域\"><a href=\"#一、nginx解决跨域\" class=\"headerlink\" title=\"一、nginx解决跨域\"></a>一、nginx解决跨域</h3><p>如果要理解什么是跨域</p>\n<blockquote>\n<p>广义上的跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。即浏览器的同源策略/SOP限制引起的跨域也属于在内；</p>\n</blockquote>\n<ul>\n<li>那么什么是同源策略呢？</li>\n</ul>\n<blockquote>\n<p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。同源策略即: 协议+域名+端口”三者相同</p>\n</blockquote>\n<ul>\n<li>常见的跨域场景如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">URL                                      说明                    是否允许通信</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">http://www.baidu.com/world.js         同一域名，不同文件或路径           \t允许（无跨域）</span><br><span class=\"line\">http://www.baidu.com/hello/world.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com:8000/hello.js</span><br><span class=\"line\">http://www.baidu.com/hello.js         同一域名，不同端口                不允许（有跨域）</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">https://www.baidu.com/world.js        同一域名，不同协议                不允许（有跨域）</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">http://192.168.22.128/world.js        域名和域名对应ip                 不允许（有跨域）</span><br><span class=\"line\"></span><br><span class=\"line\">http://baidu.com/hello.js</span><br><span class=\"line\">http://x.baidu.com/hello.js           主域相同，子域不同                不允许（有跨域）</span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">http://www.bai.com/world.js           不同域名                        不允许（有跨域）</span><br></pre></td></tr></table></figure>\n<h5 id=\"常见的跨域解决方案有如下\"><a href=\"#常见的跨域解决方案有如下\" class=\"headerlink\" title=\"常见的跨域解决方案有如下:\"></a>常见的跨域解决方案有如下:</h5><ol>\n<li>jsonp解决跨域</li>\n<li>document.domain + iframe解决跨域</li>\n<li>nginx代理解决跨域</li>\n<li>nodejs中间件代理解决跨域</li>\n</ol>\n<h3 id=\"重点来了-nginx代理解决跨域；\"><a href=\"#重点来了-nginx代理解决跨域；\" class=\"headerlink\" title=\"重点来了 nginx代理解决跨域；\"></a>重点来了 nginx代理解决跨域；</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\t\tlisten       80;</span><br><span class=\"line\">\t\tserver_name  localhost; //前端域名 具体原理解释在下方</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlocation / &#123;  // location / 代理所有请求 而如果是 location /api 则匹配到有/api 前缀的请求才会代理</span><br><span class=\"line\">\t\t\t\t\t\tproxy_pass www.baidu.com; // 服务端域名</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>前端server域名是localhost</li>\n<li>服务器server域名是<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a><blockquote>\n<p>根据浏览器的SOP/同源策略 localhost对<a href=\"http://www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，\" target=\"_blank\" rel=\"noopener\">www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，</a><br>此时前端发起的请求相当于是localhost对localhost发起，这样是不会引起跨域的；但真实情况是，nginx对localhost的请求代理回 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>这里赘述一下什么是代理；</p>\n<blockquote>\n<p>代理是在服务器和客户端之间假设的一层服务器（中间服务器），代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。</p>\n</blockquote>\n<p>代理分为正向代理和反向代理:具体区别自行百度…</p>\n<hr>\n<h3 id=\"nginx负载均衡\"><a href=\"#nginx负载均衡\" class=\"headerlink\" title=\"nginx负载均衡\"></a>nginx负载均衡</h3><p>nginx是通过把请求分发到服务器列表来实现负载均衡的；具体实现如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\t\tserver_name  fe.server.com;</span><br><span class=\"line\">\t\tlisten 80;</span><br><span class=\"line\">\t\tlocation /api &#123;</span><br><span class=\"line\">\t\t\t\tproxy_pass http://balance.com;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的配置只是指定了nginx需要转发的服务端列表，并没有指定分配策略。</p>\n<h4 id=\"nginx负载均衡策略\"><a href=\"#nginx负载均衡策略\" class=\"headerlink\" title=\"nginx负载均衡策略\"></a>nginx负载均衡策略</h4><ol>\n<li>轮询策略</li>\n</ol>\n<blockquote>\n<p>轮询策略是默认的策略，把每个请求按顺序逐一分配到不同的server，如果server挂掉，能自动剔除</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>最少连接数策略</li>\n</ol>\n<blockquote>\n<p>把请求优先分配给连接数最少的server,可以平衡每个队列的长度;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t least_conn;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>最快响应时间策略</li>\n</ol>\n<blockquote>\n<p>优先分配给响应时间最短的服务器。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t fair;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>权重策略<blockquote>\n<p>使用weight来指定server访问比率，weight默认是1。访问率比例等于权重比例；</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000 weight=1;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000 weight=2;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000 weight=3;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>客户端ip绑定 ip_hash<blockquote>\n<p>每个请求会按照访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一server进行处理，可以解决session的问题。如果server挂掉，能自动剔除。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\tip_hash;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000 weight=1;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000 weight=2;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000 weight=3;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是博主目前了解和使用到的一些技巧和知识啦，至于关于nginx部署后404问题请看@<a href=\"https://www.jianshu.com/p/42dcccc2f991\" target=\"_blank\" rel=\"noopener\">vue框架下部署上线后刷新报404问题解决方案</a></p>\n<p>最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处</p>\n","site":{"data":{"musics":[{"name":"ひとり上手 - 中島みゆき","artist":"中島みゆき","url":"http://m701.music.126.net/20200515095934/13a6a6730d15a25a2024acc0b07a36ec/jdyyaac/545a/5309/020c/c090e17009dc2d341ade5fda6ea9059f.m4a","cover":"http://xxx.com/music-cover1.png"},{"name":"ひとり上手","artist":"周深","url":"http://m10.music.126.net/20200515100430/12a137cf782422083c4e250f1256ea78/yyaac/obj/wonDkMOGw6XDiTHCmMOi/2434865983/f337/465a/3798/5276f5c836fcda383ead3e3271216530.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"},{"name":"孤城少年","artist":"J.Fla","url":"http://m10.music.126.net/20200515100523/9bc61ea5b569f274396437393bd5a354/yyaac/025b/5458/0158/51703f058dc2528af7d662892ba8e74c.m4a","cover":"http://p2.music.126.net/awQVkO1OmMWoxZL--dikJg==/109951164970741627.jpg"}]}},"excerpt":"","more":"<h3 id=\"关于nginx-咱们先了解nginx在开发过程中的主要作用\"><a href=\"#关于nginx-咱们先了解nginx在开发过程中的主要作用\" class=\"headerlink\" title=\"关于nginx,咱们先了解nginx在开发过程中的主要作用\"></a>关于nginx,咱们先了解nginx在开发过程中的主要作用</h3><ul>\n<li>nginx解决跨域</li>\n<li>nginx负载均衡</li>\n</ul>\n<h3 id=\"一、nginx解决跨域\"><a href=\"#一、nginx解决跨域\" class=\"headerlink\" title=\"一、nginx解决跨域\"></a>一、nginx解决跨域</h3><p>如果要理解什么是跨域</p>\n<blockquote>\n<p>广义上的跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。即浏览器的同源策略/SOP限制引起的跨域也属于在内；</p>\n</blockquote>\n<ul>\n<li>那么什么是同源策略呢？</li>\n</ul>\n<blockquote>\n<p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。同源策略即: 协议+域名+端口”三者相同</p>\n</blockquote>\n<ul>\n<li>常见的跨域场景如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">URL                                      说明                    是否允许通信</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">http://www.baidu.com/world.js         同一域名，不同文件或路径           \t允许（无跨域）</span><br><span class=\"line\">http://www.baidu.com/hello/world.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com:8000/hello.js</span><br><span class=\"line\">http://www.baidu.com/hello.js         同一域名，不同端口                不允许（有跨域）</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">https://www.baidu.com/world.js        同一域名，不同协议                不允许（有跨域）</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">http://192.168.22.128/world.js        域名和域名对应ip                 不允许（有跨域）</span><br><span class=\"line\"></span><br><span class=\"line\">http://baidu.com/hello.js</span><br><span class=\"line\">http://x.baidu.com/hello.js           主域相同，子域不同                不允许（有跨域）</span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\"></span><br><span class=\"line\">http://www.baidu.com/hello.js</span><br><span class=\"line\">http://www.bai.com/world.js           不同域名                        不允许（有跨域）</span><br></pre></td></tr></table></figure>\n<h5 id=\"常见的跨域解决方案有如下\"><a href=\"#常见的跨域解决方案有如下\" class=\"headerlink\" title=\"常见的跨域解决方案有如下:\"></a>常见的跨域解决方案有如下:</h5><ol>\n<li>jsonp解决跨域</li>\n<li>document.domain + iframe解决跨域</li>\n<li>nginx代理解决跨域</li>\n<li>nodejs中间件代理解决跨域</li>\n</ol>\n<h3 id=\"重点来了-nginx代理解决跨域；\"><a href=\"#重点来了-nginx代理解决跨域；\" class=\"headerlink\" title=\"重点来了 nginx代理解决跨域；\"></a>重点来了 nginx代理解决跨域；</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\t\tlisten       80;</span><br><span class=\"line\">\t\tserver_name  localhost; //前端域名 具体原理解释在下方</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlocation / &#123;  // location / 代理所有请求 而如果是 location /api 则匹配到有/api 前缀的请求才会代理</span><br><span class=\"line\">\t\t\t\t\t\tproxy_pass www.baidu.com; // 服务端域名</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>前端server域名是localhost</li>\n<li>服务器server域名是<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a><blockquote>\n<p>根据浏览器的SOP/同源策略 localhost对<a href=\"http://www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，\" target=\"_blank\" rel=\"noopener\">www.baidu.com发起请求一定会出现跨域问题；但现在只要我们启动nginx服务器把server_name设置成前端的域名，</a><br>此时前端发起的请求相当于是localhost对localhost发起，这样是不会引起跨域的；但真实情况是，nginx对localhost的请求代理回 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>这里赘述一下什么是代理；</p>\n<blockquote>\n<p>代理是在服务器和客户端之间假设的一层服务器（中间服务器），代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。</p>\n</blockquote>\n<p>代理分为正向代理和反向代理:具体区别自行百度…</p>\n<hr>\n<h3 id=\"nginx负载均衡\"><a href=\"#nginx负载均衡\" class=\"headerlink\" title=\"nginx负载均衡\"></a>nginx负载均衡</h3><p>nginx是通过把请求分发到服务器列表来实现负载均衡的；具体实现如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">\t\tserver_name  fe.server.com;</span><br><span class=\"line\">\t\tlisten 80;</span><br><span class=\"line\">\t\tlocation /api &#123;</span><br><span class=\"line\">\t\t\t\tproxy_pass http://balance.com;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的配置只是指定了nginx需要转发的服务端列表，并没有指定分配策略。</p>\n<h4 id=\"nginx负载均衡策略\"><a href=\"#nginx负载均衡策略\" class=\"headerlink\" title=\"nginx负载均衡策略\"></a>nginx负载均衡策略</h4><ol>\n<li>轮询策略</li>\n</ol>\n<blockquote>\n<p>轮询策略是默认的策略，把每个请求按顺序逐一分配到不同的server，如果server挂掉，能自动剔除</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>最少连接数策略</li>\n</ol>\n<blockquote>\n<p>把请求优先分配给连接数最少的server,可以平衡每个队列的长度;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t least_conn;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>最快响应时间策略</li>\n</ol>\n<blockquote>\n<p>优先分配给响应时间最短的服务器。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t fair;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>权重策略<blockquote>\n<p>使用weight来指定server访问比率，weight默认是1。访问率比例等于权重比例；</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000 weight=1;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000 weight=2;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000 weight=3;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>客户端ip绑定 ip_hash<blockquote>\n<p>每个请求会按照访问ip的hash值分配，这样同一客户端连续的Web请求都会被分发到同一server进行处理，可以解决session的问题。如果server挂掉，能自动剔除。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream balance.com&#123;</span><br><span class=\"line\">\t\t\t\tip_hash;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.100:42000 weight=1;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.101:42000 weight=2;</span><br><span class=\"line\">\t\t\t\t server 192.168.2.102:42000 weight=3;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是博主目前了解和使用到的一些技巧和知识啦，至于关于nginx部署后404问题请看@<a href=\"https://www.jianshu.com/p/42dcccc2f991\" target=\"_blank\" rel=\"noopener\">vue框架下部署上线后刷新报404问题解决方案</a></p>\n<p>最后，如果文章对您有帮助，别忘记点赞喔，创作不易，转载请注明出处</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckcj9qif300070ohy2gvx75w4","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qif8000d0ohy6xccsze9"},{"post_id":"ckcj9qiew00010ohywhap5ljy","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qif9000g0ohydk7057gh"},{"post_id":"ckcj9qif400080ohyenv3vxu7","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifa000i0ohy66cd57f3"},{"post_id":"ckcj9qif6000b0ohym62ssezb","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifb000m0ohyk19v6hx8"},{"post_id":"ckcj9qiez00030ohy23by4nhl","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifc000p0ohy1fvqpoxp"},{"post_id":"ckcj9qif6000c0ohyto7o1y6u","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifd000t0ohyh7dm1av7"},{"post_id":"ckcj9qif8000f0ohyuu0nn1o0","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qife000w0ohy6b52j3qb"},{"post_id":"ckcj9qif9000h0ohygy8me5gb","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qiff000z0ohyvsc3ds0e"},{"post_id":"ckcj9qifb000l0ohy1ce0o276","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifg00130ohykz7mdwyn"},{"post_id":"ckcj9qifc000o0ohyopqb2k0q","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifh00160ohyy5dex4or"},{"post_id":"ckcj9qife000v0ohyadhe6mg0","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifi001a0ohy8xb5pxf3"},{"post_id":"ckcj9qife000y0ohybcyu2v8m","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifj001d0ohyeb4upcip"},{"post_id":"ckcj9qifh00150ohy83wxnpqd","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifk001g0ohybve3p3gg"},{"post_id":"ckcj9qifi00190ohyy1o75afx","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifk001i0ohy6m4hlr23"},{"post_id":"ckcj9qifj001c0ohy4omv7mo7","category_id":"ckcj9qif000040ohy0zm3tx4e","_id":"ckcj9qifl001k0ohym97nun8b"}],"PostTag":[{"post_id":"ckcj9qif8000f0ohyuu0nn1o0","tag_id":"ckcj9qif8000e0ohyjv7z8jto","_id":"ckcj9qifa000k0ohyg7nfwidt"},{"post_id":"ckcj9qiew00010ohywhap5ljy","tag_id":"ckcj9qif100050ohyp4g4kiy4","_id":"ckcj9qifb000n0ohyr46fe8dl"},{"post_id":"ckcj9qiew00010ohywhap5ljy","tag_id":"ckcj9qif4000a0ohylq46531d","_id":"ckcj9qifc000q0ohya96ruj15"},{"post_id":"ckcj9qiew00010ohywhap5ljy","tag_id":"ckcj9qif8000e0ohyjv7z8jto","_id":"ckcj9qifd000u0ohygrq5bycp"},{"post_id":"ckcj9qifb000l0ohy1ce0o276","tag_id":"ckcj9qifa000j0ohyxgrgvluh","_id":"ckcj9qife000x0ohy01ulvhfb"},{"post_id":"ckcj9qiez00030ohy23by4nhl","tag_id":"ckcj9qifa000j0ohyxgrgvluh","_id":"ckcj9qifg00110ohy4i28egv0"},{"post_id":"ckcj9qife000v0ohyadhe6mg0","tag_id":"ckcj9qifa000j0ohyxgrgvluh","_id":"ckcj9qifh00140ohyxfcvw1rt"},{"post_id":"ckcj9qif200060ohygdlay42v","tag_id":"ckcj9qifc000r0ohyvlkgij0l","_id":"ckcj9qifi00180ohy9tagpw78"},{"post_id":"ckcj9qif300070ohy2gvx75w4","tag_id":"ckcj9qifa000j0ohyxgrgvluh","_id":"ckcj9qifj001b0ohywssf0zza"},{"post_id":"ckcj9qifh00150ohy83wxnpqd","tag_id":"ckcj9qifa000j0ohyxgrgvluh","_id":"ckcj9qifk001f0ohyy9yfjw0y"},{"post_id":"ckcj9qif400080ohyenv3vxu7","tag_id":"ckcj9qifh00170ohyrxspfw24","_id":"ckcj9qifk001h0ohyh2v4qh0h"},{"post_id":"ckcj9qif6000b0ohym62ssezb","tag_id":"ckcj9qifk001e0ohymeweylgm","_id":"ckcj9qifl001l0ohyi3wzqvg5"},{"post_id":"ckcj9qif6000c0ohyto7o1y6u","tag_id":"ckcj9qifk001j0ohyvbq7lrwd","_id":"ckcj9qifl001n0ohye1ldkn9n"},{"post_id":"ckcj9qif9000h0ohygy8me5gb","tag_id":"ckcj9qifa000j0ohyxgrgvluh","_id":"ckcj9qifm001p0ohyeu5sa21f"},{"post_id":"ckcj9qifc000o0ohyopqb2k0q","tag_id":"ckcj9qifh00170ohyrxspfw24","_id":"ckcj9qifm001r0ohyc9udq7do"},{"post_id":"ckcj9qife000y0ohybcyu2v8m","tag_id":"ckcj9qifm001q0ohyx9qw8bhm","_id":"ckcj9qifm001t0ohyn6eesw8x"},{"post_id":"ckcj9qifi00190ohyy1o75afx","tag_id":"ckcj9qifm001s0ohydlypovdz","_id":"ckcj9qifn001v0ohyaliorbfm"},{"post_id":"ckcj9qifj001c0ohy4omv7mo7","tag_id":"ckcj9qifm001s0ohydlypovdz","_id":"ckcj9qifn001w0ohyvdkju1pw"}],"Tag":[{"name":"github","_id":"ckcj9qif100050ohyp4g4kiy4"},{"name":"node","_id":"ckcj9qif4000a0ohylq46531d"},{"name":"vue","_id":"ckcj9qif8000e0ohyjv7z8jto"},{"name":"javaScript","_id":"ckcj9qifa000j0ohyxgrgvluh"},{"name":"nodejs","_id":"ckcj9qifc000r0ohyvlkgij0l"},{"name":"CSS","_id":"ckcj9qifh00170ohyrxspfw24"},{"name":"Vue","_id":"ckcj9qifk001e0ohymeweylgm"},{"name":"工具类","_id":"ckcj9qifk001j0ohyvbq7lrwd"},{"name":"gulp","_id":"ckcj9qifm001q0ohyx9qw8bhm"},{"name":"代理","_id":"ckcj9qifm001s0ohydlypovdz"}]}}